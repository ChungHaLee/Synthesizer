/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/JZZ.js":
/*!***********************!*\
  !*** ./src/js/JZZ.js ***!
  \***********************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function(global, factory) {\r\n  /* istanbul ignore next */\r\n  if (true) {\r\n    module.exports = factory();\r\n  }\r\n  else {}\r\n})(this, function() {\r\n\r\n  var _scope = typeof window === 'undefined' ? __webpack_require__.g : window;\r\n  var _version = '1.5.9';\r\n  var i, j, k, m, n;\r\n\r\n  /* istanbul ignore next */\r\n  var _time = Date.now || function () { return new Date().getTime(); };\r\n  var _startTime = _time();\r\n  /* istanbul ignore next */\r\n  var _now = typeof performance != 'undefined' && performance.now ?\r\n    function() { return performance.now(); } : function() { return _time() - _startTime; };\r\n  var _schedule = function(f) {\r\n    setTimeout(f, 0);\r\n  };\r\n  function _nop() {}\r\n  function _func(f) { return typeof f == 'function'; }\r\n\r\n  // _R: common root for all async objects\r\n  function _R() {\r\n    this._orig = this;\r\n    this._ready = false;\r\n    this._queue = [];\r\n    this._log = [];\r\n  }\r\n  _R.prototype._exec = function() {\r\n    while (this._ready && this._queue.length) {\r\n      var x = this._queue.shift();\r\n      x[0].apply(this, x[1]);\r\n    }\r\n  };\r\n  _R.prototype._push = function(func, arg) { this._queue.push([func, arg]); _R.prototype._exec.apply(this); };\r\n  _R.prototype._slip = function(func, arg) { this._queue.unshift([func, arg]); };\r\n  _R.prototype._pause = function() { this._ready = false; };\r\n  _R.prototype._resume = function() { this._ready = true; _R.prototype._exec.apply(this); };\r\n  _R.prototype._break = function(err) { this._orig._bad = true; this._orig._log.push(err || 'Unknown JZZ error'); };\r\n  _R.prototype._repair = function() { this._orig._bad = false; };\r\n  _R.prototype._crash = function(err) { this._break(err); this._resume(); };\r\n  _R.prototype._err = function() { return this._log[this._log.length - 1]; };\r\n  _R.prototype.log = function() { return _clone(this._log); };\r\n  _R.prototype._dup = function() {\r\n    var F = function() {};\r\n    F.prototype = this._orig;\r\n    var ret = new F();\r\n    ret._ready = false;\r\n    ret._queue = [];\r\n    return ret;\r\n  };\r\n  _R.prototype._image = function() { return this._dup(); };\r\n  _R.prototype._thenable = function() {\r\n    if (this.then) return this;\r\n    var self = this;\r\n    var F = function() {}; F.prototype = self;\r\n    var ret = new F();\r\n    ret.then = function(good, bad) { self._push(_then, [good, bad]); return this; };      \r\n    return ret;\r\n  };\r\n  function _then(good, bad) {\r\n    if (this._bad) {\r\n      if (_func(bad)) bad.apply(this, [new Error(this._err())]);\r\n    }\r\n    else {\r\n      if (_func(good)) good.apply(this, [this]);\r\n    }\r\n  }\r\n  function _wait(obj, delay) {\r\n    if (this._bad) obj._crash(this._err());\r\n    else setTimeout(function() { obj._resume(); }, delay);\r\n  }\r\n  _R.prototype.wait = function(delay) {\r\n    if (!delay) return this;\r\n    var ret = this._image();\r\n    this._push(_wait, [ret, delay]);\r\n    return ret._thenable();\r\n  };\r\n  function _kick(obj) { if (this._bad) obj._break(this._err()); obj._resume(); }\r\n  function _rechain(self, obj, name) {\r\n    self[name] = function() {\r\n      var arg = arguments;\r\n      var ret = obj._image();\r\n      this._push(_kick, [ret]);\r\n      return ret[name].apply(ret, arg);\r\n    };\r\n  }\r\n  function _and(q) {\r\n    if (!this._bad) {\r\n      if (_func(q)) q.apply(this); else console.log(q);\r\n    }\r\n  }\r\n  _R.prototype.and = function(func) { this._push(_and, [func]); return this._thenable(); };\r\n  function _or(q) {\r\n    if (this._bad) {\r\n      if (_func(q)) q.apply(this); else console.log(q);\r\n    }\r\n  }\r\n  _R.prototype.or = function(func) { this._push(_or, [func]); return this._thenable(); };\r\n\r\n  _R.prototype._info = {};\r\n  _R.prototype.info = function() {\r\n    var info = _clone(this._orig._info);\r\n    if (typeof info.engine == 'undefined') info.engine = 'none';\r\n    if (typeof info.sysex == 'undefined') info.sysex = true;\r\n    return info;\r\n  };\r\n  _R.prototype.name = function() { return this.info().name; };\r\n\r\n  function _close(obj) {\r\n    if (this._bad) obj._crash(this._err());\r\n    else {\r\n      this._break('Closed');\r\n      obj._resume();\r\n    }\r\n  }\r\n  _R.prototype.close = function() {\r\n    var ret = new _R();\r\n    if (this._close) this._push(this._close, []);\r\n    this._push(_close, [ret]);\r\n    return ret._thenable();\r\n  };\r\n\r\n  function _tryAny(arr) {\r\n    if (!arr.length) {\r\n      this._break();\r\n      return;\r\n    }\r\n    var func = arr.shift();\r\n    if (arr.length) {\r\n      var self = this;\r\n      this._slip(_or, [ function() { _tryAny.apply(self, [arr]); } ]);\r\n    }\r\n    try {\r\n      this._repair();\r\n      func.apply(this);\r\n    }\r\n    catch (err) {\r\n      this._break(err.toString());\r\n    }\r\n  }\r\n\r\n  function _push(arr, obj) {\r\n    for (var i = 0; i < arr.length; i++) if (arr[i] === obj) return;\r\n    arr.push(obj);\r\n  }\r\n  function _pop(arr, obj) {\r\n    for (var i = 0; i < arr.length; i++) if (arr[i] === obj) {\r\n      arr.splice(i, 1);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // _J: JZZ object\r\n  function _J() {\r\n    _R.apply(this);\r\n  }\r\n  _J.prototype = new _R();\r\n\r\n  function _for(x, f) {\r\n    for(var k in x) if (x.hasOwnProperty(k)) f.call(this, k);\r\n  }\r\n  function _clone(obj, key, val) {\r\n    if (typeof key == 'undefined') return _clone(obj, [], []);\r\n    if (obj instanceof Object) {\r\n      for (var i = 0; i < key.length; i++) if (key[i] === obj) return val[i];\r\n      var ret;\r\n      if (obj instanceof Array) ret = []; else ret = {};\r\n      key.push(obj); val.push(ret);\r\n      _for(obj, function(k) { ret[k] = _clone(obj[k], key, val); });\r\n      return ret;\r\n    }\r\n    return obj;\r\n  }\r\n  _J.prototype._info = { name: 'JZZ.js', ver: _version, version: _version, inputs: [], outputs: [] };\r\n\r\n  var _outs = [];\r\n  var _ins = [];\r\n  var _outsW = [];\r\n  var _insW = [];\r\n\r\n  function _postRefresh() {\r\n    _jzz._info.engine = _engine._type;\r\n    _jzz._info.version = _engine._version;\r\n    _jzz._info.sysex = _engine._sysex;\r\n    _jzz._info.inputs = [];\r\n    _jzz._info.outputs = [];\r\n    _outs = [];\r\n    _ins = [];\r\n    _engine._allOuts = {};\r\n    _engine._allIns = {};\r\n    var i, x;\r\n    for (i = 0; i < _engine._outs.length; i++) {\r\n      x = _engine._outs[i];\r\n      x.engine = _engine;\r\n      _engine._allOuts[x.name] = x;\r\n      _jzz._info.outputs.push({\r\n        id: x.name,\r\n        name: x.name,\r\n        manufacturer: x.manufacturer,\r\n        version: x.version,\r\n        engine: _engine._type\r\n      });\r\n      _outs.push(x);\r\n    }\r\n    for (i = 0; i < _virtual._outs.length; i++) {\r\n      x = _virtual._outs[i];\r\n      _jzz._info.outputs.push({\r\n        id: x.name,\r\n        name: x.name,\r\n        manufacturer: x.manufacturer,\r\n        version: x.version,\r\n        engine: x.type\r\n      });\r\n      _outs.push(x);\r\n    }\r\n    for (i = 0; i < _engine._ins.length; i++) {\r\n      x = _engine._ins[i];\r\n      x.engine = _engine;\r\n      _engine._allIns[x.name] = x;\r\n      _jzz._info.inputs.push({\r\n        id: x.name,\r\n        name: x.name,\r\n        manufacturer: x.manufacturer,\r\n        version: x.version,\r\n        engine: _engine._type\r\n      });\r\n      _ins.push(x);\r\n    }\r\n    for (i = 0; i < _virtual._ins.length; i++) {\r\n      x = _virtual._ins[i];\r\n      _jzz._info.inputs.push({\r\n        id: x.name,\r\n        name: x.name,\r\n        manufacturer: x.manufacturer,\r\n        version: x.version,\r\n        engine: x.type\r\n      });\r\n      _ins.push(x);\r\n    }\r\n    if (_jzz._watcher && _jzz._watcher._handles.length) {\r\n      var diff = _diff(_insW, _outsW, _jzz._info.inputs, _jzz._info.outputs);\r\n       if (diff) {\r\n        for (j = 0; j < diff.inputs.removed.length; j++) {\r\n          x = _engine._inMap[diff.inputs.removed[j].name];\r\n          if (x) x._closeAll();\r\n        }\r\n        for (j = 0; j < diff.outputs.removed.length; j++) {\r\n          x = _engine._outMap[diff.outputs.removed[j].name];\r\n          if (x) x._closeAll();\r\n        }\r\n        _fireW(diff);\r\n      }\r\n    }\r\n    _insW = _jzz._info.inputs;\r\n    _outsW = _jzz._info.outputs;\r\n  }\r\n  function _refresh() {\r\n    if (!this._bad) _engine._refresh(this);\r\n  }\r\n  _J.prototype.refresh = function() {\r\n    this._push(_refresh, []);\r\n    return this._thenable();\r\n  };\r\n\r\n  function _filterList(q, arr) {\r\n    var i, n;\r\n    if (_func(q)) q = q(arr);\r\n    if (!(q instanceof Array)) q = [q];\r\n    var before = [];\r\n    var after = [];\r\n    var etc = arr.slice();\r\n    var a = before;\r\n    for (i = 0; i < q.length; i++) {\r\n      if (typeof q[i] == 'undefined') a = after;\r\n      else if (q[i] instanceof RegExp) for (n = 0; n < etc.length; n++) {\r\n        if (q[i].test(etc[n].name)) {\r\n          a.push(etc[n]);\r\n          etc.splice(n, 1);\r\n          n--;\r\n        }\r\n      }\r\n      else {\r\n        for (n = 0; n < etc.length; n++) if (q[i] + '' === n + '' || q[i] === etc[n].name || (q[i] instanceof Object && q[i].name === etc[n].name)) {\r\n          a.push(etc[n]);\r\n          etc.splice(n, 1);\r\n          n--;\r\n        }\r\n      }\r\n    }\r\n    return a == before ? before : before.concat(etc).concat(after);\r\n  }\r\n\r\n  function _notFound(port, q) {\r\n    var msg;\r\n    if (q instanceof RegExp) msg = 'Port matching ' + q + ' not found';\r\n    else if (q instanceof Object || typeof q == 'undefined') msg = 'Port not found';\r\n    else msg = 'Port \"' + q + '\" not found';\r\n    port._crash(msg);\r\n  }\r\n  function _openMidiOut(port, arg) {\r\n    if (this._bad) port._crash(this._err());\r\n    else {\r\n      var arr = _filterList(arg, _outs);\r\n      if (!arr.length) { _notFound(port, arg); return; }\r\n      var pack = function(x) { return function() { x.engine._openOut(this, x.name); }; };\r\n      for (var i = 0; i < arr.length; i++) arr[i] = pack(arr[i]);\r\n      port._slip(_tryAny, [arr]);\r\n      port._resume();\r\n    }\r\n  }\r\n  _J.prototype.openMidiOut = function(arg) {\r\n    var port = new _M();\r\n    this._push(_refresh, []);\r\n    this._push(_openMidiOut, [port, arg]);\r\n    return port._thenable();\r\n  };\r\n  _J.prototype._openMidiOutNR = function(arg) {\r\n    var port = new _M();\r\n    this._push(_openMidiOut, [port, arg]);\r\n    return port._thenable();\r\n  };\r\n\r\n  function _openMidiIn(port, arg) {\r\n    if (this._bad) port._crash(this._err());\r\n    else {\r\n      var arr = _filterList(arg, _ins);\r\n      if (!arr.length) { _notFound(port, arg); return; }\r\n      var pack = function(x) { return function() { x.engine._openIn(this, x.name); }; };\r\n      for (var i = 0; i < arr.length; i++) arr[i] = pack(arr[i]);\r\n      port._slip(_tryAny, [arr]);\r\n      port._resume();\r\n    }\r\n  }\r\n  _J.prototype.openMidiIn = function(arg) {\r\n    var port = new _M();\r\n    this._push(_refresh, []);\r\n    this._push(_openMidiIn, [port, arg]);\r\n    return port._thenable();\r\n  };\r\n  _J.prototype._openMidiInNR = function(arg) {\r\n    var port = new _M();\r\n    this._push(_openMidiIn, [port, arg]);\r\n    return port._thenable();\r\n  };\r\n\r\n  function _onChange(watcher, arg) {\r\n    if (this._bad) watcher._crash();\r\n    else {\r\n      watcher._slip(_connectW, [arg]);\r\n      watcher._resume();\r\n    }\r\n  }\r\n  _J.prototype.onChange = function(arg) {\r\n    if (!this._orig._watcher) this._orig._watcher = new _W();\r\n    var watcher = this._orig._watcher._image();\r\n    this._push(_onChange, [watcher, arg]);\r\n    return watcher._thenable();\r\n  };\r\n\r\n  _J.prototype._close = function() {\r\n    _engine._close();\r\n  };\r\n\r\n  // _M: MIDI-In/Out object\r\n  function _M() {\r\n    _R.apply(this);\r\n    this._handles = [];\r\n    this._outs = [];\r\n  }\r\n  _M.prototype = new _R();\r\n  _M.prototype._filter = function(msg) {\r\n    if (this._orig._mpe) {\r\n      var out;\r\n      var outs = 0;\r\n      if (this._handles && this._handles.length) {\r\n        outs = this._handles.length;\r\n        out = this._handles[0];\r\n      }\r\n      if (this._outs && this._outs.length) {\r\n        outs = this._outs.length;\r\n        out = this._outs[0];\r\n      }\r\n      if (outs == 1 && !out._mpe) {\r\n        msg = this._orig._mpe.filter(msg);\r\n      }\r\n    }\r\n    return msg;\r\n  };\r\n  _M.prototype._receive = function(msg) { this._emit(this._filter(msg)); };\r\n  function _receive(msg) { if (!this._bad) this._receive(msg); }\r\n  _M.prototype.send = function() {\r\n    this._push(_receive, [MIDI.apply(null, arguments)]);\r\n    return this._thenable();\r\n  };\r\n  _M.prototype.note = function(c, n, v, t) {\r\n    this.noteOn(c, n, v);\r\n    if (typeof this._ch == 'undefined' && typeof this._master == 'undefined') {\r\n      if (t > 0) this.wait(t).noteOff(c, n);\r\n    }\r\n    else {\r\n      if (v > 0) this.wait(v).noteOff(c);\r\n    }\r\n    return this._thenable();\r\n  };\r\n  _M.prototype._emit = function(msg) {\r\n    var i;\r\n    for (i = 0; i < this._handles.length; i++) this._handles[i].apply(this, [MIDI(msg)._stamp(this)]);\r\n    for (i = 0; i < this._outs.length; i++) {\r\n      var m = MIDI(msg);\r\n      if (!m._stamped(this._outs[i])) this._outs[i].send(m._stamp(this));\r\n    }\r\n  };\r\n  function _emit(msg) { this._emit(msg); }\r\n  _M.prototype.emit = function(msg) {\r\n    this._push(_emit, [msg]);\r\n    return this._thenable();\r\n  };\r\n  function _connect(arg) {\r\n    if (_func(arg)) _push(this._orig._handles, arg);\r\n    else _push(this._orig._outs, arg);\r\n  }\r\n  function _disconnect(arg) {\r\n    if (typeof arg == 'undefined') {\r\n      this._orig._handles = [];\r\n      this._orig._outs = [];\r\n    }\r\n    else if (_func(arg)) _pop(this._orig._handles, arg);\r\n    else _pop(this._orig._outs, arg);\r\n  }\r\n  _M.prototype.connect = function(arg) {\r\n    this._push(_connect, [arg]);\r\n    return this._thenable();\r\n  };\r\n  _M.prototype.disconnect = function(arg) {\r\n    this._push(_disconnect, [arg]);\r\n    return this._thenable();\r\n  };\r\n  _M.prototype.connected = function() {\r\n    return this._orig._handles.length + this._orig._outs.length;\r\n  };\r\n  _M.prototype._image = function() {\r\n    var dup = this._dup();\r\n    dup._ch = this._ch;\r\n    dup._sxid = this._sxid;\r\n    dup._master = this._master;\r\n    dup._band = this._band;\r\n    return dup;\r\n  };\r\n  _M.prototype._ch = undefined;\r\n  _M.prototype._sxid = 0x7f;\r\n  _M.prototype._master = undefined;\r\n  _M.prototype._band = undefined;\r\n\r\n  _M.prototype.sxId = function(id) {\r\n    if (typeof id == 'undefined') id = _M.prototype._sxid;\r\n    if (id == this._sxid) return this._thenable();\r\n    id = _7b(id);\r\n    var img = this._image();\r\n    img._sxid = id;\r\n    this._push(_kick, [img]);\r\n    return img._thenable();\r\n  };\r\n  _M.prototype.ch = function(c) {\r\n    if (c == this._ch || typeof c == 'undefined' && typeof this._ch == 'undefined') return this._thenable();\r\n    var img = this._image();\r\n    if (typeof c != 'undefined') c = _ch(c);\r\n    img._ch = c;\r\n    img._master = undefined;\r\n    img._band = undefined;\r\n    this._push(_kick, [img]);\r\n    return img._thenable();\r\n  };\r\n\r\n  function _mpe(m, n) {\r\n    if (!this._orig._mpe) this._orig._mpe = new MPE();\r\n    this._orig._mpe.setup(m, n);\r\n  }\r\n  _M.prototype.mpe = function(m, n) {\r\n    if (m == this._master && n == this._band || typeof m == 'undefined' && typeof this._master == 'undefined') return this._thenable();\r\n    if (typeof m != 'undefined') MPE.validate(m, n);\r\n    if (!n) return this.ch(m);\r\n    var img = this._image();\r\n    img._ch = undefined;\r\n    img._master = m;\r\n    img._band = n;\r\n    this._push(_mpe, [m, n]);\r\n    this._push(_kick, [img]);\r\n    return img._thenable();\r\n  };\r\n  function _validateChannel(c) {\r\n    if (c != parseInt(c) || c < 0 || c > 15)\r\n      throw RangeError('Bad channel value (must not be less than 0 or more than 15): ' + c);\r\n  }\r\n\r\n  // _W: Watcher object ~ MIDIAccess.onstatechange\r\n  function _W() {\r\n    _R.apply(this);\r\n    this._handles = [];\r\n    _rechain(this, _jzz, 'refresh');\r\n    _rechain(this, _jzz, 'openMidiOut');\r\n    _rechain(this, _jzz, 'openMidiIn');\r\n    _rechain(this, _jzz, 'onChange');\r\n    _rechain(this, _jzz, 'close');\r\n  }\r\n  _W.prototype = new _R();\r\n  function _connectW(arg) {\r\n    if (_func(arg)) {\r\n      if (!this._orig._handles.length) _engine._watch();\r\n      _push(this._orig._handles, arg);\r\n    }\r\n  }\r\n  function _disconnectW(arg) {\r\n    if (typeof arg == 'undefined') this._orig._handles = [];\r\n    else _pop(this._orig._handles, arg);\r\n    if (!this._orig._handles.length) _engine._unwatch();\r\n  }\r\n  _W.prototype.connect = function(arg) {\r\n    this._push(_connectW, [arg]);\r\n    return this._thenable();\r\n  };\r\n  _W.prototype.disconnect = function(arg) {\r\n    this._push(_disconnectW, [arg]);\r\n    return this._thenable();\r\n  };\r\n  function _changed(x0, y0, x1, y1) {\r\n    var i;\r\n    if (x0.length != x1.length || y0.length != y1.length) return true;\r\n    for (i = 0; i < x0.length; i++) if (x0[i].name != x1[i].name) return true;\r\n    for (i = 0; i < y0.length; i++) if (y0[i].name != y1[i].name) return true;\r\n    return false;\r\n  }\r\n  function _diff(x0, y0, x1, y1) {\r\n    if (!_changed(x0, y0, x1, y1)) return;\r\n    var ax = []; // added\r\n    var ay = [];\r\n    var rx = []; // removed\r\n    var ry = [];\r\n    var i;\r\n    var h = {};\r\n    for (i = 0; i < x0.length; i++) h[x0[i].name] = true;\r\n    for (i = 0; i < x1.length; i++) if (!h[x1[i].name]) ax.push(x1[i]);\r\n    h = {};\r\n    for (i = 0; i < x1.length; i++) h[x1[i].name] = true;\r\n    for (i = 0; i < x0.length; i++) if (!h[x0[i].name]) rx.push(x0[i]);\r\n    h = {};\r\n    for (i = 0; i < y0.length; i++) h[y0[i].name] = true;\r\n    for (i = 0; i < y1.length; i++) if (!h[y1[i].name]) ay.push(y1[i]);\r\n    h = {};\r\n    for (i = 0; i < y1.length; i++) h[y1[i].name] = true;\r\n    for (i = 0; i < y0.length; i++) if (!h[y0[i].name]) ry.push(y0[i]);\r\n    return { inputs: { added: ax, removed: rx }, outputs: { added: ay, removed: ry } };\r\n  }\r\n  function _fireW(arg) {\r\n    for (i = 0; i < _jzz._watcher._handles.length; i++) _jzz._watcher._handles[i].apply(_jzz, [arg]);\r\n  }\r\n\r\n  var _jzz;\r\n  var _engine = { _outs: [], _ins: [] };\r\n  var _virtual = { _outs: [], _ins: [] };\r\n\r\n  // // Node.js\r\n  // function _tryNODE() {\r\n  //   if (typeof module != 'undefined' && module.exports) {\r\n  //     var jazzmidi = require('jazz-midi');\r\n  //     if (jazzmidi) {\r\n  //       _initNode(jazzmidi);\r\n  //       return;\r\n  //     }\r\n  //   }\r\n  //   this._break();\r\n  // }\r\n  // Jazz-Plugin\r\n  function _tryJazzPlugin() {\r\n    var div = document.createElement('div');\r\n    div.style.visibility = 'hidden';\r\n    document.body.appendChild(div);\r\n    var obj = document.createElement('object');\r\n    obj.style.visibility = 'hidden';\r\n    obj.style.width = '0px'; obj.style.height = '0px';\r\n    obj.classid = 'CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90';\r\n    obj.type = 'audio/x-jazz';\r\n    document.body.appendChild(obj);\r\n    /* istanbul ignore next */\r\n    if (obj.isJazz) {\r\n      _initJazzPlugin(obj);\r\n      return;\r\n    }\r\n    this._break();\r\n  }\r\n\r\n  // Web MIDI API\r\n  var _navigator;\r\n  var _requestMIDIAccess;\r\n  function _findMidiAccess() {\r\n    if (typeof navigator !== 'undefined' && navigator.requestMIDIAccess) {\r\n      _navigator = navigator;\r\n      _requestMIDIAccess = navigator.requestMIDIAccess;\r\n      try {\r\n        if (_requestMIDIAccess.toString().indexOf('JZZ(') != -1) _requestMIDIAccess = undefined;\r\n      }\r\n      catch (err) {}\r\n    }\r\n  }\r\n  function _tryWebMIDI() {\r\n    _findMidiAccess();\r\n    if (_requestMIDIAccess) {\r\n      var self = this;\r\n      var onGood = function(midi) {\r\n        _initWebMIDI(midi);\r\n        self._resume();\r\n      };\r\n      var onBad = function(msg) {\r\n        self._crash(msg);\r\n      };\r\n      var opt = {};\r\n      _requestMIDIAccess.call(_navigator, opt).then(onGood, onBad);\r\n      this._pause();\r\n      return;\r\n    }\r\n    this._break();\r\n  }\r\n  function _tryWebMIDIsysex() {\r\n    _findMidiAccess();\r\n    if (_requestMIDIAccess) {\r\n      var self = this;\r\n      var onGood = function(midi) {\r\n        _initWebMIDI(midi, true);\r\n        self._resume();\r\n      };\r\n      var onBad = function(msg) {\r\n        self._crash(msg);\r\n      };\r\n      var opt = { sysex:true };\r\n      _requestMIDIAccess.call(_navigator, opt).then(onGood, onBad);\r\n      this._pause();\r\n      return;\r\n    }\r\n    this._break();\r\n  }\r\n\r\n  // Web-extension\r\n  function _tryCRX() {\r\n    var self = this;\r\n    var inst;\r\n    var msg;\r\n    function eventHandle(evt) {\r\n      inst = true;\r\n      var a = evt.detail;\r\n      if (!a) {\r\n        if (!msg) msg = document.getElementById('jazz-midi-msg');\r\n        if (!msg) return;\r\n        try { a = JSON.parse(msg.innerText); } catch (err) {}\r\n        msg.innerText = '';\r\n      }\r\n      document.removeEventListener('jazz-midi-msg', eventHandle);\r\n      if (a[0] === 'version') {\r\n        _initCRX(msg, a[2]);\r\n        self._resume();\r\n      }\r\n      else {\r\n        self._crash();\r\n      }\r\n    }\r\n    this._pause();\r\n    try {\r\n      document.addEventListener('jazz-midi-msg', eventHandle);\r\n      document.dispatchEvent(new Event('jazz-midi'));\r\n    }\r\n    catch (err) {}\r\n    setTimeout(function() { if (!inst) self._crash(); }, 50);\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  function _zeroBreak() {\r\n    this._pause();\r\n    var self = this;\r\n    _schedule(function() { self._crash(); });\r\n  }\r\n\r\n  function _filterEngines(opt) {\r\n    var ret = [];\r\n    var arr = _filterEngineNames(opt);\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] == 'webmidi') {\r\n        if (opt && opt.sysex === true) ret.push(_tryWebMIDIsysex);\r\n        if (!opt || opt.sysex !== true || opt.degrade === true) ret.push(_tryWebMIDI);\r\n      }\r\n      //else if (arr[i] == 'node') { ret.push(_tryNODE); ret.push(_zeroBreak); }\r\n      else if (arr[i] == 'extension') ret.push(_tryCRX);\r\n      else if (arr[i] == 'plugin') ret.push(_tryJazzPlugin);\r\n    }\r\n    ret.push(_initNONE);\r\n    return ret;\r\n  }\r\n\r\n  function _filterEngineNames(opt) {\r\n    var web = ['node', 'extension', 'plugin', 'webmidi'];\r\n    if (!opt || !opt.engine) return web;\r\n    var arr = opt.engine instanceof Array ? opt.engine : [opt.engine];\r\n    var dup = {};\r\n    var none;\r\n    var etc;\r\n    var head = [];\r\n    var tail = [];\r\n    var i;\r\n    for (i = 0; i < arr.length; i++) {\r\n      var name = arr[i].toString().toLowerCase();\r\n      if (dup[name]) continue;\r\n      dup[name] = true;\r\n      if (name === 'none') none = true;\r\n      if (name === 'etc' || typeof name == 'undefined') etc = true;\r\n      if (etc) tail.push(name); else head.push(name);\r\n      _pop(web, name);\r\n    }\r\n    if (etc || head.length || tail.length) none = false;\r\n    return none ? [] : head.concat(etc ? web : tail);\r\n  }\r\n\r\n  function _initJZZ(opt) {\r\n    _jzz = new _J();\r\n    _jzz._options = opt;\r\n    _jzz._push(_tryAny, [_filterEngines(opt)]);\r\n    _jzz.refresh();\r\n    _jzz._resume();\r\n  }\r\n\r\n  function _initNONE() {\r\n    _engine._type = 'none';\r\n    _engine._version = _version;\r\n    _engine._sysex = true;\r\n    _engine._outs = [];\r\n    _engine._ins = [];\r\n    _engine._refresh = function() { _postRefresh(); };\r\n    _engine._watch = _nop;\r\n    _engine._unwatch = _nop;\r\n    _engine._close = _nop;\r\n  }\r\n  // common initialization for Jazz-Plugin and jazz-midi\r\n  function _initEngineJP() {\r\n    _engine._inArr = [];\r\n    _engine._outArr = [];\r\n    _engine._inMap = {};\r\n    _engine._outMap = {};\r\n    _engine._outsW = [];\r\n    _engine._insW = [];\r\n    _engine._version = _engine._main.version;\r\n    _engine._sysex = true;\r\n    var watcher;\r\n    function _closeAll() {\r\n      for (var i = 0; i < this.clients.length; i++) this._close(this.clients[i]);\r\n    }\r\n    _engine._refresh = function() {\r\n      _engine._outs = [];\r\n      _engine._ins = [];\r\n      var i, x;\r\n      for (i = 0; (x = _engine._main.MidiOutInfo(i)).length; i++) {\r\n        _engine._outs.push({ type: _engine._type, name: x[0], manufacturer: x[1], version: x[2] });\r\n      }\r\n      for (i = 0; (x = _engine._main.MidiInInfo(i)).length; i++) {\r\n        _engine._ins.push({ type: _engine._type, name: x[0], manufacturer: x[1], version: x[2] });\r\n      }\r\n      _postRefresh();\r\n    };\r\n    _engine._openOut = function(port, name) {\r\n      var impl = _engine._outMap[name];\r\n      if (!impl) {\r\n        if (_engine._pool.length <= _engine._outArr.length) _engine._pool.push(_engine._newPlugin());\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allOuts[name].manufacturer,\r\n            version: _engine._allOuts[name].version,\r\n            type: 'MIDI-out',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _close: function(port) { _engine._closeOut(port); },\r\n          _closeAll: _closeAll,\r\n          _receive: function(a) { if (a.length) this.plugin.MidiOutRaw(a.slice()); }\r\n        };\r\n        var plugin = _engine._pool[_engine._outArr.length];\r\n        impl.plugin = plugin;\r\n        _engine._outArr.push(impl);\r\n        _engine._outMap[name] = impl;\r\n      }\r\n      if (!impl.open) {\r\n        var s = impl.plugin.MidiOutOpen(name);\r\n        if (s !== name) {\r\n          if (s) impl.plugin.MidiOutClose();\r\n          port._break(); return;\r\n        }\r\n        impl.open = true;\r\n      }\r\n      port._orig._impl = impl;\r\n      _push(impl.clients, port._orig);\r\n      port._info = impl.info;\r\n      port._receive = function(arg) { impl._receive(arg); };\r\n      port._close = function() { impl._close(this); };\r\n    };\r\n    _engine._openIn = function(port, name) {\r\n      var impl = _engine._inMap[name];\r\n      if (!impl) {\r\n        if (_engine._pool.length <= _engine._inArr.length) _engine._pool.push(_engine._newPlugin());\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allIns[name].manufacturer,\r\n            version: _engine._allIns[name].version,\r\n            type: 'MIDI-in',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _close: function(port) { _engine._closeIn(port); },\r\n          _closeAll: _closeAll,\r\n          handle: function(t, a) {\r\n            for (var i = 0; i < this.clients.length; i++) {\r\n              var msg = MIDI(a);\r\n              this.clients[i]._emit(msg);\r\n            }\r\n          }\r\n        };\r\n        var makeHandle = function(x) { return function(t, a) { x.handle(t, a); }; };\r\n        impl.onmidi = makeHandle(impl);\r\n        var plugin = _engine._pool[_engine._inArr.length];\r\n        impl.plugin = plugin;\r\n        _engine._inArr.push(impl);\r\n        _engine._inMap[name] = impl;\r\n      }\r\n      if (!impl.open) {\r\n        var s = impl.plugin.MidiInOpen(name, impl.onmidi);\r\n        if (s !== name) {\r\n          if (s) impl.plugin.MidiInClose();\r\n          port._break(); return;\r\n        }\r\n        impl.open = true;\r\n      }\r\n      port._orig._impl = impl;\r\n      _push(impl.clients, port._orig);\r\n      port._info = impl.info;\r\n      port._close = function() { impl._close(this); };\r\n    };\r\n    _engine._closeOut = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length && impl.open) {\r\n        impl.open = false;\r\n        impl.plugin.MidiOutClose();\r\n      }\r\n    };\r\n    _engine._closeIn = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length && impl.open) {\r\n        impl.open = false;\r\n        impl.plugin.MidiInClose();\r\n      }\r\n    };\r\n    _engine._close = function() {\r\n      for (var i = 0; i < _engine._inArr.length; i++) if (_engine._inArr[i].open) _engine._inArr[i].plugin.MidiInClose();\r\n      _engine._unwatch();\r\n    };\r\n    _engine._watch = function() {\r\n      if (!watcher) watcher = setInterval(function() { _engine._refresh(); }, 250);\r\n    };\r\n    _engine._unwatch = function() {\r\n      if (watcher) clearInterval(watcher);\r\n      watcher = undefined;\r\n    };\r\n  }\r\n\r\n  function _initNode(obj) {\r\n    _engine._type = 'node';\r\n    _engine._main = obj;\r\n    _engine._pool = [];\r\n    _engine._newPlugin = function() { return new obj.MIDI(); };\r\n    _initEngineJP();\r\n  }\r\n  /* istanbul ignore next */\r\n  function _initJazzPlugin(obj) {\r\n    _engine._type = 'plugin';\r\n    _engine._main = obj;\r\n    _engine._pool = [obj];\r\n    _engine._newPlugin = function() {\r\n      var plg = document.createElement('object');\r\n      plg.style.visibility = 'hidden';\r\n      plg.style.width = '0px'; obj.style.height = '0px';\r\n      plg.classid = 'CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90';\r\n      plg.type = 'audio/x-jazz';\r\n      document.body.appendChild(plg);\r\n      return plg.isJazz ? plg : undefined;\r\n    };\r\n    _initEngineJP();\r\n  }\r\n  function _initWebMIDI(access, sysex) {\r\n    _engine._type = 'webmidi';\r\n    _engine._version = 43;\r\n    _engine._sysex = !!sysex;\r\n    _engine._access = access;\r\n    _engine._inMap = {};\r\n    _engine._outMap = {};\r\n    _engine._outsW = [];\r\n    _engine._insW = [];\r\n    var watcher;\r\n    function _closeAll() {\r\n      for (var i = 0; i < this.clients.length; i++) this._close(this.clients[i]);\r\n    }\r\n    _engine._refresh = function() {\r\n      _engine._outs = [];\r\n      _engine._ins = [];\r\n      _engine._access.outputs.forEach(function(port) {\r\n        _engine._outs.push({type: _engine._type, name: port.name, manufacturer: port.manufacturer, version: port.version});\r\n      });\r\n      _engine._access.inputs.forEach(function(port) {\r\n        _engine._ins.push({type: _engine._type, name: port.name, manufacturer: port.manufacturer, version: port.version});\r\n      });\r\n      _postRefresh();\r\n    };\r\n    _engine._openOut = function(port, name) {\r\n      var impl = _engine._outMap[name];\r\n      if (!impl) {\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allOuts[name].manufacturer,\r\n            version: _engine._allOuts[name].version,\r\n            type: 'MIDI-out',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _close: function(port) { _engine._closeOut(port); },\r\n          _closeAll: _closeAll,\r\n          _receive: function(a) { if (impl.dev && a.length) this.dev.send(a.slice()); }\r\n        };\r\n      }\r\n      var found;\r\n      _engine._access.outputs.forEach(function(dev) {\r\n        if (dev.name === name) found = dev;\r\n      });\r\n      if (found) {\r\n        impl.dev = found;\r\n        _engine._outMap[name] = impl;\r\n        port._orig._impl = impl;\r\n        _push(impl.clients, port._orig);\r\n        port._info = impl.info;\r\n        port._receive = function(arg) { impl._receive(arg); };\r\n        port._close = function() { impl._close(this); };\r\n        if (impl.dev.open) {\r\n          port._pause();\r\n          impl.dev.open().then(function() {\r\n            port._resume();\r\n          }, function() {\r\n            port._crash();\r\n          });\r\n        }\r\n      }\r\n      else port._break();\r\n    };\r\n    _engine._openIn = function(port, name) {\r\n      var impl = _engine._inMap[name];\r\n      if (!impl) {\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allIns[name].manufacturer,\r\n            version: _engine._allIns[name].version,\r\n            type: 'MIDI-in',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _close: function(port) { _engine._closeIn(port); },\r\n          _closeAll: _closeAll,\r\n          handle: function(evt) {\r\n            for (var i = 0; i < this.clients.length; i++) {\r\n              var msg = MIDI([].slice.call(evt.data));\r\n              this.clients[i]._emit(msg);\r\n            }\r\n          }\r\n        };\r\n      }\r\n      var found;\r\n      _engine._access.inputs.forEach(function(dev) {\r\n        if (dev.name === name) found = dev;\r\n      });\r\n      if (found) {\r\n        impl.dev = found;\r\n        var makeHandle = function(x) { return function(evt) { x.handle(evt); }; };\r\n        impl.dev.onmidimessage = makeHandle(impl);\r\n        _engine._inMap[name] = impl;\r\n        port._orig._impl = impl;\r\n        _push(impl.clients, port._orig);\r\n        port._info = impl.info;\r\n        port._close = function() { impl._close(this); };\r\n        if (impl.dev.open) {\r\n          port._pause();\r\n          impl.dev.open().then(function() {\r\n            port._resume();\r\n          }, function() {\r\n            port._crash();\r\n          });\r\n        }\r\n      }\r\n      else port._break();\r\n    };\r\n    _engine._closeOut = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length) {\r\n        if (impl.dev && impl.dev.close) impl.dev.close();\r\n        impl.dev = undefined;\r\n      }\r\n    };\r\n    _engine._closeIn = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length) {\r\n        if (impl.dev) {\r\n          impl.dev.onmidimessage = null;\r\n          if (impl.dev.close) impl.dev.close();\r\n        }\r\n        impl.dev = undefined;\r\n      }\r\n    };\r\n    _engine._close = function() {\r\n      _engine._unwatch();\r\n    };\r\n    _engine._watch = function() {\r\n      _engine._access.onstatechange = function() {\r\n        watcher = true;\r\n        _schedule(function() {\r\n          if (watcher) {\r\n            _engine._refresh();\r\n            watcher = false;\r\n          }\r\n        });\r\n      };\r\n    };\r\n    _engine._unwatch = function() {\r\n      _engine._access.onstatechange = undefined;\r\n    };\r\n  }\r\n  function _initCRX(msg, ver) {\r\n    _engine._type = 'extension';\r\n    _engine._version = ver;\r\n    _engine._sysex = true;\r\n    _engine._pool = [];\r\n    _engine._outs = [];\r\n    _engine._ins = [];\r\n    _engine._inArr = [];\r\n    _engine._outArr = [];\r\n    _engine._inMap = {};\r\n    _engine._outMap = {};\r\n    _engine._outsW = [];\r\n    _engine._insW = [];\r\n    _engine.refreshClients = [];\r\n    _engine._msg = msg;\r\n    _engine._newPlugin = function() {\r\n      var plugin = { id: _engine._pool.length };\r\n      _engine._pool.push(plugin);\r\n      if (!plugin.id) plugin.ready = true;\r\n      else document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['new'] }));\r\n    };\r\n    _engine._newPlugin();\r\n    _engine._refresh = function(client) {\r\n      _engine.refreshClients.push(client);\r\n      client._pause();\r\n      _schedule(function() {\r\n        document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['refresh'] }));\r\n      });\r\n    };\r\n    function _closeAll() {\r\n      for (var i = 0; i < this.clients.length; i++) this._close(this.clients[i]);\r\n    }\r\n    _engine._openOut = function(port, name) {\r\n      var impl = _engine._outMap[name];\r\n      if (!impl) {\r\n        if (_engine._pool.length <= _engine._outArr.length) _engine._newPlugin();\r\n        var plugin = _engine._pool[_engine._outArr.length];\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allOuts[name].manufacturer,\r\n            version: _engine._allOuts[name].version,\r\n            type: 'MIDI-out',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _start: function() { document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['openout', plugin.id, name] })); },\r\n          _close: function(port) { _engine._closeOut(port); },\r\n          _closeAll: _closeAll,\r\n          _receive: function(a) { if (a.length) { var v = a.slice(); v.splice(0, 0, 'play', plugin.id); document.dispatchEvent(new CustomEvent('jazz-midi', {detail: v})); } }\r\n        };\r\n        impl.plugin = plugin;\r\n        plugin.output = impl;\r\n        _engine._outArr.push(impl);\r\n        _engine._outMap[name] = impl;\r\n      }\r\n      port._orig._impl = impl;\r\n      _push(impl.clients, port._orig);\r\n      port._info = impl.info;\r\n      port._receive = function(arg) { impl._receive(arg); };\r\n      port._close = function() { impl._close(this); };\r\n      if (!impl.open) {\r\n        port._pause();\r\n        if (impl.plugin.ready) impl._start();\r\n      }\r\n    };\r\n    _engine._openIn = function(port, name) {\r\n      var impl = _engine._inMap[name];\r\n      if (!impl) {\r\n        if (_engine._pool.length <= _engine._inArr.length) _engine._newPlugin();\r\n        var plugin = _engine._pool[_engine._inArr.length];\r\n        impl = {\r\n          name: name,\r\n          clients: [],\r\n          info: {\r\n            name: name,\r\n            manufacturer: _engine._allIns[name].manufacturer,\r\n            version: _engine._allIns[name].version,\r\n            type: 'MIDI-in',\r\n            sysex: _engine._sysex,\r\n            engine: _engine._type\r\n          },\r\n          _start: function() { document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['openin', plugin.id, name] })); },\r\n          _close: function(port) { _engine._closeIn(port); },\r\n          _closeAll: _closeAll\r\n        };\r\n        impl.plugin = plugin;\r\n        plugin.input = impl;\r\n        _engine._inArr.push(impl);\r\n        _engine._inMap[name] = impl;\r\n      }\r\n      port._orig._impl = impl;\r\n      _push(impl.clients, port._orig);\r\n      port._info = impl.info;\r\n      port._close = function() { impl._close(this); };\r\n      if (!impl.open) {\r\n        port._pause();\r\n        if (impl.plugin.ready) impl._start();\r\n      }\r\n    };\r\n    _engine._closeOut = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length && impl.open) {\r\n        impl.open = false;\r\n        document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['closeout', impl.plugin.id] }));\r\n      }\r\n    };\r\n    _engine._closeIn = function(port) {\r\n      var impl = port._impl;\r\n      _pop(impl.clients, port._orig);\r\n      if (!impl.clients.length && impl.open) {\r\n        impl.open = false;\r\n        document.dispatchEvent(new CustomEvent('jazz-midi', { detail: ['closein', impl.plugin.id] }));\r\n      }\r\n    };\r\n    _engine._close = function() {\r\n      _engine._unwatch();\r\n    };\r\n    var watcher;\r\n    _engine._watch = function() {\r\n      _engine._insW = _engine._ins;\r\n      _engine._outsW = _engine._outs;\r\n      watcher = setInterval(function() {\r\n        document.dispatchEvent(new CustomEvent('jazz-midi', {detail:['refresh']}));\r\n      }, 250);\r\n    };\r\n    _engine._unwatch = function() {\r\n      clearInterval(watcher);\r\n      watcher = undefined;\r\n    };\r\n    document.addEventListener('jazz-midi-msg', function(evt) {\r\n      var i, j, impl;\r\n      var v = evt.detail ? [ evt.detail ] : undefined;\r\n      if (!v) {\r\n        v = _engine._msg.innerText.split('\\n');\r\n        _engine._msg.innerText = '';\r\n        for (i = 0; i < v.length; i++) try { v[i] = JSON.parse(v[i]); } catch (err) { v[i] = []; }\r\n      }\r\n      for (i = 0; i < v.length; i++) {\r\n        var a = v[i];\r\n        if (!a.length) continue;\r\n        if (a[0] === 'refresh') {\r\n          if (a[1].ins) {\r\n            for (j = 0; j < a[1].ins.length; j++) a[1].ins[j].type = _engine._type;\r\n            _engine._ins = a[1].ins;\r\n          }\r\n          if (a[1].outs) {\r\n            for (j = 0; j < a[1].outs.length; j++) a[1].outs[j].type = _engine._type;\r\n            _engine._outs = a[1].outs;\r\n          }\r\n          _postRefresh();\r\n          for (j = 0; j < _engine.refreshClients.length; j++) _engine.refreshClients[j]._resume();\r\n          _engine.refreshClients = [];\r\n        }\r\n        else if (a[0] === 'version') {\r\n          var plugin = _engine._pool[a[1]];\r\n          if (plugin) {\r\n            plugin.ready = true;\r\n            if (plugin.input) plugin.input._start();\r\n            if (plugin.output) plugin.output._start();\r\n          }\r\n        }\r\n        else if (a[0] === 'openout') {\r\n          impl = _engine._pool[a[1]].output;\r\n          if (impl) {\r\n            if (a[2] == impl.name) {\r\n              impl.open = true;\r\n              if (impl.clients) for (j = 0; j < impl.clients.length; j++) impl.clients[j]._resume();\r\n            }\r\n            else if (impl.clients) for (j = 0; j < impl.clients.length; j++) impl.clients[j]._crash();\r\n          }\r\n        }\r\n        else if (a[0] === 'openin') {\r\n          impl = _engine._pool[a[1]].input;\r\n          if (impl) {\r\n            if (a[2] == impl.name) {\r\n              impl.open = true;\r\n              if (impl.clients) for (j = 0; j < impl.clients.length; j++) impl.clients[j]._resume();\r\n            }\r\n            else if (impl.clients) for (j = 0; j < impl.clients.length; j++) impl.clients[j]._crash();\r\n          }\r\n        }\r\n        else if (a[0] === 'midi') {\r\n          impl = _engine._pool[a[1]].input;\r\n          if (impl && impl.clients) {\r\n            for (j = 0; j < impl.clients.length; j++) {\r\n              var msg = MIDI(a.slice(3));\r\n              impl.clients[j]._emit(msg);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  var JZZ = function(opt) {\r\n    if (!_jzz) _initJZZ(opt);\r\n    return _jzz._thenable();\r\n  };\r\n  JZZ.JZZ = JZZ;\r\n  JZZ.version = _version;\r\n  JZZ.info = function() { return _J.prototype.info(); };\r\n\r\n  function Widget(arg) {\r\n    var self = new _M();\r\n    if (arg instanceof Object) _for(arg, function(k) { self[k] = arg[k]; });\r\n    self._resume();\r\n    return self;\r\n  }\r\n  JZZ.Widget = Widget;\r\n  _J.prototype.Widget = JZZ.Widget;\r\n  JZZ.addMidiIn = function(name, widget) {\r\n    var info = _clone(widget._info || {});\r\n    info.name = name;\r\n    info.type = info.type || 'javascript';\r\n    info.manufacturer = info.manufacturer || 'virtual';\r\n    info.version = info.version || '0.0';\r\n    var engine = {\r\n      _info: function() { return info; },\r\n      _openIn: function(port) {\r\n        port._pause();\r\n        port._info = _clone(info);\r\n        port._close = function() { widget.disconnect(port); };\r\n        widget.connect(port);\r\n        port._resume();\r\n      }\r\n    };\r\n    return JZZ.lib.registerMidiIn(name, engine);\r\n  };\r\n  JZZ.addMidiOut = function(name, widget) {\r\n    var info = _clone(widget._info || {});\r\n    info.name = name;\r\n    info.type = info.type || 'javascript';\r\n    info.manufacturer = info.manufacturer || 'virtual';\r\n    info.version = info.version || '0.0';\r\n    var engine = {\r\n      _info: function() { return info; },\r\n      _openOut: function(port) {\r\n        port._pause();\r\n        port._info = _clone(info);\r\n        port._close = function() { port.disconnect(); };\r\n        _connect.apply(port, [widget]);\r\n        port._resume();\r\n      }\r\n    };\r\n    return JZZ.lib.registerMidiOut(name, engine);\r\n  };\r\n\r\n  // JZZ.SMPTE\r\n\r\n  function SMPTE() {\r\n    var self = this instanceof SMPTE ? this : self = new SMPTE();\r\n    SMPTE.prototype.reset.apply(self, arguments);\r\n    return self;\r\n  }\r\n  SMPTE.prototype.reset = function(arg) {\r\n    if (arg instanceof SMPTE) {\r\n      this.setType(arg.getType());\r\n      this.setHour(arg.getHour());\r\n      this.setMinute(arg.getMinute());\r\n      this.setSecond(arg.getSecond());\r\n      this.setFrame(arg.getFrame());\r\n      this.setQuarter(arg.getQuarter());\r\n      return this;\r\n    }\r\n    var arr = arg instanceof Array ? arg : arguments;\r\n    this.setType(arr[0]);\r\n    this.setHour(arr[1]);\r\n    this.setMinute(arr[2]);\r\n    this.setSecond(arr[3]);\r\n    this.setFrame(arr[4]);\r\n    this.setQuarter(arr[5]);\r\n    return this;\r\n  };\r\n  function _fixDropFrame() { if (this.type == 29.97 && !this.second && this.frame < 2 && this.minute % 10) this.frame = 2; }\r\n  SMPTE.prototype.isFullFrame = function() { return this.quarter == 0 || this.quarter == 4; };\r\n  SMPTE.prototype.getType = function() { return this.type; };\r\n  SMPTE.prototype.getHour = function() { return this.hour; };\r\n  SMPTE.prototype.getMinute = function() { return this.minute; };\r\n  SMPTE.prototype.getSecond = function() { return this.second; };\r\n  SMPTE.prototype.getFrame = function() { return this.frame; };\r\n  SMPTE.prototype.getQuarter = function() { return this.quarter; };\r\n  SMPTE.prototype.setType = function(x) {\r\n    if (typeof x == 'undefined' || x == 24) this.type = 24;\r\n    else if (x == 25) this.type = 25;\r\n    else if (x == 29.97) { this.type = 29.97; _fixDropFrame.apply(this); }\r\n    else if (x == 30) this.type = 30;\r\n    else throw RangeError('Bad SMPTE frame rate: ' + x);\r\n    if (this.frame >= this.type) this.frame = this.type - 1; // could not be more than 29\r\n    return this;\r\n  };\r\n  SMPTE.prototype.setHour = function(x) {\r\n    if (typeof x == 'undefined') x = 0;\r\n    if (x != parseInt(x) || x < 0 || x >= 24) throw RangeError('Bad SMPTE hours value: ' + x);\r\n    this.hour = x;\r\n    return this;\r\n  };\r\n  SMPTE.prototype.setMinute = function(x) {\r\n    if (typeof x == 'undefined') x = 0;\r\n    if (x != parseInt(x) || x < 0 || x >= 60) throw RangeError('Bad SMPTE minutes value: ' + x);\r\n    this.minute = x;\r\n    _fixDropFrame.apply(this);\r\n    return this;\r\n  };\r\n  SMPTE.prototype.setSecond = function(x) {\r\n    if (typeof x == 'undefined') x = 0;\r\n    if (x != parseInt(x) || x < 0 || x >= 60) throw RangeError('Bad SMPTE seconds value: ' + x);\r\n    this.second = x;\r\n    _fixDropFrame.apply(this);\r\n    return this;\r\n  };\r\n  SMPTE.prototype.setFrame = function(x) {\r\n    if (typeof x == 'undefined') x = 0;\r\n    if (x != parseInt(x) || x < 0 || x >= this.type) throw RangeError('Bad SMPTE frame number: ' + x);\r\n    this.frame = x;\r\n    _fixDropFrame.apply(this);\r\n    return this;\r\n  };\r\n  SMPTE.prototype.setQuarter = function(x) {\r\n    if (typeof x == 'undefined') x = 0;\r\n    if (x != parseInt(x) || x < 0 || x >= 8) throw RangeError('Bad SMPTE quarter frame: ' + x);\r\n    this.quarter = x;\r\n    return this;\r\n  };\r\n  SMPTE.prototype.incrFrame = function() {\r\n    this.frame++;\r\n    if (this.frame >= this.type) {\r\n      this.frame = 0;\r\n      this.second++;\r\n      if (this.second >= 60) {\r\n        this.second = 0;\r\n        this.minute++;\r\n        if (this.minute >= 60) {\r\n          this.minute = 0;\r\n          this.hour = this.hour >= 23 ? 0 : this.hour + 1;\r\n        }\r\n      }\r\n    }\r\n    _fixDropFrame.apply(this);\r\n    return this;\r\n  };\r\n  SMPTE.prototype.decrFrame = function() {\r\n    if (!this.second && this.frame == 2 && this.type == 29.97 && this.minute % 10) this.frame = 0; // drop-frame\r\n    this.frame--;\r\n    if (this.frame < 0) {\r\n      this.frame = this.type == 29.97 ? 29 : this.type - 1;\r\n      this.second--;\r\n      if (this.second < 0) {\r\n        this.second = 59;\r\n        this.minute--;\r\n        if (this.minute < 0) {\r\n          this.minute = 59;\r\n          this.hour = this.hour ? this.hour - 1 : 23;\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n  SMPTE.prototype.incrQF = function() {\r\n    this.backwards = false;\r\n    this.quarter = (this.quarter + 1) & 7;\r\n    if (this.quarter == 0 || this.quarter == 4) this.incrFrame();\r\n    return this;\r\n  };\r\n  SMPTE.prototype.decrQF = function() {\r\n    this.backwards = true;\r\n    this.quarter = (this.quarter + 7) & 7;\r\n    if (this.quarter == 3 || this.quarter == 7) this.decrFrame();\r\n    return this;\r\n  };\r\n  function _825(a) { return [[24, 25, 29.97, 30][(a[7] >> 1) & 3], ((a[7] & 1) << 4) | a[6], (a[5] << 4) | a[4], (a[3] << 4) | a[2], (a[1] << 4) | a[0]]; }\r\n  SMPTE.prototype.read = function(m) {\r\n    if (!(m instanceof MIDI)) m = MIDI.apply(null, arguments);\r\n    if (m[0] == 0xf0 && m[1] == 0x7f && m[3] == 1 && m[4] == 1 && m[9] == 0xf7) {\r\n      this.type = [24, 25, 29.97, 30][(m[5] >> 5) & 3];\r\n      this.hour = m[5] & 31;\r\n      this.minute = m[6];\r\n      this.second = m[7];\r\n      this.frame = m[8];\r\n      this.quarter = 0;\r\n      this._ = undefined;\r\n      this._b = undefined;\r\n      this._f = undefined;\r\n      return true;\r\n    }\r\n    if (m[0] == 0xf1 && typeof m[1] != 'undefined') {\r\n      var q = m[1] >> 4;\r\n      var n = m[1] & 15;\r\n      if (q == 0) {\r\n        if (this._ == 7) {\r\n          if (this._f == 7) {\r\n            this.reset(_825(this._a));\r\n            this.incrFrame();\r\n          }\r\n          this.incrFrame();\r\n        }\r\n      }\r\n      else if (q == 3) {\r\n        if (this._ == 4) {\r\n          this.decrFrame();\r\n        }\r\n      }\r\n      else if (q == 4) {\r\n        if (this._ == 3) {\r\n          this.incrFrame();\r\n        }\r\n      }\r\n      else if (q == 7) {\r\n        if (this._ === 0) {\r\n          if (this._b === 0) {\r\n            this.reset(_825(this._a));\r\n            this.decrFrame();\r\n          }\r\n          this.decrFrame();\r\n        }\r\n      }\r\n      if (!this._a) this._a = [];\r\n      this._a[q] = n;\r\n      this._f = this._f === q - 1 || q == 0 ? q : undefined;\r\n      this._b = this._b === q + 1 || q == 7 ? q : undefined;\r\n      this._ = q;\r\n      this.quarter = q;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  function _mtc(t) {\r\n    if (!t.backwards && t.quarter >= 4) t.decrFrame(); // continue encoding previous frame\r\n    else if (t.backwards && t.quarter < 4) t.incrFrame();\r\n    var ret;\r\n    switch (t.quarter >> 1) {\r\n      case 0: ret = t.frame; break;\r\n      case 1: ret = t.second; break;\r\n      case 2: ret = t.minute; break;\r\n      default: ret = t.hour;\r\n    }\r\n    if (t.quarter & 1) ret >>= 4;\r\n    else ret &= 15;\r\n    if (t.quarter == 7) {\r\n      if (t.type == 25) ret |= 2;\r\n      else if (t.type == 29.97) ret |= 4;\r\n      else if (t.type == 30) ret |= 6;\r\n    }\r\n    // restore original t\r\n    if (!t.backwards && t.quarter >= 4) t.incrFrame();\r\n    else if (t.backwards && t.quarter < 4) t.decrFrame();\r\n    return ret | (t.quarter << 4);\r\n  }\r\n  function _hrtype(t) {\r\n    if (t.type == 25) return t.hour | 0x20;\r\n    if (t.type == 29.97) return t.hour | 0x40;\r\n    if (t.type == 30) return t.hour | 0x60;\r\n    return t.hour;\r\n  }\r\n  function _dec(x) { return x < 10 ? '0' + x : x; }\r\n  function _smptetxt(x) {\r\n    var arr = [];\r\n    for (var i = 0; i < x.length; i++) arr[i] = _dec(i ? x[i] : x[i] & 0x1f);\r\n    return arr.join(':');\r\n  }\r\n  SMPTE.prototype.toString = function() { return _smptetxt([this.hour, this.minute, this.second, this.frame]); };\r\n  JZZ.SMPTE = SMPTE;\r\n  _J.prototype.SMPTE = SMPTE;\r\n\r\n  // JZZ.MIDI\r\n\r\n  function MIDI(arg) {\r\n    var self = this instanceof MIDI ? this : self = new MIDI();\r\n    var i;\r\n    if (arg instanceof MIDI) {\r\n      self._from = arg._from.slice();\r\n      _for(arg, function(i) { if (i != '_from') self[i] = arg[i]; });\r\n      return self;\r\n    }\r\n    else self._from = [];\r\n    if (typeof arg == 'undefined') return self;\r\n    var arr = arg instanceof Array ? arg : arguments;\r\n    for (i = 0; i < arr.length; i++) {\r\n      n = arr[i];\r\n      if (i == 1) {\r\n        if (self[0] >= 0x80 && self[0] <= 0xAF) n = MIDI.noteValue(n);\r\n        if (self[0] >= 0xC0 && self[0] <= 0xCF) n = MIDI.programValue(n);\r\n      }\r\n      if (n != parseInt(n) || n < 0 || n > 255) _throw(arr[i]);\r\n      self.push(n);\r\n    }\r\n    return self;\r\n  }\r\n  MIDI.prototype = [];\r\n  MIDI.prototype.constructor = MIDI;\r\n  var _noteNum = {};\r\n  MIDI.noteValue = function(x) { return typeof x == 'undefined' ? undefined : _noteNum[x.toString().toLowerCase()]; };\r\n  MIDI.programValue = function(x) { return x; };\r\n  MIDI.octaveValue = function(x) {\r\n    var n = _noteNum[x.toString().toLowerCase()];\r\n    if (typeof n == 'undefined') n = _noteNum[x.toString().toLowerCase() + '1'];\r\n    return typeof n == 'undefined' ? undefined : n % 12;\r\n  };\r\n  MIDI.freq = function(n, a) {\r\n    if (typeof a == 'undefined') a = 440.0;\r\n    _float(a);\r\n    if (n != parseFloat(n)) n = _7bn(n);\r\n    return (a * Math.pow(2, (n - 69.0) / 12.0));\r\n  };\r\n  function _float(x) { if (x != parseFloat(x)) throw TypeError('Not a number: ' + x); }\r\n  MIDI.shift = function(f, f0) {\r\n    if (typeof f0 == 'undefined') f0 = 440;\r\n    _float(f);\r\n    _float(f0);\r\n    return Math.log2(f / f0) * 12;\r\n  };\r\n  MIDI.midi = function(f, f0) {\r\n    if (f != parseFloat(f)) return _7bn(f);\r\n    return MIDI.shift(f, f0) + 69;\r\n  };\r\n  MIDI.to7b = function(x) {\r\n    _float(x);\r\n    return x <= 0 ? 0 : x >= 1 ? 0x7f : Math.floor(x * 0x80);\r\n  };\r\n  MIDI.to14b = function(x) {\r\n    _float(x);\r\n    return x <= 0 ? 0 : x >= 1 ? 0x3fff : Math.floor(x * 0x4000);\r\n  };\r\n  MIDI.to21b = function(x) {\r\n    if (typeof x == 'undefined') return 0x1fffff;\r\n    _float(x);\r\n    if (x <= 0) return 0;\r\n    x = (Math.floor(x) << 14) + MIDI.to14b(x - Math.floor(x));\r\n    return x < 0x1fffff ? x : 0x1ffffe;\r\n  };\r\n  function _MIDI() {}\r\n  _MIDI.prototype = MIDI;\r\n  MIDI._sxid = 0x7f;\r\n  MIDI.sxId = function(id) {\r\n    if (typeof id == 'undefined') id = MIDI._sxid;\r\n    if (id == this._sxid) return this;\r\n    id = _7b(id);\r\n    var ret = new _MIDI();\r\n    ret._ch = this._ch;\r\n    ret._sxid = id;\r\n    return ret;\r\n  };\r\n  MIDI.ch = function(c) {\r\n    if (c == this._ch || typeof c == 'undefined' && typeof this._ch == 'undefined') return this;\r\n    var ret = new _MIDI();\r\n    if (typeof c != 'undefined') c = _ch(c);\r\n    ret._ch = c;\r\n    ret._sxid = this._sxid;\r\n    return ret;\r\n  };\r\n\r\n  var _noteMap = { c:0, d:2, e:4, f:5, g:7, a:9, b:11, h:11 };\r\n  _for(_noteMap, function(k) {\r\n    for (n = 0; n < 12; n++) {\r\n      m = _noteMap[k] + n * 12;\r\n      if (m > 127) break;\r\n      _noteNum[k + n] = m; _noteNum[k + '♮' + n] = m;\r\n      if (m > 0) {\r\n        _noteNum[k + 'b' + n] = m - 1; _noteNum[k + '♭' + n] = m - 1;\r\n        _noteNum[k + 'bb' + n] = m - 2; _noteNum[k + '♭♭' + n] = m - 2; _noteNum[k + '𝄫' + n] = m - 2;\r\n      }\r\n      if (m < 127) {\r\n        _noteNum[k + '#' + n] = m + 1; _noteNum[k + '♯' + n] = m + 1;\r\n        _noteNum[k + '##' + n] = m + 2; _noteNum[k + '♯♯' + n] = m + 2; _noteNum[k + '𝄪' + n] = m + 2;\r\n      }\r\n    }\r\n  });\r\n  for (n = 0; n < 128; n++) _noteNum[n] = n;\r\n  function _throw(x) { throw RangeError('Bad MIDI value: ' + x); }\r\n  function _bad(x) { throw TypeError('Invalid value: ' + x); }\r\n  function _oor(x) { throw RangeError('Out of range: ' + x); }\r\n  function _ch(c) { _validateChannel(c); return parseInt(c); }\r\n  function _7b(n, m) { if (n != parseInt(n) || n < 0 || n > 0x7f) _throw(typeof m == 'undefined' ? n : m); return parseInt(n); }\r\n  function _8b(n) { if (n != parseInt(n) || n < 0 || n > 0xff) _throw(n); return parseInt(n); }\r\n  function _14b(n) { if (n != parseInt(n) || n < 0 || n > 0x3fff) _throw(n); return parseInt(n); }\r\n  function _16b(n) { if (n != parseInt(n) || n < 0 || n > 0xffff) throw RangeError('Expected a 16-bit value: ' + n); return parseInt(n); }\r\n  function _21b(n) { if (n != parseInt(n) || n < 0 || n > 0x1fffff) _throw(n); return parseInt(n); }\r\n  function _7bn(n) { return _7b(MIDI.noteValue(n), n); }\r\n  function _lsb(n) { return _14b(n) & 0x7f; }\r\n  function _msb(n) { return _14b(n) >> 7; }\r\n  function _8bs(s) { s = '' + s; for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 255) _throw(s[i]); return s; }\r\n  function _to777(n) { return [n >> 14, (n >> 7) & 0x7f, n & 0x7f]; }\r\n  function _01(x, y) {\r\n    if (x != parseFloat(x)) _bad(typeof y == 'undefined' ? x : y);\r\n    if (x < 0 || x > 1) _oor(typeof y == 'undefined' ? x : y);\r\n    return parseFloat(x);\r\n }\r\n  function _rt(b) { return typeof b != 'undefined' && !b ? 0x7E : 0x7F; }\r\n  function _ntu(x) {\r\n    var k, m;\r\n    var kkk = [];\r\n    var vvv = {};\r\n    _for(x, function(k) {\r\n      m = _21b(x[k]);\r\n      k = _7bn(k);\r\n      if (k in vvv) throw RangeError('Duplicate MIDI value: ' + k);\r\n      kkk.push(k);\r\n      vvv[k] = m;\r\n    });\r\n    kkk.sort();\r\n    var out = [kkk.length];\r\n    for (k = 0; k < kkk.length; k++) out = out.concat([kkk[k]], _to777(vvv[kkk[k]]));\r\n    return out;\r\n  }\r\n  function _f2ntu(x) {\r\n    var out = {};\r\n    _for (x, function(k) { out[k] = MIDI.to21b(x[k] == parseFloat(x[k]) ? x[k] : _7bn(x[k])); });\r\n    return out;\r\n  }\r\n  function _hz2ntu(x) {\r\n    var out = {};\r\n    _for (x, function(k) { out[k] = MIDI.to21b(MIDI.midi(x[k])); });\r\n    return out;\r\n  }\r\n  function _12x7(a) {\r\n    var out = [];\r\n    if (!(a instanceof Array) || a.length != 12) throw TypeError('Expected an array of size 12');\r\n    for (var i = 0; i < 12; i++) out.push(_7b(a[i]));\r\n    return out;\r\n  }\r\n  function _12x14(a) {\r\n    var out = [];\r\n    if (!(a instanceof Array) || a.length != 12) throw TypeError('Expected an array of size 12');\r\n    for (var i = 0; i < 12; i++) {\r\n      out.push(_msb(a[i]));\r\n      out.push(_lsb(a[i]));\r\n    }\r\n    return out;\r\n  }\r\n  var _helperMPE = {\r\n    noteOff: function(c, n, v) { if (typeof v == 'undefined') v = 64; return [0x80 + _ch(c), _7bn(n), _7b(v)]; },\r\n    noteOn: function(c, n, v) { if (typeof v == 'undefined') v = 127; return [0x90 + _ch(c), _7bn(n), _7b(v)]; },\r\n    aftertouch: function(c, n, v) { return [0xA0 + _ch(c), _7bn(n), _7b(v)]; },\r\n  };\r\n  var _helperCH = {\r\n    control: function(c, n, v) { return [0xB0 + _ch(c), _7b(n), _7b(v)]; },\r\n    program: function(c, n) { return [0xC0 + _ch(c), _7b(MIDI.programValue(n), n)]; },\r\n    pressure: function(c, n) { return [0xD0 + _ch(c), _7b(n)]; },\r\n    pitchBend: function(c, n, l) { return typeof l == 'undefined' ? [0xE0 + _ch(c), _lsb(n), _msb(n)] : [0xE0 + _ch(c), _7b(l), _7b(n)]; },\r\n    pitchBendF: function(c, x) { return _helperCH.pitchBend(c, MIDI.to14b((x + 1) / 2)); },\r\n    bankMSB: function(c, n) { return [0xB0 + _ch(c), 0x00, _7b(n)]; },\r\n    bankLSB: function(c, n) { return [0xB0 + _ch(c), 0x20, _7b(n)]; },\r\n    modMSB: function(c, n) { return [0xB0 + _ch(c), 0x01, _7b(n)]; },\r\n    modLSB: function(c, n) { return [0xB0 + _ch(c), 0x21, _7b(n)]; },\r\n    breathMSB: function(c, n) { return [0xB0 + _ch(c), 0x02, _7b(n)]; },\r\n    breathLSB: function(c, n) { return [0xB0 + _ch(c), 0x22, _7b(n)]; },\r\n    footMSB: function(c, n) { return [0xB0 + _ch(c), 0x04, _7b(n)]; },\r\n    footLSB: function(c, n) { return [0xB0 + _ch(c), 0x24, _7b(n)]; },\r\n    portamentoMSB: function(c, n) { return [0xB0 + _ch(c), 0x05, _7b(n)]; },\r\n    portamentoLSB: function(c, n) { return [0xB0 + _ch(c), 0x25, _7b(n)]; },\r\n    dataMSB: function(c, n) { return [0xB0 + _ch(c), 0x06, _7b(n)]; },\r\n    dataLSB: function(c, n) { return [0xB0 + _ch(c), 0x26, _7b(n)]; },\r\n    volumeMSB: function(c, n) { return [0xB0 + _ch(c), 0x07, _7b(n)]; },\r\n    volumeLSB: function(c, n) { return [0xB0 + _ch(c), 0x27, _7b(n)]; },\r\n    balanceMSB: function(c, n) { return [0xB0 + _ch(c), 0x08, _7b(n)]; },\r\n    balanceLSB: function(c, n) { return [0xB0 + _ch(c), 0x28, _7b(n)]; },\r\n    panMSB: function(c, n) { return [0xB0 + _ch(c), 0x0A, _7b(n)]; },\r\n    panLSB: function(c, n) { return [0xB0 + _ch(c), 0x2A, _7b(n)]; },\r\n    expressionMSB: function(c, n) { return [0xB0 + _ch(c), 0x0B, _7b(n)]; },\r\n    expressionLSB: function(c, n) { return [0xB0 + _ch(c), 0x2B, _7b(n)]; },\r\n    damper: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x40, b ? 127 : 0]; },\r\n    portamento: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x41, b ? 127 : 0]; },\r\n    sostenuto: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x42, b ? 127 : 0]; },\r\n    soft: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x43, b ? 127 : 0]; },\r\n    legato: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x44, b ? 127 : 0]; },\r\n    hold2: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x45, b ? 127 : 0]; },\r\n    soundVariation: function(c, n) { return [0xB0 + _ch(c), 0x46, _7bn(n)]; },\r\n    filterResonance: function(c, n) { return [0xB0 + _ch(c), 0x47, _7bn(n)]; },\r\n    releaseTime: function(c, n) { return [0xB0 + _ch(c), 0x48, _7bn(n)]; },\r\n    attackTime: function(c, n) { return [0xB0 + _ch(c), 0x49, _7bn(n)]; },\r\n    brightness: function(c, n) { return [0xB0 + _ch(c), 0x4A, _7bn(n)]; },\r\n    decayTime: function(c, n) { return [0xB0 + _ch(c), 0x4B, _7bn(n)]; },\r\n    vibratoRate: function(c, n) { return [0xB0 + _ch(c), 0x4C, _7bn(n)]; },\r\n    vibratoDepth: function(c, n) { return [0xB0 + _ch(c), 0x4D, _7bn(n)]; },\r\n    vibratoDelay: function(c, n) { return [0xB0 + _ch(c), 0x4E, _7bn(n)]; },\r\n    ptc: function(c, n) { return [0xB0 + _ch(c), 0x54, _7bn(n)]; },\r\n    dataIncr: function(c) { return [0xB0 + _ch(c), 0x60, 0]; },\r\n    dataDecr: function(c) { return [0xB0 + _ch(c), 0x61, 0]; },\r\n    nrpnLSB: function(c, n) { return [0xB0 + _ch(c), 0x62, _7b(n)]; },\r\n    nrpnMSB: function(c, n) { return [0xB0 + _ch(c), 0x63, _7b(n)]; },\r\n    rpnLSB: function(c, n) { return [0xB0 + _ch(c), 0x64, _7b(n)]; },\r\n    rpnMSB: function(c, n) { return [0xB0 + _ch(c), 0x65, _7b(n)]; },\r\n    allSoundOff: function(c) { return [0xB0 + _ch(c), 0x78, 0]; },\r\n    resetAllControllers: function(c) { return [0xB0 + _ch(c), 0x79, 0]; },\r\n    localControl: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), 0x7a, b ? 127 : 0]; },\r\n    allNotesOff: function(c) { return [0xB0 + _ch(c), 0x7b, 0]; },\r\n    omni: function(c, b) { if (typeof b == 'undefined') b = true; return [0xB0 + _ch(c), b ? 0x7d : 0x7c, 0]; },\r\n    mono: function(c, n) { if (typeof n == 'undefined') n = 1; return [0xB0 + _ch(c), 0x7e, _7b(n)]; },\r\n    poly: function(c) { return [0xB0 + _ch(c), 0x7f, 0]; },\r\n  };\r\n  function _splitMasterTuning(a, b, c, d) {\r\n    if (typeof b != 'undefined') return [_7b(a), _7b(b), _7b(c), _7b(d)];\r\n    if (a != parseInt(a) || a < 0 || n > 0xffff) _bad(a);\r\n    a = parseInt(a);\r\n    return [(a >> 12) & 0xf, (a >> 8) & 0xf, (a >> 4) & 0xf, a & 0xf];\r\n  }\r\n  function _gsxg12b(x) { // -1 <= x <= 1\r\n    _float(x);\r\n    return Math.round(x * 1000 + 0x400);\r\n  }\r\n  var _helperNC = { // no channel\r\n    mtc: function(t) { return [0xF1, _mtc(t)]; },\r\n    songPosition: function(n, l) { return typeof l == 'undefined' ? [0xF2, _lsb(n), _msb(n)] : [0xF2, _7b(l), _7b(n)]; },\r\n    songSelect: function(n) { return [0xF3, _7b(n)]; },\r\n    tune: function() { return [0xF6]; },\r\n    clock: function() { return [0xF8]; },\r\n    start: function() { return [0xFA]; },\r\n    continue: function() { return [0xFB]; },\r\n    stop: function() { return [0xFC]; },\r\n    active: function() { return [0xFE]; },\r\n    sxIdRequest: function() { return [0xF0, 0x7E, this._sxid, 0x06, 0x01, 0xF7]; },\r\n    sxTuningDumpRequest: function(n, k) { return typeof k == 'undefined' ?\r\n      [0xF0, 0x7E, this._sxid, 0x08, 0x00, _7b(n), 0xF7] : [0xF0, 0x7E, this._sxid, 0x08, 0x03, _7b(n), _7b(k), 0xF7]; },\r\n    sxFullFrame: function(t) { return [0xF0, 0x7F, this._sxid, 0x01, 0x01, _hrtype(t), t.getMinute(), t.getSecond(), t.getFrame(), 0xF7]; },\r\n    sxMasterVolume: function(n, l) { return typeof l == 'undefined' ?\r\n      [0xF0, 0x7F, this._sxid, 0x04, 0x01, _lsb(n), _msb(n), 0xF7] : [0xF0, 0x7F, this._sxid, 0x04, 0x01, _7b(l), _7b(n), 0xF7]; },\r\n    sxMasterVolumeF: function(x) { return _helperNC.sxMasterVolume.call(this, MIDI.to14b(_01(x))); },\r\n    sxMasterFineTuning: function(n, l) { return typeof l == 'undefined' ?\r\n      [0xF0, 0x7F, this._sxid, 0x04, 0x03, _lsb(n), _msb(n), 0xF7] : [0xF0, 0x7F, this._sxid, 0x04, 0x03, _7b(l), _7b(n), 0xF7]; },\r\n    sxMasterFineTuningF: function(x) { return _helperNC.sxMasterFineTuning.call(this, MIDI.to14b(_01((x % 1 + 1) / 2, x))); },\r\n    sxMasterCoarseTuning: function(n) { return [0xF0, 0x7F, this._sxid, 0x04, 0x04, 0x00, _7b(n), 0xF7]; },\r\n    sxMasterCoarseTuningF: function(x) { return _helperNC.sxMasterCoarseTuning.call(this, 0x40 + (x - x % 1)); },\r\n    sxNoteTuning: function(a, b, c, d) { return b == parseInt(b) ?\r\n      [0xF0, _rt(d), this._sxid, 0x08, 0x07, _7b(a), _7b(b)].concat(_ntu(c), [0xF7]) :\r\n      [0xF0, 0x7F, this._sxid, 0x08, 0x02, _7b(a)].concat(_ntu(b), [0xF7]); },\r\n    sxNoteTuningF: function(a, b, c, d) { return b == parseInt(b) ?\r\n      _helperNC.sxNoteTuning.call(this, a, b, _f2ntu(c), d) : _helperNC.sxNoteTuning.call(this, a, _f2ntu(b)); },\r\n    sxNoteTuningHZ: function(a, b, c, d) { return b == parseInt(b) ?\r\n      _helperNC.sxNoteTuning.call(this, a, b, _hz2ntu(c), d) : _helperNC.sxNoteTuning.call(this, a, _hz2ntu(b)); },\r\n    sxScaleTuning1: function(a, b, c) { return a == parseInt(a) ?\r\n      [0xF0, _rt(c), this._sxid, 0x08, 0x08].concat(_to777(_16b(a)), _12x7(b), [0xF7]) :\r\n      _helperNC.sxScaleTuning1.call(this, 0xffff, a, b); },\r\n    sxScaleTuning1F: function(a, b, c) { if (a != parseInt(a)) return _helperNC.sxScaleTuning1F.call(this, 0xffff, a, b);\r\n      var v = []; for (var i = 0; i < b.length; i++) {\r\n        if (b[i] < -0.64 || b[i] > 0.63) throw RangeError('Out of range: ' + b[i]);\r\n        v.push(Math.floor(b[i] * 100 + 64)); }\r\n      return _helperNC.sxScaleTuning1.call(this, a, v, c); },\r\n    sxScaleTuning2: function(a, b, c) { return a == parseInt(a) ?\r\n      [0xF0, _rt(c), this._sxid, 0x08, 0x09].concat(_to777(_16b(a)), _12x14(b), [0xF7]) :\r\n      _helperNC.sxScaleTuning2.call(this, 0xffff, a, b); },\r\n    sxScaleTuning2F: function(a, b, c) { if (a != parseInt(a)) return _helperNC.sxScaleTuning2F.call(this, 0xffff, a, b);\r\n      var v = []; for (var i = 0; i < b.length; i++) {\r\n        var x = (b[i] + 1) / 2;\r\n        if (x < -1 || x > 1) throw RangeError('Out of range: ' + b[i]);\r\n        v.push(MIDI.to14b((b[i] + 1) / 2)); }\r\n      return _helperNC.sxScaleTuning2.call(this, a, v, c); },\r\n    sxGM: function(gm) { if (typeof gm == 'undefined') gm = 1; return [0xF0, 0x7E, this._sxid, 0x09, gm ? gm == 2 ? 3 : 1 : 2, 0xf7]; },\r\n    sxGS: function(arg) { var arr = typeof arg == 'undefined' ? [0x40, 0, 0x7F, 0] : arg instanceof Array ? arg : arguments;\r\n      var c = 0; var a = [0xF0, 0x41, this._sxid, 0x42, 0x12];\r\n      for (var i = 0; i < arr.length; i++) { var x = _7b(arr[i]); a.push(x); c += x; }\r\n      c %= 128; a.push(c ? 128 - c : 0); a.push(0xf7); return a; },\r\n    sxXG: function(arg) { var arr = typeof arg == 'undefined' ? [0, 0, 0x7E, 0] : arg instanceof Array ? arg : arguments;\r\n      var sxid = this._sxid == 0x7f ? 0 : this._sxid;\r\n      if (sxid > 15) _throw('Bad Yamaha device number: ' + sxid);\r\n      var a = [0xf0, 0x43, 16 + sxid, 0x4c];\r\n      for (var i = 0; i < arr.length; i++) a.push(_7b(arr[i])); a.push(0xf7); return a; },\r\n    sxMidiSoft: function(n, s) {\r\n      var a = [0xf0, 0x00, 0x20, 0x24, 0x00, _7b(n || 0)];\r\n      s = typeof s == 'undefined' ? '' : '' + s;\r\n      for (var i = 0; i < s.length; i++) a.push(_7b(s.charCodeAt(i)));\r\n      a.push(0xf7); return a; },\r\n    gsMasterVolume: function(n) { return _helperNC.sxGS.call(this, [0x40, 0, 4, _7b(n)]); },\r\n    gsMasterVolumeF: function(x) { return _helperNC.gsMasterVolume.call(this, MIDI.to7b(_01(x))); },\r\n    gsMasterFineTuning: function(a, b, c, d) { a = _splitMasterTuning(a, b, c, d); return _helperNC.sxGS.call(this, [0x40, 0, 0, a[0], a[1], a[2], a[3]]); },\r\n    gsMasterFineTuningF: function(x) { return _helperNC.gsMasterFineTuning.call(this, _gsxg12b(x % 1)); },\r\n    gsMasterCoarseTuning: function(n) { return _helperNC.sxGS.call(this, [0x40, 0, 5, _7b(n)]); },\r\n    gsMasterCoarseTuningF: function(x) { return _helperNC.gsMasterCoarseTuning.call(this, 0x40 + (x - x % 1)); },\r\n    gsOctaveTuning: function(c, n, x) { return _helperNC.sxGS.call(this, [0x40, 0x10 + [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15][_ch(c)], 0x40 + MIDI.octaveValue(n), _7b(x)]); },\r\n    gsOctaveTuningF: function(c, n, x) { if (x < -0.64 || x > 0.63) throw RangeError('Out of range: ' + x);\r\n      return _helperNC.gsOctaveTuning.call(this, c, n, Math.floor(x * 100 + 64)); },\r\n    xgMasterVolume: function(n) { return _helperNC.sxXG.call(this, [0, 0, 4, _7b(n)]); },\r\n    xgMasterVolumeF: function(x) { return _helperNC.xgMasterVolume.call(this, MIDI.to7b(_01(x))); },\r\n    xgMasterFineTuning: function(a, b, c, d) { a = _splitMasterTuning(a, b, c, d); return _helperNC.sxXG.call(this, [0, 0, 0, a[0], a[1], a[2], a[3]]); },\r\n    xgMasterFineTuningF: function(x) { return _helperNC.xgMasterFineTuning.call(this, _gsxg12b(x % 1)); },\r\n    xgMasterCoarseTuning: function(n) { return _helperNC.sxXG.call(this, [0, 0, 6, _7b(n)]); },\r\n    xgMasterCoarseTuningF: function(x) { return _helperNC.xgMasterCoarseTuning.call(this, 0x40 + (x - x % 1)); },\r\n    xgOctaveTuning: function(c, n, x) { return _helperNC.sxXG.call(this, [8, _ch(c), 0x41 + MIDI.octaveValue(n), _7b(x)]); },\r\n    xgOctaveTuningF: function(c, n, x) { if (x < -0.64 || x > 0.63) throw RangeError('Out of range: ' + x);\r\n      return _helperNC.xgOctaveTuning.call(this, c, n, Math.floor(x * 100 + 64)); },\r\n    reset: function() { return [0xFF]; },\r\n  };\r\n  _helperNC.sxScaleTuning = _helperNC.sxScaleTuning2;\r\n  _helperNC.sxScaleTuningF = _helperNC.sxScaleTuning2F;\r\n  _helperNC.sxMasterTranspose = _helperNC.sxMasterCoarseTuning;\r\n  _helperNC.sxMasterTransposeF = _helperNC.sxMasterCoarseTuningF;\r\n  _helperNC.gsMasterTranspose = _helperNC.gsMasterCoarseTuning;\r\n  _helperNC.gsMasterTransposeF = _helperNC.gsMasterCoarseTuningF;\r\n  _helperNC.xgMasterTranspose = _helperNC.xgMasterCoarseTuning;\r\n  _helperNC.xgMasterTransposeF = _helperNC.xgMasterCoarseTuningF;\r\n  var _helperGCH = { // compound messages\r\n    bank: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.bankMSB(c, _msb(m)), _helperCH.bankLSB(c, _lsb(m))] : [_helperCH.bankMSB(c, m), _helperCH.bankLSB(c, l)]; },\r\n    modF: function(c, x) { return _helperGCH.mod(c, MIDI.to14b(x)); },\r\n    mod: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.modMSB(c, _msb(m)), _helperCH.modLSB(c, _lsb(m))] : [_helperCH.modMSB(c, m), _helperCH.modLSB(c, l)]; },\r\n    breathF: function(c, x) { return _helperGCH.breath(c, MIDI.to14b(x)); },\r\n    breath: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.breathMSB(c, _msb(m)), _helperCH.breathLSB(c, _lsb(m))] : [_helperCH.breathMSB(c, m), _helperCH.breathLSB(c, l)]; },\r\n    footF: function(c, x) { return _helperGCH.foot(c, MIDI.to14b(x)); },\r\n    foot: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.footMSB(c, _msb(m)), _helperCH.footLSB(c, _lsb(m))] : [_helperCH.footMSB(c, m), _helperCH.footLSB(c, l)]; },\r\n    portamentoTimeF: function(c, x) { return _helperGCH.portamentoTime(c, MIDI.to14b(x)); },\r\n    portamentoTime: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.portamentoMSB(c, _msb(m)), _helperCH.portamentoLSB(c, _lsb(m))] : [_helperCH.portamentoMSB(c, m), _helperCH.portamentoLSB(c, l)]; },\r\n    dataF: function(c, x) { return _helperGCH.data(c, MIDI.to14b(x)); },\r\n    data: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.dataMSB(c, _msb(m)), _helperCH.dataLSB(c, _lsb(m))] : [_helperCH.dataMSB(c, m), _helperCH.dataLSB(c, l)]; },\r\n    volumeF: function(c, x) { return _helperGCH.volume(c, MIDI.to14b(x)); },\r\n    volume: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.volumeMSB(c, _msb(m)), _helperCH.volumeLSB(c, _lsb(m))] : [_helperCH.volumeMSB(c, m), _helperCH.volumeLSB(c, l)]; },\r\n    balanceF: function(c, x) { return _helperGCH.balance(c, MIDI.to14b((x + 1) / 2)); },\r\n    balance: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.balanceMSB(c, _msb(m)), _helperCH.balanceLSB(c, _lsb(m))] : [_helperCH.balanceMSB(c, m), _helperCH.balanceLSB(c, l)]; },\r\n    panF: function(c, x) { return _helperGCH.pan(c, MIDI.to14b((x + 1) / 2)); },\r\n    pan: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.panMSB(c, _msb(m)), _helperCH.panLSB(c, _lsb(m))] : [_helperCH.panMSB(c, m), _helperCH.panLSB(c, l)]; },\r\n    expressionF: function(c, x) { return _helperGCH.expression(c, MIDI.to14b(x)); },\r\n    expression: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.expressionMSB(c, _msb(m)), _helperCH.expressionLSB(c, _lsb(m))] : [_helperCH.expressionMSB(c, m), _helperCH.expressionLSB(c, l)]; },\r\n    nrpn: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.nrpnMSB(c, _msb(m)), _helperCH.nrpnLSB(c, _lsb(m))] : [_helperCH.nrpnMSB(c, m), _helperCH.nrpnLSB(c, l)]; },\r\n    rpn: function(c, m, l) { return typeof l == 'undefined' ?\r\n      [_helperCH.rpnMSB(c, _msb(m)), _helperCH.rpnLSB(c, _lsb(m))] : [_helperCH.rpnMSB(c, m), _helperCH.rpnLSB(c, l)]; },\r\n    rpnPitchBendRange: function(c, m, l) { return _helperGCH.rpn(c, 0, 0).concat(_helperGCH.data(c, m, l)); },\r\n    rpnPitchBendRangeF: function(c, x) { return _helperGCH.rpnPitchBendRange(c, _7b(x - x % 1), Math.floor((x % 1) * 100)); },\r\n    rpnFineTuning: function(c, m, l) { return _helperGCH.rpn(c, 0, 1).concat(_helperGCH.data(c, m, l)); },\r\n    rpnFineTuningF: function(c, x) { return _helperGCH.rpn(c, 0, 1).concat(_helperGCH.dataF(c, (x % 1 + 1) / 2)); },\r\n    rpnCoarseTuning: function(c, m) { return _helperGCH.rpn(c, 0, 2).concat([_helperCH.dataMSB(c, m)]); },\r\n    rpnCoarseTuningF: function(c, x) { return _helperGCH.rpn(c, 0, 2).concat([_helperCH.dataMSB(c, 0x40 + (x - x % 1))]); },\r\n    rpnTuning: function(c, n, m, l) { return _helperGCH.rpnCoarseTuning(c, n).concat(_helperGCH.rpnFineTuning(c, m, l)); },\r\n    rpnTuningF: function(c, x) { return _helperGCH.rpnCoarseTuningF(c, x).concat(_helperGCH.rpnFineTuningF(c, x)); },\r\n    rpnTuningA: function(c, a) { return _helperGCH.rpnTuningF(c, MIDI.shift(a)); },\r\n    rpnSelectTuningProgram: function(c, n) { return _helperGCH.rpn(c, 0, 3).concat([_helperCH.dataMSB(c, n)]); },\r\n    rpnSelectTuningBank: function(c, n) { return _helperGCH.rpn(c, 0, 4).concat([_helperCH.dataMSB(c, n)]); },\r\n    rpnSelectTuning: function(c, n, k) { return typeof k == 'undefined' ?\r\n      _helperGCH.rpnSelectTuningProgram(c, n) : _helperGCH.rpnSelectTuningBank(c, n).concat(_helperGCH.rpnSelectTuningProgram(c, k)); },\r\n    rpnModulationDepthRange: function(c, m, l) { return _helperGCH.rpn(c, 0, 5).concat(_helperGCH.data(c, m, l)); },\r\n    rpnModulationDepthRangeF: function(c, x) { return _helperGCH.rpnModulationDepthRange(c, _7b(x - x % 1), Math.floor((x % 1) * 128)); },\r\n    rpnNull: function(c) { return _helperGCH.rpn(c, 0x7f, 0x7f); },\r\n    mode1: function(c) { return [ _helperCH.omni(c, true), _helperCH.poly(c) ]; },\r\n    mode2: function(c) { return [ _helperCH.omni(c, true), _helperCH.mono(c) ]; },\r\n    mode3: function(c) { return [ _helperCH.omni(c, false), _helperCH.poly(c) ]; },\r\n    mode4: function(c) { return [ _helperCH.omni(c, false), _helperCH.mono(c) ]; },\r\n  };\r\n  var _helperGNC = { // compound messages no channel\r\n    sxMasterTuning: function(n, m, l) { return [_helperNC.sxMasterCoarseTuning.call(this, n), _helperNC.sxMasterFineTuning.call(this, m, l)]; },\r\n    sxMasterTuningF: function(x) { return [_helperNC.sxMasterCoarseTuningF.call(this, x), _helperNC.sxMasterFineTuningF.call(this, x)]; },\r\n    gsMasterTuningF: function(x) { return [_helperNC.gsMasterCoarseTuningF.call(this, x), _helperNC.gsMasterFineTuningF.call(this, x)]; },\r\n    xgMasterTuningF: function(x) { return [_helperNC.xgMasterCoarseTuningF.call(this, x), _helperNC.xgMasterFineTuningF.call(this, x)]; },\r\n    sxMasterTuningA: function(a) { return _helperGNC.sxMasterTuningF.call(this, MIDI.shift(a)); },\r\n    gsMasterTuningA: function(a) { return _helperGNC.gsMasterTuningF.call(this, MIDI.shift(a)); },\r\n    xgMasterTuningA: function(a) { return _helperGNC.xgMasterTuningF.call(this, MIDI.shift(a)); },\r\n    gsScaleTuning: function(c, a) { var out = []; if (a.length != 12) throw RangeError('Wrong input size: ' + a.length);\r\n      for (var i = 0; i < 12; i++) out.push(_helperNC.gsOctaveTuning.call(this, c, i, a[i])); return out; },\r\n    gsScaleTuningF: function(c, a) { var out = []; if (a.length != 12) throw RangeError('Wrong input size: ' + a.length);\r\n      for (var i = 0; i < 12; i++) out.push(_helperNC.gsOctaveTuningF.call(this, c, i, a[i])); return out; },\r\n    xgScaleTuning: function(c, a) { var out = []; if (a.length != 12) throw RangeError('Wrong input size: ' + a.length);\r\n      for (var i = 0; i < 12; i++) out.push(_helperNC.xgOctaveTuning.call(this, c, i, a[i])); return out; },\r\n    xgScaleTuningF: function(c, a) { var out = []; if (a.length != 12) throw RangeError('Wrong input size: ' + a.length);\r\n      for (var i = 0; i < 12; i++) out.push(_helperNC.xgOctaveTuningF.call(this, c, i, a[i])); return out; },\r\n  };\r\n  function _smf(ff, dd) {\r\n    var midi = new MIDI();\r\n    midi.ff = _8b(ff);\r\n    midi.dd = typeof dd == 'undefined' ? '' : _8bs(dd);\r\n    return midi;\r\n  }\r\n  var _helperSMF = { // Standard MIDI File events\r\n    smf: function(arg) {\r\n      if (arg instanceof MIDI) return new MIDI(arg);\r\n      var arr = arg instanceof Array ? arg : arguments;\r\n      var ff = _8b(arr[0]);\r\n      var dd = '';\r\n      if (arr.length == 2) dd = _2s(arr[1]);\r\n      else if (arr.length > 2) dd = _2s(Array.prototype.slice.call(arr, 1));\r\n      return _smf(ff, dd);\r\n    },\r\n    smfSeqNumber: function(dd) {\r\n      if (dd == parseInt(dd)) {\r\n        if (dd < 0 || dd > 0xffff) throw RangeError('Sequence number out of range: ' + dd);\r\n        dd = String.fromCharCode(dd >> 8) + String.fromCharCode(dd & 0xff);\r\n      }\r\n      else {\r\n        dd = '' + dd;\r\n        if (dd.length == 0) dd = '\\x00\\x00';\r\n        else if (dd.length == 1) dd = '\\x00' + dd;\r\n        else if (dd.length > 2) throw RangeError('Sequence number out of range' + _smftxt(dd));\r\n      }\r\n      return _smf(0, dd);\r\n    },\r\n    smfText: function(dd) { return _smf(1, JZZ.lib.toUTF8(dd)); },\r\n    smfCopyright: function(dd) { return _smf(2, JZZ.lib.toUTF8(dd)); },\r\n    smfSeqName: function(dd) { return _smf(3, JZZ.lib.toUTF8(dd)); },\r\n    smfInstrName: function(dd) { return _smf(4, JZZ.lib.toUTF8(dd)); },\r\n    smfLyric: function(dd) { return _smf(5, JZZ.lib.toUTF8(dd)); },\r\n    smfMarker: function(dd) { return _smf(6, JZZ.lib.toUTF8(dd)); },\r\n    smfCuePoint: function(dd) { return _smf(7, JZZ.lib.toUTF8(dd)); },\r\n    smfProgName: function(dd) { return _smf(8, JZZ.lib.toUTF8(dd)); },\r\n    smfDevName: function(dd) { return _smf(9, JZZ.lib.toUTF8(dd)); },\r\n    smfChannelPrefix: function(dd) {\r\n      if (dd == parseInt(dd)) {\r\n        _validateChannel(dd);\r\n        dd = String.fromCharCode(dd);\r\n      }\r\n      else {\r\n        dd = '' + dd;\r\n        if (dd.length == 0) dd = '\\x00';\r\n        else if (dd.length > 1 || dd.charCodeAt(0) > 15) throw RangeError('Channel number out of range' + _smftxt(dd));\r\n      }\r\n      return _smf(32, dd);\r\n    },\r\n    smfMidiPort: function(dd) {\r\n      if (dd == parseInt(dd)) {\r\n        if (dd < 0 || dd > 127) throw RangeError('Port number out of range: ' + dd);\r\n        dd = String.fromCharCode(dd);\r\n      }\r\n      else {\r\n        dd = '' + dd;\r\n        if (dd.length == 0) dd = '\\x00';\r\n        else if (dd.length > 1 || dd.charCodeAt(0) > 127) throw RangeError('Port number out of range' + _smftxt(dd));\r\n      }\r\n      return _smf(33, dd);\r\n    },\r\n    smfEndOfTrack: function(dd) {\r\n      if (_2s(dd) != '') throw RangeError('Unexpected data' + _smftxt(_2s(dd)));\r\n      return _smf(47);\r\n    },\r\n    smfTempo: function(dd) { // microseconds per quarter note\r\n      if (('' + dd).length == 3) return _smf(81, dd);\r\n      if (dd == parseInt(dd) && dd > 0 && dd <= 0xffffff) {\r\n        return _smf(81, String.fromCharCode(dd >> 16) + String.fromCharCode((dd >> 8) & 0xff) + String.fromCharCode(dd & 0xff));\r\n      }\r\n      throw RangeError('Out of range' + _smftxt(_2s(dd)));\r\n    },\r\n    smfBPM: function(bpm) { return _helperSMF.smfTempo(Math.round(60000000.0 / bpm)); },\r\n    smfSMPTE: function(dd) {\r\n      if (dd instanceof SMPTE) return _smf(84, String.fromCharCode(dd.hour) + String.fromCharCode(dd.minute) + String.fromCharCode(dd.second) + String.fromCharCode(dd.frame) + String.fromCharCode((dd.quarter % 4) * 25));\r\n      var s = '' + dd;\r\n      if (s.length == 5) {\r\n        return _smf(84, dd);\r\n      }\r\n      var arr = dd instanceof Array ? dd : Array.prototype.slice.call(arguments);\r\n      arr.splice(0, 0, 30);\r\n      return _helperSMF.smfSMPTE(new SMPTE(arr));\r\n    },\r\n    smfTimeSignature: function(a, b, c, d) {\r\n      var nn, dd, cc, bb;\r\n      var m = ('' + a ).match(/^\\s*(\\d+)\\s*\\/\\s*(\\d+)\\s*$/);\r\n      if (m) {\r\n        nn = parseInt(m[1]);\r\n        dd = parseInt(m[2]);\r\n        if (nn > 0 && nn < 0x100 && dd > 0 && !(dd & (dd - 1))) {\r\n          cc = dd; dd = 0;\r\n          for (cc >>= 1; cc; cc >>= 1) dd++;\r\n          cc = b == parseInt(b) ? b : 24;\r\n          bb = c == parseInt(c) ? c : 8;\r\n          return _smf(88, String.fromCharCode(nn) + String.fromCharCode(dd) + String.fromCharCode(cc) + String.fromCharCode(bb));\r\n        }\r\n        else if (('' + a ).length == 4) return _smf(88, a);\r\n      }\r\n      else if (a == parseInt(a) && b == parseInt(b)) {\r\n        if (a > 0 && a < 0x100 && b > 0 && !(b & (b - 1))) {\r\n          nn = a;\r\n          dd = 0;\r\n          cc = b;\r\n          for (cc >>= 1; cc; cc >>= 1) dd++;\r\n          cc = c == parseInt(c) ? c : 24;\r\n          bb = d == parseInt(d) ? d : 8;\r\n          return _smf(88, String.fromCharCode(nn) + String.fromCharCode(dd) + String.fromCharCode(cc) + String.fromCharCode(bb));\r\n        }\r\n        else if (('' + a ).length == 4) return _smf(88, a);\r\n        a = a + '/' + b;\r\n      }\r\n      else if (('' + a ).length == 4) return _smf(88, a);\r\n      throw RangeError('Wrong time signature' + _smftxt(_2s('' + a)));\r\n    },\r\n    smfKeySignature: function(dd) {\r\n      dd = '' + dd;\r\n      var m = dd.match(/^\\s*([A-H][b#]?)\\s*(|maj|major|dur|m|min|minor|moll)\\s*$/i);\r\n      if (m) {\r\n        var sf = {\r\n          CB: 0, GB: 1, DB: 2, AB: 3, EB: 4, BB: 5, F: 6, C: 7, G: 8, D: 9, A: 10,\r\n          E:11, B: 12, H: 12, 'F#': 13, 'C#': 14, 'G#': 15, 'D#': 16, 'A#': 17\r\n        }[m[1].toUpperCase()];\r\n        var mi = { '': 0, MAJ: 0, MAJOR: 0, DUR: 0, M: 1, MIN: 1, MINOR: 1, MOLL: 1}[m[2].toUpperCase()];\r\n        if (typeof sf != 'undefined' && typeof mi != 'undefined') {\r\n          if (mi) sf -= 3;\r\n          sf -= 7;\r\n          if (sf >= -7 && sf < 0) dd = String.fromCharCode(256 + sf) + String.fromCharCode(mi);\r\n          else if (sf >= 0 && sf <= 7) dd = String.fromCharCode(sf) + String.fromCharCode(mi);\r\n        }\r\n      }\r\n      if (dd.length == 2 && dd.charCodeAt(1) <= 1 && (dd.charCodeAt(0) <= 7 || dd.charCodeAt(0) <= 255 && dd.charCodeAt(0) >= 249)) return _smf(89, dd);\r\n      throw RangeError('Incorrect key signature' + _smftxt(dd));\r\n    },\r\n    smfSequencer: function(dd) { return _smf(127, _2s(dd)); }\r\n  };\r\n\r\n  var _helpers = {};\r\n  function _copyHelperNC(name, func) {\r\n    MIDI[name] = function() { return new MIDI(func.apply(this, arguments)); };\r\n    _helpers[name] = function() { return this.send(func.apply(this, arguments)); };\r\n  }\r\n  function _copyHelperSMF(name, func) {\r\n    MIDI[name] = function() { return func.apply(this, arguments); };\r\n    _helpers[name] = function() { return this.send(func.apply(this, arguments)); };\r\n  }\r\n  function _copyHelperGNC(name, func) {\r\n    MIDI[name] = function() {\r\n      var i;\r\n      var g = [];\r\n      var a = func.apply(this, arguments);\r\n      for (i = 0; i < a.length; i++) g.push(new MIDI(a[i]));\r\n      return g;\r\n    };\r\n    _helpers[name] = function() {\r\n      var a = func.apply(this, arguments);\r\n      var g = this;\r\n      for (var i = 0; i < a.length; i++) g = g.send(a[i]);\r\n      return g;\r\n    };\r\n  }\r\n  function _copyHelperMPE(name, func) {\r\n    MIDI[name] = function() {\r\n      return new MIDI(func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));\r\n    };\r\n    _helpers[name] = function() {\r\n      if (typeof this._master != 'undefined') {\r\n        var msg = new MIDI(func.apply(this, [this._master].concat(Array.prototype.slice.call(arguments))));\r\n        msg._mpe = msg[1];\r\n        return this.send(msg);\r\n      }\r\n      return this.send(func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));\r\n    };\r\n  }\r\n  function _copyHelperCH(name, func) {\r\n    MIDI[name] = function() {\r\n      return new MIDI(func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));\r\n    };\r\n    _helpers[name] = function() {\r\n      if (typeof this._master != 'undefined') {\r\n        var chan;\r\n        var args = Array.prototype.slice.call(arguments);\r\n        if (args.length < func.length) args = [this._master].concat(args);\r\n        else {\r\n          chan = _7bn(args[0]);\r\n          args[0] = this._master;\r\n        }\r\n        var msg = new MIDI(func.apply(this, args));\r\n        msg._mpe = chan;\r\n        return this.send(msg);\r\n      }\r\n      return this.send(func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));\r\n    };\r\n  }\r\n  function _copyHelperGCH(name, func) {\r\n    MIDI[name] = function() {\r\n      var i;\r\n      var g = [];\r\n      var a = func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments)));\r\n      for (i = 0; i < a.length; i++) g.push(new MIDI(a[i]));\r\n      return g;\r\n    };\r\n    _helpers[name] = function() {\r\n      var i;\r\n      var a;\r\n      var g;\r\n      if (typeof this._master != 'undefined') {\r\n        var chan;\r\n        var args = Array.prototype.slice.call(arguments);\r\n        if (args.length < func.length) args = [this._master].concat(args);\r\n        else {\r\n          chan = _7bn(args[0]);\r\n          args[0] = this._master;\r\n        }\r\n        a = func.apply(this, args);\r\n        g = this;\r\n        for (i = 0; i < a.length; i++) {\r\n          var msg = MIDI(a[i]);\r\n          msg._mpe = chan;\r\n          g = g.send(msg);\r\n        }\r\n        return g;\r\n      }\r\n      a = func.apply(this, typeof this._ch == 'undefined' ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments)));\r\n      g = this;\r\n      for (i = 0; i < a.length; i++) g = g.send(a[i]);\r\n      return g;\r\n    };\r\n  }\r\n\r\n  _for(_helperNC, function(n) { _copyHelperNC(n, _helperNC[n]); });\r\n  _for(_helperSMF, function(n) { _copyHelperSMF(n, _helperSMF[n]); });\r\n  _for(_helperGNC, function(n) { _copyHelperGNC(n, _helperGNC[n]); });\r\n  _for(_helperMPE, function(n) { _copyHelperMPE(n, _helperMPE[n]); });\r\n  _for(_helperCH, function(n) { _copyHelperCH(n, _helperCH[n]); });\r\n  _for(_helperGCH, function(n) { _copyHelperGCH(n, _helperGCH[n]); });\r\n\r\n  function _copyMidiHelpers(M) {\r\n    _for(_helpers, function(n) { M.prototype[n] = _helpers[n]; });\r\n  }\r\n  _copyMidiHelpers(_M);\r\n\r\n  var _channelMap = { a:10, b:11, c:12, d:13, e:14, f:15, A:10, B:11, C:12, D:13, E:14, F:15 };\r\n  for (k = 0; k < 16; k++) _channelMap[k] = k;\r\n  MIDI.prototype.getChannel = function() {\r\n    if (this.ff == 0x20 && this.dd.length == 1 && this.dd.charCodeAt(0) < 16) return this.dd.charCodeAt(0);\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0xef) return;\r\n    return c & 15;\r\n  };\r\n  MIDI.prototype.setChannel = function(x) {\r\n    x = _channelMap[x];\r\n    if (typeof x == 'undefined') return this;\r\n    if (this.ff == 0x20) this.dd = String.fromCharCode(x);\r\n    else {\r\n      var c = this[0];\r\n      if (typeof c != 'undefined' && c >= 0x80 && c <= 0xef) this[0] = (c & 0xf0) | x;\r\n    }\r\n    return this;\r\n  };\r\n  MIDI.prototype.getNote = function() {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0xaf) return;\r\n    return this[1];\r\n  };\r\n  MIDI.prototype.setNote = function(x) {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0xaf) return this;\r\n    x = MIDI.noteValue(x);\r\n    if (typeof x != 'undefined') this[1] = x;\r\n    return this;\r\n  };\r\n  MIDI.prototype.getVelocity = function() {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0x9f) return;\r\n    return this[2];\r\n  };\r\n  MIDI.prototype.setVelocity = function(x) {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0x9f) return this;\r\n    x = parseInt(x);\r\n    if (x >= 0 && x < 128) this[2] = x;\r\n    return this;\r\n  };\r\n  MIDI.prototype.getSysExId = function() {\r\n    if (this[0] == 0xf0) return this[2];\r\n  };\r\n  MIDI.prototype.setSysExId = function(x) {\r\n    if (this[0] == 0xf0 && this.length > 2) {\r\n      x = parseInt(x);\r\n      if (x >= 0 && x < 128) this[2] = x;\r\n    }\r\n    return this;\r\n  };\r\n  MIDI.prototype.getData = function() {\r\n    if (typeof this.dd != 'undefined') return this.dd.toString();\r\n  };\r\n  MIDI.prototype.setData = function(dd) {\r\n    this.dd = _2s(dd);\r\n    return this;\r\n  };\r\n  function _is_yamaha_smf(ff, dd) { return ff == 0x7f && typeof dd != 'undefined' && dd.charCodeAt(0) == 0x43 && dd.charCodeAt(1) == 0x7b; }\r\n  function _is_yamaha_chord(ff, dd) { return _is_yamaha_smf(ff, dd) && dd.charCodeAt(2) == 1; }\r\n  function _yamaha_chord(a, b) {\r\n    if (a >= 0 && a <= 0x7f && b >= 0 && b <= 0x7f) {\r\n      var c = a & 0xf;\r\n      var d = a >> 4;\r\n      if (c > 0 && c < 8 && d < 7) c = ['C', 'D', 'E', 'F', 'G', 'A', 'B'][c - 1] + ['bbb', 'bb', 'b', '', '#', '##', '###'][d];\r\n      else return '-';\r\n      if (b > 34) return c + '?';\r\n      else return c + [\r\n        '', '6', 'Maj7', 'Maj7(#11)', '(9)', 'Maj7(9)', '6(9)', 'aug', 'm', 'm6', 'm7', 'm7b5',\r\n        'm(9)', 'm7(9)', 'm7(11)', 'm+7', 'm+7(9)', 'dim', 'dim7', '7', '7sus4', '7b5', '7(9)',\r\n        '7(#11)', '7(13)', '7(b9)', '7(b13)', '7(#9)', 'Maj7aug', '7aug', '1+8', '1+5', 'sus4', '1+2+5', 'cc'][b];\r\n    }\r\n    return '-';\r\n  }\r\n  MIDI.prototype.getText = function() {\r\n    if (typeof this.dd != 'undefined') {\r\n      if (_is_yamaha_chord(this.ff, this.dd)) return _yamaha_chord(this.dd.charCodeAt(3), this.dd.charCodeAt(4));\r\n      else return JZZ.lib.fromUTF8(this.dd);\r\n    }\r\n    if (this.isMidiSoft()) {\r\n      var s = [];\r\n      for (var i = 6; i < this.length - 1; i++) s.push(String.fromCharCode(this[i]));\r\n      return s.join('');\r\n    }\r\n  };\r\n  MIDI.prototype.setText = function(dd) {\r\n    this.dd = JZZ.lib.toUTF8(dd);\r\n    return this;\r\n  };\r\n  MIDI.prototype.getTempo = function() {\r\n    if (this.ff == 0x51 && typeof this.dd != 'undefined') {\r\n      return this.dd.charCodeAt(0) * 65536 + this.dd.charCodeAt(1) * 256 + this.dd.charCodeAt(2);\r\n    }\r\n  };\r\n  MIDI.prototype.getBPM = function() {\r\n    var ms = this.getTempo();\r\n    if (ms) return 60000000 / ms;\r\n  };\r\n  MIDI.prototype.getTimeSignature = function() {\r\n    if (this.ff == 0x58 && typeof this.dd != 'undefined') {\r\n       return [this.dd.charCodeAt(0), 1 << this.dd.charCodeAt(1)];\r\n    }\r\n  };\r\n  MIDI.prototype.getKeySignature = function() {\r\n    if (this.ff == 0x59 && typeof this.dd != 'undefined') {\r\n      var sf = this.dd.charCodeAt(0);\r\n      var mi = this.dd.charCodeAt(1);\r\n      if (sf & 0x80) sf = sf - 0x100;\r\n      if (sf >= -7 && sf <= 7 && mi >= 0 && mi <= 1) {\r\n        return [sf,\r\n          ['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#'][mi ? sf + 10 : sf + 7],\r\n          !!mi\r\n        ];\r\n      }\r\n    }\r\n  };\r\n\r\n  MIDI.prototype.isNoteOn = function() {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x90 || c > 0x9f) return false;\r\n    return this[2] > 0 ? true : false;\r\n  };\r\n  MIDI.prototype.isNoteOff = function() {\r\n    var c = this[0];\r\n    if (typeof c == 'undefined' || c < 0x80 || c > 0x9f) return false;\r\n    if (c < 0x90) return true;\r\n    return this[2] == 0 ? true : false;\r\n  };\r\n  MIDI.prototype.isSysEx = function() {\r\n    return this[0] == 0xf0;\r\n  };\r\n  MIDI.prototype.isFullSysEx = function() {\r\n    return this[0] == 0xf0 && this[this.length - 1] == 0xf7;\r\n  };\r\n  MIDI.prototype.isMidiSoft = function() {\r\n    return this.isFullSysEx() && this[1] == 0 && this[2] == 0x20 && this[3] == 0x24 && this[4] == 0;\r\n  };\r\n  MIDI.prototype.isSMF = function() {\r\n    return this.ff >= 0 && this.ff <= 0x7f;\r\n  };\r\n  MIDI.prototype.isEOT = function() {\r\n    return this.ff == 0x2f;\r\n  };\r\n  MIDI.prototype.isTempo = function() {\r\n    return this.ff == 0x51;\r\n  };\r\n  MIDI.prototype.isTimeSignature = function() {\r\n    return this.ff == 0x58;\r\n  };\r\n  MIDI.prototype.isKeySignature = function() {\r\n    return this.ff == 0x59;\r\n  };\r\n  MIDI.prototype.isGmReset = function() {\r\n    return this.match([0xf0, 0x7e, [0, 0], 0x09, [0, 0], 0xf7]);\r\n  };\r\n  MIDI.prototype.isGsReset = function() {\r\n    return this.match([0xf0, 0x41, [0, 0], 0x42, 0x12, 0x40, 0, 0x7f, 0, 0x41, 0xf7]);\r\n  };\r\n  MIDI.prototype.isXgReset = function() {\r\n    return this.match([0xf0, 0x43, [0x10, 0xf0], 0x4c, 0, 0, 0x7e, 0, 0xf7]);\r\n  };\r\n  MIDI.prototype.match = function(a) {\r\n    var i, m;\r\n    for (i = 0; i < a.length; i++) {\r\n      m = a[i][1];\r\n      if (typeof m == 'undefined') {\r\n        if (this[i] != a[i]) return false;\r\n      }\r\n      else {\r\n        if ((this[i] & m) != (a[i][0] & m)) return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  function _s2a(x) {\r\n    var a = [];\r\n    for (var i = 0; i < x.length; i++) {\r\n      a[i] = x.charCodeAt(i);\r\n    }\r\n    return a;\r\n  }\r\n  function _a2s(x) {\r\n    var a = '';\r\n    for (var i = 0; i < x.length; i++) {\r\n      a += String.fromCharCode(x[i]);\r\n    }\r\n    return a;\r\n  }\r\n  function _2s(x) {\r\n    return x instanceof Array ? _a2s(x) : typeof x == 'undefined' ? '' : '' + x;\r\n  }\r\n  function _s2n(x) {\r\n    var n = 0;\r\n    for (var i = 0; i < x.length; i++) n = (n << 8) + x.charCodeAt(i);\r\n    return n;\r\n  }\r\n\r\n  function __hex(x) { return (x < 16 ? '0' : '') + x.toString(16); }\r\n  function _hex(x) {\r\n    var a = [];\r\n    for (var i = 0; i < x.length; i++) {\r\n      a[i] = __hex(x[i]);\r\n    }\r\n    return a.join(' ');\r\n  }\r\n  function _toLine(s) {\r\n    var out = '';\r\n    for (var i = 0; i < s.length; i++) {\r\n      if (s[i] == '\\n') out += '\\\\n';\r\n      else if (s[i] == '\\r') out += '\\\\r';\r\n      else if (s[i] == '\\t') out += '\\\\t';\r\n      else if (s.charCodeAt(i) < 32) out += '\\\\x' + __hex(s.charCodeAt(i));\r\n      else out += s[i];\r\n    }\r\n    return out;\r\n  }\r\n  function _smfhex(dd) {\r\n    return dd.length ? ': ' + _hex(_s2a(dd)) : '';\r\n  }\r\n  function _smftxt(dd) {\r\n    return dd.length ? ': ' + _toLine(JZZ.lib.fromUTF8(dd)) : '';\r\n  }\r\n  MIDI.prototype.label = function(s) {\r\n    this.lbl = this.lbl ? this.lbl + ', ' + s : s;\r\n    return this;\r\n  };\r\n  MIDI.prototype.toString = function() {\r\n    return this.lbl ? this._str() + ' (' + this.lbl + ')' : this._str();\r\n  };\r\n  MIDI.prototype._str = function() {\r\n    var s;\r\n    var ss;\r\n    if (!this.length) {\r\n      if (typeof this.ff != 'undefined') {\r\n        s = 'ff' + __hex(this.ff) + ' -- ';\r\n        if (this.ff == 0) s += 'Sequence Number: ' + _s2n(this.dd);\r\n        else if (this.ff > 0 && this.ff < 10) s += ['', 'Text', 'Copyright', 'Sequence Name', 'Instrument Name', 'Lyric', 'Marker', 'Cue Point', 'Program Name', 'Device Name'][this.ff] + _smftxt(this.dd);\r\n        else if (this.ff == 32) s += 'Channel Prefix' + _smfhex(this.dd);\r\n        else if (this.ff == 33) s += 'MIDI Port' + _smfhex(this.dd);\r\n        else if (this.ff == 47) s += 'End of Track' + _smfhex(this.dd);\r\n        else if (this.ff == 81) {\r\n          var bpm = Math.round(this.getBPM() * 100) / 100;\r\n          s += 'Tempo: ' + bpm + ' bpm';\r\n        }\r\n        else if (this.ff == 84) s += 'SMPTE Offset: ' + _smptetxt(_s2a(this.dd));\r\n        else if (this.ff == 88) {\r\n          var d = 1 << this.dd.charCodeAt(1);\r\n          s += 'Time Signature: ' + this.dd.charCodeAt(0) + '/' + d;\r\n          s += ' ' + this.dd.charCodeAt(2) + ' ' + this.dd.charCodeAt(3);\r\n        }\r\n        else if (this.ff == 89) {\r\n          s += 'Key Signature: ';\r\n          var ks = this.getKeySignature();\r\n          if (ks) {\r\n            s += ks[1];\r\n            if (ks[2]) s += ' min';\r\n          }\r\n          else s+= 'invalid';\r\n        }\r\n        else if (this.ff == 127) {\r\n          if (this.dd.charCodeAt(0) == 0x43) {\r\n            if (this.dd.charCodeAt(1) == 0x7b) {\r\n              s += '[XF:' + __hex(this.dd.charCodeAt(2)) + ']';\r\n              ss = { 0: 'Version', 1: 'Chord', 2: 'Rehearsal Mark', 3: 'Phrase Mark', 4: 'Max Phrase Mark',\r\n                5: 'Fingering Number', 12: 'Guide Track Flag', 16: 'Guitar Info', 18: 'Chord Voicing',\r\n                127: 'XG Song Data Number' }[this.dd.charCodeAt(2)];\r\n              s += ss ? ' ' + ss : '';\r\n              s += ': ';\r\n              if (this.dd.charCodeAt(2) == 0) {\r\n                return s + this.dd.substr(3, 4) + ' ' + _hex(_s2a(this.dd.substr(7)));\r\n              }\r\n              if (this.dd.charCodeAt(2) == 1) {\r\n                return s + this.getText();\r\n              }\r\n              return s + _hex(_s2a(this.dd.substr(3)));\r\n            }\r\n          }\r\n          s += 'Sequencer Specific' + _smfhex(this.dd);\r\n        }\r\n        else s += 'SMF' + _smfhex(this.dd);\r\n        return s;\r\n      }\r\n      return 'empty';\r\n    }\r\n    s = _hex(this);\r\n    if (this[0] < 0x80) return s;\r\n    ss = {\r\n      241: 'MIDI Time Code',\r\n      242: 'Song Position',\r\n      243: 'Song Select',\r\n      244: 'Undefined',\r\n      245: 'Undefined',\r\n      246: 'Tune request',\r\n      248: 'Timing clock',\r\n      249: 'Undefined',\r\n      250: 'Start',\r\n      251: 'Continue',\r\n      252: 'Stop',\r\n      253: 'Undefined',\r\n      254: 'Active Sensing',\r\n      255: 'Reset'\r\n    }[this[0]];\r\n    if (ss) return s + ' -- ' + ss;\r\n    if (this.isMidiSoft()) {\r\n      ss = _toLine(this.getText());\r\n      if (ss) ss = ' ' + ss;\r\n      return s + ' -- [K:' + __hex(this[5]) + ']' + ss;\r\n    }\r\n    var c = this[0] >> 4;\r\n    ss = {8: 'Note Off', 10: 'Aftertouch', 12: 'Program Change', 13: 'Channel Aftertouch', 14: 'Pitch Wheel'}[c];\r\n    if (ss) return s + ' -- ' + ss;\r\n    if (c == 9) return s + ' -- ' + (this[2] ? 'Note On' : 'Note Off');\r\n    if (c != 11) return s;\r\n    ss = {\r\n      0: 'Bank Select MSB',\r\n      1: 'Modulation Wheel MSB',\r\n      2: 'Breath Controller MSB',\r\n      4: 'Foot Controller MSB',\r\n      5: 'Portamento Time MSB',\r\n      6: 'Data Entry MSB',\r\n      7: 'Channel Volume MSB',\r\n      8: 'Balance MSB',\r\n      10: 'Pan MSB',\r\n      11: 'Expression Controller MSB',\r\n      12: 'Effect Control 1 MSB',\r\n      13: 'Effect Control 2 MSB',\r\n      16: 'General Purpose Controller 1 MSB',\r\n      17: 'General Purpose Controller 2 MSB',\r\n      18: 'General Purpose Controller 3 MSB',\r\n      19: 'General Purpose Controller 4 MSB',\r\n      31: 'Karaoke',\r\n      32: 'Bank Select LSB',\r\n      33: 'Modulation Wheel LSB',\r\n      34: 'Breath Controller LSB',\r\n      36: 'Foot Controller LSB',\r\n      37: 'Portamento Time LSB',\r\n      38: 'Data Entry LSB',\r\n      39: 'Channel Volume LSB',\r\n      40: 'Balance LSB',\r\n      42: 'Pan LSB',\r\n      43: 'Expression Controller LSB',\r\n      44: 'Effect control 1 LSB',\r\n      45: 'Effect control 2 LSB',\r\n      48: 'General Purpose Controller 1 LSB',\r\n      49: 'General Purpose Controller 2 LSB',\r\n      50: 'General Purpose Controller 3 LSB',\r\n      51: 'General Purpose Controller 4 LSB',\r\n      64: 'Damper Pedal',\r\n      65: 'Portamento',\r\n      66: 'Sostenuto',\r\n      67: 'Soft Pedal',\r\n      68: 'Legato',\r\n      69: 'Hold 2',\r\n      70: 'Sound Variation',\r\n      71: 'Filter Resonance',\r\n      72: 'Release Time',\r\n      73: 'Attack Time',\r\n      74: 'Brightness',\r\n      75: 'Decay Time',\r\n      76: 'Vibrato Rate',\r\n      77: 'Vibrato Depth',\r\n      78: 'Vibrato Delay',\r\n      79: 'Sound Controller 10',\r\n      80: 'General Purpose Controller 5',\r\n      81: 'General Purpose Controller 6',\r\n      82: 'General Purpose Controller 7',\r\n      83: 'General Purpose Controller 8',\r\n      84: 'Portamento Control',\r\n      88: 'High Resolution Velocity Prefix',\r\n      91: 'Effects 1 Depth',\r\n      92: 'Effects 2 Depth',\r\n      93: 'Effects 3 Depth',\r\n      94: 'Effects 4 Depth',\r\n      95: 'Effects 5 Depth',\r\n      96: 'Data Increment',\r\n      97: 'Data Decrement',\r\n      98: 'Non-Registered Parameter Number LSB',\r\n      99: 'Non-Registered Parameter Number MSB',\r\n      100: 'Registered Parameter Number LSB',\r\n      101: 'Registered Parameter Number MSB',\r\n      120: 'All Sound Off',\r\n      121: 'Reset All Controllers',\r\n      122: 'Local Control On/Off',\r\n      123: 'All Notes Off',\r\n      124: 'Omni Mode Off',\r\n      125: 'Omni Mode On',\r\n      126: 'Mono Mode On',\r\n      127: 'Poly Mode On'\r\n    }[this[1]];\r\n    if (this[1] >= 64 && this[1] <= 69) ss += this[2] < 64 ? ' Off' : ' On';\r\n    if (!ss) ss = 'Undefined';\r\n    return s + ' -- ' + ss;\r\n  };\r\n  MIDI.prototype._stamp = function(obj) { this._from.push(obj._orig ? obj._orig : obj); return this; };\r\n  MIDI.prototype._unstamp = function(obj) {\r\n    if (typeof obj == 'undefined') this._from = [];\r\n    else {\r\n      if (obj._orig) obj = obj._orig;\r\n      var i = this._from.indexOf(obj);\r\n      if (i > -1) this._from.splice(i, 1);\r\n    }\r\n    return this;\r\n  };\r\n  MIDI.prototype._stamped = function(obj) {\r\n    if (obj._orig) obj = obj._orig;\r\n    for (var i = 0; i < this._from.length; i++) if (this._from[i] == obj) return true;\r\n    return false;\r\n  };\r\n\r\n  JZZ.MIDI = MIDI;\r\n  _J.prototype.MIDI = MIDI;\r\n\r\n  function _clear_ctxt() {\r\n    var i;\r\n    this._cc = [];\r\n    for (i = 0; i < 16; i++) this._cc[i] = {};\r\n  }\r\n  function _rpn_txt(msb, lsb) {\r\n    var a = typeof msb == 'undefined' ? '??' : __hex(msb);\r\n    var b = typeof lsb == 'undefined' ? '??' : __hex(lsb);\r\n    var c = {\r\n      '0000': 'Pitch Bend Sensitivity',\r\n      '0001': 'Channel Fine Tune',\r\n      '0002': 'Channel Coarse Tune',\r\n      '0003': 'Select Tuning Program',\r\n      '0004': 'Select Tuning Bank',\r\n      '0005': 'Vibrato Depth Range',\r\n      '7f7f': 'NONE'\r\n    }[a + '' + b];\r\n    return 'RPN ' + a + ' ' + b + (c ? ': ' + c : '');\r\n  }\r\n  function _nrpn_txt(msb, lsb) {\r\n    var a = typeof msb == 'undefined' ? '??' : __hex(msb);\r\n    var b = typeof lsb == 'undefined' ? '??' : __hex(lsb);\r\n    return 'NRPN ' + a + ' ' + b;\r\n  }\r\n  function _read_ctxt(msg) {\r\n    if (!msg.length || msg[0] < 0x80) return msg;\r\n    if (msg[0] == 0xff) { this._clear(); return msg; }\r\n    var ch = msg[0] & 15;\r\n    var st = msg[0] >> 4;\r\n    var s;\r\n    if (st == 12) {\r\n      msg._bm = this._cc[ch].bm;\r\n      msg._bl = this._cc[ch].bl;\r\n      if (JZZ.MIDI.programName) msg.label(JZZ.MIDI.programName(msg[1], msg._bm, msg._bl));\r\n    }\r\n    else if (st == 11) {\r\n      switch (msg[1]) {\r\n        case 0: this._cc[ch].bm = msg[2]; break;\r\n        case 32: this._cc[ch].bl = msg[2]; break;\r\n        case 98: this._cc[ch].nl = msg[2]; this._cc[ch].rn = 'n'; break;\r\n        case 99: this._cc[ch].nm = msg[2]; this._cc[ch].rn = 'n'; break;\r\n        case 100: this._cc[ch].rl = msg[2]; this._cc[ch].rn = 'r'; break;\r\n        case 101: this._cc[ch].rm = msg[2]; this._cc[ch].rn = 'r'; break;\r\n        case 6: case 38: case 96: case 97:\r\n          if (this._cc[ch].rn == 'r') {\r\n            msg._rm = this._cc[ch].rm;\r\n            msg._rl = this._cc[ch].rl;\r\n            msg.label(_rpn_txt(this._cc[ch].rm, this._cc[ch].rl));\r\n          }\r\n          if (this._cc[ch].rn == 'n') {\r\n            msg._nm = this._cc[ch].rm;\r\n            msg._nl = this._cc[ch].nl;\r\n            msg.label(_nrpn_txt(this._cc[ch].nm, this._cc[ch].nl));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    else if (msg.isFullSysEx()) {\r\n      if (msg[1] == 0x7f) {\r\n        if (msg[3] == 4) {\r\n          s = { 1: 'Master Volume', 2: 'Master Balance', 3: 'Master Fine Tuning', 4: 'Master Coarse Tuning' }[msg[4]];\r\n          if (s) msg.label(s);\r\n        }\r\n        else if (msg[3] == 8) {\r\n          s = { 2: 'Note Tuning', 7: 'Note Tuning, Bank', 8: 'Scale Tuning, 1 byte format', 9: 'Scale Tuning, 2 byte format' }[msg[4]];\r\n          if (s) msg.label(s);\r\n        }\r\n      }\r\n      else if (msg[1] == 0x7e) {\r\n        if (msg[3] == 6) {\r\n          if (msg[4] == 1) msg.label('Device ID Request');\r\n          else if (msg[4] == 2) {\r\n            msg.label('Device ID Response');\r\n          }\r\n        }\r\n        else if (msg[3] == 8) {\r\n          s = {\r\n            0: 'Bulk Tuning Dump Request', 1: 'Bulk Tuning Dump', 3: 'Bulk Tuning Dump Request, Bank', 4: 'Bulk Tuning Dump, Bank',\r\n            5: 'Scale Tuning Dump, 1 byte format', 6: 'Scale Tuning Dump, 2 byte format',\r\n            7: 'Note Tuning, Bank', 8: 'Scale Tuning, 1 byte format', 9: 'Scale Tuning, 2 byte format'\r\n          }[msg[4]];\r\n          if (s) msg.label(s);\r\n        }\r\n        else if (msg[3] == 9) {\r\n          if (msg[4] == 1) { msg.label('GM1 System On'); this._clear(); this._gm = '1'; }\r\n          else if (msg[4] == 2) { msg.label('GM System Off'); this._clear(); this._gm = '0'; }\r\n          else if (msg[4] == 3) { msg.label('GM2 System On'); this._clear(); this._gm = '2'; }\r\n        }\r\n      }\r\n      else if (msg[1] == 0x43) {\r\n        if ((msg[2] & 0xf0) == 0x10 && msg[3] == 0x4c) {\r\n          if (msg[4] == 0 && msg[5] == 0 && msg[6] == 0x7e && msg[7] == 0) {\r\n            msg.label('XG System On'); this._clear(); this._gm = 'Y';\r\n          }\r\n          else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 0) msg.label('XG Master Tuning');\r\n          else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 4) msg.label('XG Master Volume');\r\n          else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 6) msg.label('XG Master Transpose');\r\n          else if (msg[4] == 8 && msg[5] < 16 && msg[6] >= 0x41 && msg[6] <= 0x4c) msg.label('XG Scale Tuning');\r\n          else  msg.label('XG Parameter');\r\n        }\r\n      }\r\n      else if (msg[1] == 0x41) {\r\n        if (msg[3] == 0x42 && msg[4] == 0x12) {\r\n          if (msg[5] == 0x40) {\r\n            if (msg[6] == 0) {\r\n              if (msg[7] == 0x7f && msg[8] == 0 && msg[9] == 0x41) {\r\n                msg.label('GS Reset'); this._clear(); this._gm = 'R';\r\n              }\r\n              else if (msg[7] == 0) msg.label('GS Master Tuning');\r\n              else if (msg[7] == 4) msg.label('GS Master Volume');\r\n              else if (msg[7] == 5) msg.label('GS Master Transpose');\r\n              else msg.label('GS Parameter');\r\n            }\r\n            else if ((msg[6] & 0xf0) == 0x10 && msg[7] == 0x15) msg.label('GS Drum Part Change');\r\n            else if ((msg[6] & 0xf0) == 0x10 && msg[7] >= 0x40 && msg[7] <= 0x4b) msg.label('GS Scale Tuning');\r\n            else msg.label('GS Parameter');\r\n          }\r\n          if (msg[5] == 0x41) msg.label('GS Parameter');\r\n        }\r\n      }\r\n    }\r\n    return msg;\r\n  }\r\n  function Context() {\r\n    var self = new _M();\r\n    self._clear = _clear_ctxt;\r\n    self._read = _read_ctxt;\r\n    self._receive = function(msg) { this._emit(this._read(msg)); };\r\n    self._clear();\r\n    self._resume();\r\n    return self;\r\n  }\r\n  JZZ.Context = Context;\r\n  _J.prototype.Context = Context;\r\n\r\n  function MPE() {\r\n    var self = this instanceof MPE ? this : self = new MPE();\r\n    self.reset();\r\n    if (arguments.length) MPE.prototype.setup.apply(self, arguments);\r\n    return self;\r\n  }\r\n  MPE.validate = function(arg) {\r\n    var a = arg instanceof Array ? arg : arguments;\r\n    if (a[0] != parseInt(a[0]) || a[0] < 0 || a[0] > 14) throw RangeError('Bad master channel value: ' + a[0]);\r\n    if (a[1] != parseInt(a[1]) || a[1] < 0 || a[0] + a[1] > 15) throw RangeError('Bad zone size value: ' + a[1]);\r\n  };\r\n  MPE.prototype.reset = function() { for (var n = 0; n < 16; n++) this[n] = { band: 0, master: n }; };\r\n  MPE.prototype.setup = function(m, n) {\r\n    MPE.validate(m, n);\r\n    var k;\r\n    var last = m + n;\r\n    if (this[m].master == m && this[m].band == n) return;\r\n    if (!n && !this[m].band) return;\r\n    if (this[m].band) {\r\n      k = m + this[m].band;\r\n      if (last < k) last = k;\r\n    }\r\n    else if (this[m].master == m - 1) {\r\n      k = m - 1;\r\n      k = k + this[k].band;\r\n      if (last < k) last = k;\r\n      this[m - 1] = { band: 0, master: m - 1 };\r\n    }\r\n    else if (this[m].master != m) {\r\n      k = this[m].master;\r\n      k = k + this[k].band;\r\n      if (last < k) last = k;\r\n      this[this[m].master].band = m - this[m].master - 1;\r\n    }\r\n    this[m].master = m;\r\n    this[m].band = n;\r\n    for (k = m + 1; k <= m + n; k++) {\r\n      if (this[k].band && last < k + this[k].band) last = k + this[k].band;\r\n      this[k] = { band: 0, master: m };\r\n    }\r\n    for (; k <= last; k++) this[k] = { band: 0, master: k };\r\n  };\r\n  MPE.prototype.filter = function(msg) {\r\n    var c = msg.getChannel();\r\n    if (!this[c] || !this[this[c].master].band) return msg;\r\n    var m = this[c].master;\r\n    var n = this[m].band;\r\n    var i, j, k;\r\n    if (typeof msg._mpe != 'undefined') {\r\n      k = 256;\r\n      for (i = m + 1; i <= m + n; i++) {\r\n        if (!this[i].notes) {\r\n          if (k > 0) { c = i; k = 0; }\r\n        }\r\n        else {\r\n          if (k > this[i].notes.length) { c = i; k = this[i].notes.length; }\r\n          for (j = 0; j < this[i].notes.length; j++) {\r\n            if (this[i].notes[j] == msg._mpe) { c = i; k = -1; break; }\r\n          }\r\n        }\r\n      }\r\n      msg.setChannel(c);\r\n      msg._mpe = undefined;\r\n    }\r\n    if (c == m) return msg; // bad mpe\r\n    if (msg.isNoteOn()) {\r\n      if (!this[c].notes) this[c].notes = [];\r\n      _push(this[c].notes, msg.getNote());\r\n    }\r\n    else if (msg.isNoteOff()) {\r\n      if (this[c].notes) _pop(this[c].notes, msg.getNote());\r\n    }\r\n    return msg;\r\n  };\r\n  JZZ.MPE = MPE;\r\n\r\n  JZZ.lib = {};\r\n  JZZ.lib.now = _now;\r\n  JZZ.lib.schedule = _schedule;\r\n  var _sch_list = [];\r\n  var _sch_worker;\r\n  var _sch_count = 0;\r\n  try {\r\n    var _blob = URL.createObjectURL(new Blob(['(', function() {\r\n      function tick() {\r\n        postMessage({});\r\n        setTimeout(tick, 0);\r\n      }\r\n      tick();\r\n    }.toString(), ')()'], { type: 'application/javascript' }));\r\n    var _sch_tick = function() {\r\n      var n = _sch_list.length;\r\n      // cannot use i < _sch_list.length !\r\n      for (var i = 0; i < n; i++) _sch_list.shift()();\r\n      _sch_count++;\r\n      if (_sch_count > 20 && _sch_worker) {\r\n        _sch_worker.terminate();\r\n        _sch_worker = undefined;\r\n      }\r\n    };\r\n    var _sch = function(x) {\r\n      _sch_list.push(x);\r\n      _sch_count = 0;\r\n      if (!_sch_worker) {\r\n        _sch_worker = new Worker(_blob);\r\n        _sch_worker.onmessage = _sch_tick;\r\n      }\r\n    };\r\n    _sch(function() { JZZ.lib.schedule = _sch; });\r\n  }\r\n  catch (e) {}\r\n\r\n  JZZ.lib.openMidiOut = function(name, engine) {\r\n    var port = new _M();\r\n    engine._openOut(port);\r\n    port._info = engine._info(name);\r\n    return port;\r\n  };\r\n  JZZ.lib.openMidiIn = function(name, engine) {\r\n    var port = new _M();\r\n    engine._openIn(port);\r\n    port._info = engine._info(name);\r\n    return port;\r\n  };\r\n  JZZ.lib.registerMidiOut = function(name, engine) {\r\n    var x = engine._info(name);\r\n    for (var i = 0; i < _virtual._outs.length; i++) if (_virtual._outs[i].name == x.name) return false;\r\n    x.engine = engine;\r\n    _virtual._outs.push(x);\r\n    if (_jzz) {\r\n      _postRefresh();\r\n      if (_jzz._bad) { _jzz._repair(); _jzz._resume(); }\r\n    }\r\n    return true;\r\n  };\r\n  JZZ.lib.registerMidiIn = function(name, engine) {\r\n    var x = engine._info(name);\r\n    for (var i = 0; i < _virtual._ins.length; i++) if (_virtual._ins[i].name == x.name) return false;\r\n    x.engine = engine;\r\n    _virtual._ins.push(x);\r\n    if (_jzz) {\r\n      _postRefresh();\r\n      if (_jzz._bad) { _jzz._repair(); _jzz._resume(); }\r\n    }\r\n    return true;\r\n  };\r\n  var _ac;\r\n  function _initAudioContext() {\r\n    if (!_ac && typeof window !== 'undefined') {\r\n      var AudioContext = window.AudioContext || window.webkitAudioContext;\r\n      if (AudioContext) {\r\n        _ac = new AudioContext();\r\n        if (_ac && !_ac.createGain) _ac.createGain = _ac.createGainNode;\r\n        var _activateAudioContext = function() {\r\n          if (_ac.state != 'running') {\r\n            _ac.resume();\r\n            var osc = _ac.createOscillator();\r\n            var gain = _ac.createGain();\r\n            try { gain.gain.value = 0; } catch (err) {}\r\n            gain.gain.setTargetAtTime(0, _ac.currentTime, 0.01);\r\n            osc.connect(gain);\r\n            gain.connect(_ac.destination);\r\n            if (!osc.start) osc.start = osc.noteOn;\r\n            if (!osc.stop) osc.stop = osc.noteOff;\r\n            osc.start(0.1); osc.stop(0.11);\r\n          }\r\n          else if (typeof document != 'undefined') {\r\n            document.removeEventListener('touchstart', _activateAudioContext);\r\n            document.removeEventListener('touchend', _activateAudioContext);\r\n            document.removeEventListener('mousedown', _activateAudioContext);\r\n            document.removeEventListener('keydown', _activateAudioContext);\r\n          }\r\n        };\r\n        if (typeof document != 'undefined') {\r\n          document.addEventListener('touchstart', _activateAudioContext);\r\n          document.addEventListener('touchend', _activateAudioContext);\r\n          document.addEventListener('mousedown', _activateAudioContext);\r\n          document.addEventListener('keydown', _activateAudioContext);\r\n        }\r\n        _activateAudioContext();\r\n      }\r\n    }\r\n  }\r\n  JZZ.lib.copyMidiHelpers = _copyMidiHelpers;\r\n  JZZ.lib.getAudioContext = function() { _initAudioContext(); return _ac; };\r\n  var _b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n  JZZ.lib.fromBase64 = function(input) {\r\n    var output = '';\r\n    var chr1, chr2, chr3;\r\n    var enc1, enc2, enc3, enc4;\r\n    var i = 0;\r\n    input = input.replace(/[^A-Za-z0-9+/=]/g, '');\r\n    while (i < input.length) {\r\n      enc1 = _b64.indexOf(input.charAt(i++));\r\n      enc2 = _b64.indexOf(input.charAt(i++));\r\n      enc3 = _b64.indexOf(input.charAt(i++));\r\n      enc4 = _b64.indexOf(input.charAt(i++));\r\n      chr1 = (enc1 << 2) | (enc2 >> 4);\r\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n      chr3 = ((enc3 & 3) << 6) | enc4;\r\n      output = output + String.fromCharCode(chr1);\r\n      if (enc3 != 64) {\r\n        output = output + String.fromCharCode(chr2);\r\n      }\r\n      if (enc4 != 64) {\r\n        output = output + String.fromCharCode(chr3);\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n  JZZ.lib.toBase64 = function(data) {\r\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = '', arr = [];\r\n    if (!data) return data;\r\n    do {\r\n      o1 = data.charCodeAt(i++);\r\n      o2 = data.charCodeAt(i++);\r\n      o3 = data.charCodeAt(i++);\r\n      bits = o1 << 16 | o2 << 8 | o3;\r\n      h1 = bits >> 18 & 0x3f;\r\n      h2 = bits >> 12 & 0x3f;\r\n      h3 = bits >> 6 & 0x3f;\r\n      h4 = bits & 0x3f;\r\n      arr[ac++] = _b64.charAt(h1) + _b64.charAt(h2) + _b64.charAt(h3) + _b64.charAt(h4);\r\n    } while(i < data.length);\r\n    enc = arr.join('');\r\n    var r = data.length % 3;\r\n    return (r ? enc.slice(0, r - 3) + '==='.slice(r) : enc);\r\n  };\r\n  JZZ.lib.fromUTF8 = function(data) {\r\n    data = typeof data == 'undefined' ? '' : '' + data;\r\n    var out = '';\r\n    var i, n, m;\r\n    for (i = 0; i < data.length; i++) {\r\n      n = data.charCodeAt(i);\r\n      if (n > 0xff) return data;\r\n      if (n < 0x80) out += data[i];\r\n      else if ((n & 0xe0) == 0xc0) {\r\n        n = (n & 0x1f) << 6;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f);\r\n        out += String.fromCharCode(n);\r\n      }\r\n      else if ((n & 0xf0) == 0xe0) {\r\n        n = (n & 0x0f) << 12;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f) << 6;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f);\r\n        out += String.fromCharCode(n);\r\n      }\r\n      else if ((n & 0xf8) == 0xf0) {\r\n        n = (n & 0x07) << 18;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f) << 12;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f) << 6;\r\n        i++; if (i >= data.length) return data;\r\n        m = data.charCodeAt(i);\r\n        if ((m & 0xc0) != 0x80) return data;\r\n        n += (m & 0x3f);\r\n        if (n > 0x10ffff) return data;\r\n        n -= 0x10000;\r\n        out += String.fromCharCode(0xd800 + (n >> 10));\r\n        out += String.fromCharCode(0xdc00 + (n & 0x3ff));\r\n      }\r\n    }\r\n    return out;\r\n  };\r\n  JZZ.lib.toUTF8 = function(data) {\r\n    data = typeof data == 'undefined' ? '' : '' + data;\r\n    var out = '';\r\n    var i, n;\r\n    for (i = 0; i < data.length; i++) {\r\n      n = data.charCodeAt(i);\r\n      if (n < 0x80) out += data[i];\r\n      else if (n < 0x800) {\r\n        out += String.fromCharCode(0xc0 + (n >> 6));\r\n        out += String.fromCharCode(0x80 + (n & 0x3f));\r\n      }\r\n      else if (n < 0x10000) {\r\n        out += String.fromCharCode(0xe0 + (n >> 12));\r\n        out += String.fromCharCode(0x80 + ((n >> 6) & 0x3f));\r\n        out += String.fromCharCode(0x80 + (n & 0x3f));\r\n      }\r\n      /* istanbul ignore next */\r\n      else {\r\n        out += String.fromCharCode(0xf0 + (n >> 18));\r\n        out += String.fromCharCode(0x80 + ((n >> 12) & 0x3f));\r\n        out += String.fromCharCode(0x80 + ((n >> 6) & 0x3f));\r\n        out += String.fromCharCode(0x80 + (n & 0x3f));\r\n      }\r\n    }\r\n    return out;\r\n  };\r\n\r\n  // Web MIDI API\r\n  var _wma = [];\r\n  var _outputMap = {};\r\n  var _inputMap = {};\r\n\r\n  var Promise = _scope.Promise;\r\n  /* istanbul ignore next */\r\n  if (typeof Promise !== 'function') {\r\n    Promise = function(executor) {\r\n      this.executor = executor;\r\n    };\r\n    Promise.prototype.then = function(resolve, reject) {\r\n      if (typeof resolve !== 'function') {\r\n        resolve = _nop;\r\n      }\r\n      if (typeof reject !== 'function') {\r\n        reject = _nop;\r\n      }\r\n      this.executor(resolve, reject);\r\n    };\r\n  }\r\n  function DOMException(name, message, code) {\r\n    this.name = name;\r\n    this.message = message;\r\n    this.code = code;\r\n  }\r\n\r\n  function MIDIConnectionEvent(port, target) {\r\n    this.bubbles = false;\r\n    this.cancelBubble = false;\r\n    this.cancelable = false;\r\n    this.currentTarget = target;\r\n    this.defaultPrevented = false;\r\n    this.eventPhase = 0;\r\n    this.path = [];\r\n    this.port = port;\r\n    this.returnValue = true;\r\n    this.srcElement = target;\r\n    this.target = target;\r\n    this.timeStamp = _now();\r\n    this.type = 'statechange';\r\n  }\r\n\r\n  function MIDIMessageEvent(port, data) {\r\n    this.bubbles = false;\r\n    this.cancelBubble = false;\r\n    this.cancelable = false;\r\n    this.currentTarget = port;\r\n    this.data = data;\r\n    this.defaultPrevented = false;\r\n    this.eventPhase = 0;\r\n    this.path = [];\r\n    this.receivedTime = _now();\r\n    this.returnValue = true;\r\n    this.srcElement = port;\r\n    this.target = port;\r\n    this.timeStamp = this.receivedTime;\r\n    this.type = 'midimessage';\r\n  }\r\n\r\n  function _statechange(p, a) {\r\n    if (p) {\r\n      if (p.onstatechange) p.onstatechange(new MIDIConnectionEvent(p, p));\r\n      if (a.onstatechange) a.onstatechange(new MIDIConnectionEvent(p, a));\r\n    }\r\n  }\r\n\r\n  function MIDIInput(a, p) {\r\n    var self = this;\r\n    var _open = false;\r\n    var _ochng = null;\r\n    var _onmsg = null;\r\n    this.type = 'input';\r\n    this.id = p.id;\r\n    this.name = p.name;\r\n    this.manufacturer = p.man;\r\n    this.version = p.ver;\r\n    Object.defineProperty(this, 'state', { get: function() { return p.connected ? 'connected' : 'disconnected'; }, enumerable: true });\r\n    Object.defineProperty(this, 'connection', { get: function() {\r\n      return _open ? p.proxy ? 'open' : 'pending' : 'closed';\r\n    }, enumerable: true });\r\n    Object.defineProperty(this, 'onmidimessage', {\r\n      get: function() { return _onmsg; },\r\n      set: function(value) {\r\n        if (_func(value)) {\r\n          _onmsg = value;\r\n          if (!_open) self.open().then(_nop, _nop);\r\n        }\r\n        else _onmsg = null;\r\n      },\r\n      enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'onstatechange', {\r\n      get: function() { return _ochng; },\r\n      set: function(value) {\r\n        if (_func(value)) _ochng = value;\r\n        else _ochng = null;\r\n      },\r\n      enumerable: true\r\n    });\r\n    this.open = function() {\r\n      return new Promise(function(resolve, reject) {\r\n        if (_open) resolve(self);\r\n        else {\r\n          p.open().then(function() {\r\n            if (!_open) {\r\n              _open = true;\r\n              _statechange(self, a);\r\n            }\r\n            resolve(self);\r\n          }, function() {\r\n            reject(new DOMException('InvalidAccessError', 'Port is not available', 15));\r\n          });\r\n        }\r\n      });\r\n    };\r\n    this.close = function() {\r\n      return new Promise(function(resolve/*, reject*/) {\r\n        if (_open) {\r\n          _open = false;\r\n          p.close();\r\n          _statechange(self, a);\r\n        }\r\n        resolve(self);\r\n      });\r\n    };\r\n    Object.freeze(this);\r\n  }\r\n\r\n  function _split(q) {\r\n    var i, k;\r\n    while (q.length) {\r\n      for (i = 0; i < q.length; i++) if (q[i] == parseInt(q[i]) && q[i] >= 0x80 && q[i] <= 0xff && q[i] != 0xf7) break;\r\n      q.splice(0, i);\r\n      if (!q.length) return;\r\n      if (q[0] == 0xf0) {\r\n        for (i = 1; i < q.length; i++) if (q[i] == 0xf7) break;\r\n        if (i == q.length) return;\r\n        return q.splice(0, i + 1);\r\n      }\r\n      else {\r\n        k = _datalen(q[0]) + 1;\r\n        if (k > q.length) return;\r\n        for (i = 1; i < k; i++) if (q[i] != parseInt(q[i]) || q[i] < 0 || q[i] >= 0x80) break;\r\n        if (i == k) return q.splice(0, i);\r\n        else q.splice(0, i);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _InputProxy(id, name, man, ver) {\r\n    var self = this;\r\n    this.id = id;\r\n    this.name = name;\r\n    this.man = man;\r\n    this.ver = ver;\r\n    this.connected = true;\r\n    this.ports = [];\r\n    this.pending = [];\r\n    this.proxy = undefined;\r\n    this.queue = [];\r\n    this.onmidi = function(msg) {\r\n      var m;\r\n      self.queue = self.queue.concat(msg.slice());\r\n      for (m = _split(self.queue); m; m = _split(self.queue)) {\r\n        for (i = 0; i < self.ports.length; i++) {\r\n          if (self.ports[i][0].onmidimessage && (m[0] != 0xf0 || self.ports[i][1])) {\r\n            self.ports[i][0].onmidimessage(new MIDIMessageEvent(self, new Uint8Array(m)));\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n  _InputProxy.prototype.open = function() {\r\n    var self = this;\r\n    return new Promise(function(resolve, reject) {\r\n      var i;\r\n      if (self.proxy || !self.connected) resolve();\r\n      else {\r\n        self.pending.push([resolve, reject]);\r\n        if (self.pending.length == 1) {\r\n          JZZ().openMidiIn(self.name).or(function() {\r\n            for (i = 0; i < self.pending.length; i++) self.pending[i][1]();\r\n            self.pending = [];\r\n          }).and(function() {\r\n            self.proxy = this;\r\n            self.proxy.connect(self.onmidi);\r\n            for (i = 0; i < self.pending.length; i++) self.pending[i][0]();\r\n            self.pending = [];\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n  _InputProxy.prototype.close = function() {\r\n    var i;\r\n    if (this.proxy) {\r\n      for (i = 0; i < this.ports.length; i++) if (this.ports[i].connection == 'open') return;\r\n      this.proxy.close();\r\n      this.proxy = undefined;\r\n    }\r\n  };\r\n  _InputProxy.prototype.disconnect = function() {\r\n    this.connected = false;\r\n    if (this.proxy) {\r\n      this.proxy.close();\r\n      this.proxy = undefined;\r\n    }\r\n  };\r\n  _InputProxy.prototype.reconnect = function() {\r\n    var self = this;\r\n    var i, p;\r\n    var a = [];\r\n    this.connected = true;\r\n    for (i = 0; i < _wma.length; i++) {\r\n      p = _wma[i].inputs.get(this.id);\r\n      if (p.connection == 'closed') _statechange(p, _wma[i]);\r\n      else a.push([p, _wma[i]]);\r\n    }\r\n    if (a.length) {\r\n      JZZ()._openMidiInNR(self.name).or(function() {\r\n        for (i = 0; i < a.length; i++) a[i][0].close();\r\n      }).and(function() {\r\n        self.proxy = this;\r\n        self.proxy.connect(self.onmidi);\r\n        for (i = 0; i < a.length; i++) _statechange(a[i][0], a[i][1]);\r\n      });\r\n    }\r\n  };\r\n\r\n  function _datalen(x) {\r\n    if (x >= 0x80 && x <= 0xbf || x >= 0xe0 && x <= 0xef || x == 0xf2) return 2;\r\n    if (x >= 0xc0 && x <= 0xdf || x == 0xf1 || x == 0xf3) return 1;\r\n    return 0;\r\n  }\r\n\r\n  var _epr = \"Failed to execute 'send' on 'MIDIOutput': \";\r\n\r\n  function _validate(arr, sysex) {\r\n    var i, k;\r\n    var msg;\r\n    var data = [];\r\n    for (i = 0; i < arr.length; i++) {\r\n      if (arr[i] != parseInt(arr[i]) || arr[i] < 0 || arr[i] > 255) throw TypeError(_epr + arr[i] + ' is not a UInt8 value.');\r\n    }\r\n    k = 0;\r\n    for (i = 0; i < arr.length; i++) {\r\n      if (!k) {\r\n        if (arr[i] < 0x80) throw TypeError(_epr + 'Running status is not allowed at index ' + i + ' (' + arr[i] + ').');\r\n        if (arr[i] == 0xf7) throw TypeError(_epr + 'Unexpected end of system exclusive message at index ' + i + ' (' + arr[i] + ').');\r\n        msg = [arr[i]];\r\n        data.push(msg);\r\n        if (arr[i] == 0xf0) {\r\n          if (!sysex) throw new DOMException('InvalidAccessError', _epr + 'System exclusive messag is not allowed at index ' + i + ' (' + arr[i] + ').', 15);\r\n          k = -1;\r\n          for (; i < arr.length; i++) {\r\n            msg.push(arr[i]);\r\n            if (arr[i] == 0xf7) {\r\n              k = 0;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          k = _datalen(arr[i]);\r\n        }\r\n      }\r\n      else {\r\n        if (arr[i] > 0x7f) throw TypeError(_epr + 'Unexpected status byte at index ' + i + ' (' + arr[i] + ').');\r\n        msg.push(arr[i]);\r\n        k--;\r\n      }\r\n    }\r\n    if (k) throw TypeError(_epr + 'Message is incomplete');\r\n    return [data];\r\n  }\r\n\r\n  function MIDIOutput(a, p) {\r\n    var self = this;\r\n    var _open = false;\r\n    var _ochng = null;\r\n    this.type = 'output';\r\n    this.id = p.id;\r\n    this.name = p.name;\r\n    this.manufacturer = p.man;\r\n    this.version = p.ver;\r\n    Object.defineProperty(this, 'state', { get: function() { return p.connected ? 'connected' : 'disconnected'; }, enumerable: true });\r\n    Object.defineProperty(this, 'connection', { get: function() {\r\n      return _open ? p.proxy ? 'open' : 'pending' : 'closed';\r\n    }, enumerable: true });\r\n    Object.defineProperty(this, 'onstatechange', {\r\n      get: function() { return _ochng; },\r\n      set: function(value) {\r\n        if (_func(value)) _ochng = value;\r\n        else _ochng = null;\r\n      },\r\n      enumerable: true\r\n    });\r\n    this.open = function() {\r\n      return new Promise(function(resolve, reject) {\r\n        if (_open) resolve(self);\r\n        else {\r\n          p.open().then(function() {\r\n            if (!_open) {\r\n              _open = true;\r\n              _statechange(self, a);\r\n            }\r\n            resolve(self);\r\n          }, function() {\r\n            reject(new DOMException('InvalidAccessError', 'Port is not available', 15));\r\n          });\r\n        }\r\n      });\r\n    };\r\n    this.close = function() {\r\n      return new Promise(function(resolve/*, reject*/) {\r\n        if (_open) {\r\n          _open = false;\r\n          self.clear();\r\n          p.close();\r\n          _statechange(self, a);\r\n        }\r\n        resolve(self);\r\n      });\r\n    };\r\n    this.clear = function() {\r\n    };\r\n    this.send = function(data, timestamp) {\r\n      _validate(data, a.sysexEnabled);\r\n      if (!p.connected) throw new DOMException('InvalidStateError', 'Port is not connected', 11);\r\n      if (_open) {\r\n        var now = _now();\r\n        if (timestamp > now) setTimeout(function() { p.proxy.send(data); }, timestamp - now);\r\n        else p.proxy.send(data);\r\n      }\r\n      else this.open().then(function() { self.send(data, timestamp); }, _nop);\r\n    };\r\n    Object.freeze(this);\r\n  }\r\n\r\n  function _OutputProxy(id, name, man, ver) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.man = man;\r\n    this.ver = ver;\r\n    this.connected = true;\r\n    this.ports = [];\r\n    this.pending = [];\r\n    this.proxy = undefined;\r\n  }\r\n  _OutputProxy.prototype.open = function() {\r\n    var self = this;\r\n    return new Promise(function(resolve, reject) {\r\n      var i;\r\n      if (self.proxy || !self.connected) resolve();\r\n      else {\r\n        self.pending.push([resolve, reject]);\r\n        if (self.pending.length == 1) {\r\n          JZZ().openMidiOut(self.name).or(function() {\r\n            for (i = 0; i < self.pending.length; i++) self.pending[i][1]();\r\n            self.pending = [];\r\n          }).and(function() {\r\n            self.proxy = this;\r\n            for (i = 0; i < self.pending.length; i++) self.pending[i][0]();\r\n            self.pending = [];\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n  _OutputProxy.prototype.close = function() {\r\n    var i;\r\n    if (this.proxy) {\r\n      for (i = 0; i < this.ports.length; i++) if (this.ports[i].connection == 'open') return;\r\n      this.proxy.close();\r\n      this.proxy = undefined;\r\n    }\r\n  };\r\n  _OutputProxy.prototype.disconnect = function() {\r\n    this.connected = false;\r\n    if (this.proxy) {\r\n      this.proxy.close();\r\n      this.proxy = undefined;\r\n    }\r\n  };\r\n  _OutputProxy.prototype.reconnect = function() {\r\n    var self = this;\r\n    var i, p;\r\n    var a = [];\r\n    this.connected = true;\r\n    for (i = 0; i < _wma.length; i++) {\r\n      p = _wma[i].outputs.get(this.id);\r\n      if (p.connection == 'closed') _statechange(p, _wma[i]);\r\n      else a.push([p, _wma[i]]);\r\n    }\r\n    if (a.length) {\r\n      JZZ()._openMidiOutNR(self.name).or(function() {\r\n        for (i = 0; i < a.length; i++) a[i][0].close();\r\n      }).and(function() {\r\n        self.proxy = this;\r\n        for (i = 0; i < a.length; i++) _statechange(a[i][0], a[i][1]);\r\n      });\r\n    }\r\n  };\r\n\r\n  function _Maplike(data) {\r\n    this.has = function(id) {\r\n      return data.hasOwnProperty(id) && data[id].connected;\r\n    };\r\n    this.keys = function() {\r\n      try { // some old browsers may have no Map object\r\n        var m = new Map();\r\n        for (var id in data) if (this.has(id)) m.set(id, this.get(id));\r\n        return m.keys();\r\n      } catch (e) {}\r\n    };\r\n    this.values = function() {\r\n      try {\r\n        var m = new Map();\r\n        for (var id in data) if (this.has(id)) m.set(id, this.get(id));\r\n        return m.values();\r\n      } catch (e) {}\r\n    };\r\n    this.entries = function() {\r\n      try {\r\n        var m = new Map();\r\n        for (var id in data) if (this.has(id)) m.set(id, this.get(id));\r\n        return m.entries();\r\n      } catch (e) {}\r\n    };\r\n    this.forEach = function(fun, self) {\r\n      if (typeof self == 'undefined') self = this;\r\n      for (var id in data) if (this.has(id)) fun.call(self, this.get(id), id, this);\r\n    };\r\n    Object.defineProperty(this, 'size', {\r\n      get: function() {\r\n        var len = 0;\r\n        for (var id in data) if (this.has(id)) len++;\r\n        return len;\r\n      },\r\n      enumerable: true\r\n    });\r\n  }\r\n\r\n  function MIDIInputMap(_access, _inputs) {\r\n    this.get = function(id) {\r\n      if (_inputMap.hasOwnProperty(id) && _inputMap[id].connected) {\r\n        if (!_inputs[id]) {\r\n          _inputs[id] = new MIDIInput(_access, _inputMap[id]);\r\n          _inputMap[id].ports.push([_inputs[id], _access.sysexEnabled]);\r\n        }\r\n        return _inputs[id];\r\n      }\r\n    };\r\n    Object.freeze(this);\r\n  }\r\n  MIDIInputMap.prototype = new _Maplike(_inputMap);\r\n  MIDIInputMap.prototype.constructor = MIDIInputMap;\r\n\r\n  function MIDIOutputMap(_access, _outputs) {\r\n    this.get = function(id) {\r\n      if (_outputMap.hasOwnProperty(id) && _outputMap[id].connected) {\r\n        if (!_outputs[id]) {\r\n          _outputs[id] = new MIDIOutput(_access, _outputMap[id]);\r\n          _outputMap[id].ports.push([_outputs[id], _access.sysexEnabled]);\r\n        }\r\n        return _outputs[id];\r\n      }\r\n    };\r\n    Object.freeze(this);\r\n  }\r\n  MIDIOutputMap.prototype = new _Maplike(_outputMap);\r\n  MIDIOutputMap.prototype.constructor = MIDIOutputMap;\r\n\r\n  function _wm_watch(x) {\r\n    var i, k, p, a;\r\n    for (i = 0; i < x.inputs.added.length; i++) {\r\n      p = x.inputs.added[i];\r\n      if (!_inputMap.hasOwnProperty(p.id)) _inputMap[p.id] = new _InputProxy(p.id, p.name, p.manufacturer, p.version);\r\n      _inputMap[p.id].reconnect();\r\n    }\r\n    for (i = 0; i < x.outputs.added.length; i++) {\r\n      p = x.outputs.added[i];\r\n      if (!_outputMap.hasOwnProperty(p.id)) _outputMap[p.id] = new _OutputProxy(p.id, p.name, p.manufacturer, p.version);\r\n      _outputMap[p.id].reconnect();\r\n    }\r\n    for (i = 0; i < x.inputs.removed.length; i++) {\r\n      p = x.inputs.removed[i];\r\n      if (_inputMap.hasOwnProperty(p.id)) {\r\n        a = [];\r\n        for (k = 0; k < _wma.length; k++) a.push([_wma[k].inputs.get(p.id), _wma[k]]);\r\n        _inputMap[p.id].disconnect();\r\n        for (k = 0; k < a.length; k++) _statechange(a[k][0], a[k][1]);\r\n      }\r\n    }\r\n    for (i = 0; i < x.outputs.removed.length; i++) {\r\n      p = x.outputs.removed[i];\r\n      if (_outputMap.hasOwnProperty(p.id)) {\r\n        a = [];\r\n        for (k = 0; k < _wma.length; k++) a.push([_wma[k].outputs.get(p.id), _wma[k]]);\r\n        _outputMap[p.id].disconnect();\r\n        for (k = 0; k < a.length; k++) _statechange(a[k][0], a[k][1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function MIDIAccess(sysex) {\r\n    var _inputs = {};\r\n    var _outputs = {};\r\n    var _onstatechange = null;\r\n    var self = this;\r\n    this.sysexEnabled = sysex;\r\n    this.inputs = new MIDIInputMap(self, _inputs);\r\n    this.outputs = new MIDIOutputMap(self, _outputs);\r\n    Object.defineProperty(this, 'onstatechange', {\r\n      get: function() { return _onstatechange; },\r\n      set: function(f) { _onstatechange = _func(f) ? f : null; },\r\n      enumerable: true\r\n    });\r\n    Object.freeze(this);\r\n    var i;\r\n    var p;\r\n    var info = _jzz._info;\r\n    for (i = 0; i < info.inputs.length; i++) {\r\n      p = info.inputs[i];\r\n      if (!_inputMap.hasOwnProperty(p.id)) _inputMap[p.id] = new _InputProxy(p.id, p.name, p.manufacturer, p.version);\r\n    }\r\n    for (i = 0; i < info.outputs.length; i++) {\r\n      p = info.outputs[i];\r\n      if (!_outputMap.hasOwnProperty(p.id)) _outputMap[p.id] = new _OutputProxy(p.id, p.name, p.manufacturer, p.version);\r\n    }\r\n    if (!_wma.length) JZZ().onChange(_wm_watch);\r\n    _wma.push(this);\r\n  }\r\n\r\n  JZZ.requestMIDIAccess = function(opt) {\r\n    return new Promise(function(resolve, reject) {\r\n      JZZ.JZZ(opt).or(function() {\r\n      }).and(function() {\r\n        var sysex = !!(opt && opt.sysex);\r\n        if (sysex && !this.info().sysex) reject(new DOMException('SecurityError', 'Sysex is not allowed', 18));\r\n        else {\r\n          var wma = new MIDIAccess(sysex);\r\n          resolve(wma);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  if (typeof navigator !== 'undefined' && !navigator.requestMIDIAccess) navigator.requestMIDIAccess = JZZ.requestMIDIAccess;\r\n  JZZ.close = function() { if (_engine._close) _engine._close(); };\r\n\r\n  return JZZ;\r\n});\r\n\r\n//export {JZZ}\r\n\n\n//# sourceURL=webpack://Synthesizer/./src/js/JZZ.js?");

/***/ }),

/***/ "./src/js/Share.js":
/*!*************************!*\
  !*** ./src/js/Share.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MusicClip\": () => (/* binding */ MusicClip),\n/* harmony export */   \"MusicClipType\": () => (/* binding */ MusicClipType),\n/* harmony export */   \"MusicTrack\": () => (/* binding */ MusicTrack),\n/* harmony export */   \"SyntheysizerEvents\": () => (/* binding */ SyntheysizerEvents),\n/* harmony export */   \"TemplateClip\": () => (/* binding */ TemplateClip),\n/* harmony export */   \"VideoClip\": () => (/* binding */ VideoClip),\n/* harmony export */   \"dial_set\": () => (/* binding */ dial_set),\n/* harmony export */   \"joystick_set\": () => (/* binding */ joystick_set),\n/* harmony export */   \"note_set\": () => (/* binding */ note_set),\n/* harmony export */   \"pad_set\": () => (/* binding */ pad_set),\n/* harmony export */   \"poly_note_set\": () => (/* binding */ poly_note_set)\n/* harmony export */ });\nconst SyntheysizerEvents = window;\r\n\r\nconst note_set = {\r\n  pitch: 0,\r\n  note: 0,\r\n  value: 0\r\n};\r\nconst poly_note_set = {\r\n  pitch: [],\r\n  note : [],\r\n  value : []\r\n}\r\n\r\nconst pad_set = {\r\n  id: 0,\r\n  value: 0\r\n};\r\n\r\nconst dial_set = {\r\n  value: [[0.0, 0.0, 0.0, 0.0], \r\n          [0.0, 0.0, 0.0, 0.0]]  //순서대로  [21, 22, 23, 24]]\r\n}; \r\n\r\nconst joystick_set = {\r\n  value:[0, 0]\r\n};  \r\n\r\nconst MusicClipType = {\r\n  Mood: \"Mood\",\r\n  Melody: \"Melody\",\r\n  Beat: \"Beat\",\r\n  Lyrics:\"Lyrics\",\r\n  Template: \"Template\",\r\n  Total:\"Total\"\r\n}\r\n\r\nconst MusicNote = {\r\n  note:\"C0\",\r\n  intensity : 0.0,\r\n  start: 0.0,\r\n  end: -1.0\r\n}\r\nclass TemplateClip{\r\n  constructor(Clip_id, duration = 60, instrument = 0){\r\n    this.Clip_id = Clip_id;\r\n    this.duration = duration;\r\n    this.instrument = instrument;\r\n    this.dial_set = [[0.0, 0.0, 0.0, 0.0], \r\n                     [0.0, 0.0, 0.0, 0.0]]\r\n  }\r\n  set_dial(dial_set){\r\n    this.dial_set = dial_set\r\n  }\r\n  set_duration(duration){\r\n    this.duration = duration;\r\n  }\r\n  get_Clip_id(){\r\n    return this.Clip_id;\r\n  }\r\n  get_duration(){\r\n    return this.duration;\r\n  }\r\n  get_instrument(){\r\n    return this.instrument;\r\n  }\r\n  get_dial(){\r\n    return this.dial_set;\r\n  }\r\n}\r\n\r\nclass VideoObject{\r\n  constructor(videoId, videoData, videoDuration){{\r\n    this.videoId = videoId;\r\n    this.videoData = videoData;\r\n    this.videoDuration = videoDuration;\r\n  }}\r\n}\r\n\r\n\r\nclass VideoClip{\r\n  constructor (videoId = [], videoData = [], videoDuration = []){ \r\n    this.videoId = videoId;\r\n    this.videoData = videoData;\r\n    this.videoDuration = videoDuration;\r\n  }\r\n  setVideo(videoId, videoData, videoDuration){\r\n    this.videoId.push(videoId);\r\n    this.videoData.push(videoData);\r\n    this.videoDuration.push(videoDuration);\r\n  }\r\n  getVideoData(videoId){\r\n    if (videoId >= 0 && videoId < this.videoId.length){\r\n      // console.log(this.videoId)\r\n      // console.log(videoId)\r\n      // let index = this.videoId.indexOf(videoId);\r\n      // console.log(\"get id :\", videoId, \"index :\", index)\r\n      return this.videoData[videoId]\r\n    }\r\n    else{\r\n      console.log(\"Data index out of bounds\");\r\n      return null\r\n    }\r\n  }\r\n  getVideoDuration(videoId){\r\n    if (videoId >= 0 && videoId < this.videoId.length){\r\n      // console.log(this.videoId)\r\n      // console.log(videoId)\r\n      // let index = this.videoId.indexOf(videoId);\r\n      // console.log(\"get id :\", videoId, \"index :\", index)\r\n      return this.videoDuration[videoId]\r\n    }\r\n    else{\r\n      console.log(\"Data index out of bounds\");\r\n      return null\r\n    }\r\n  }\r\n  getAllData(){\r\n    return [this.videoId, this.videoData, this.videoDuration]\r\n  }\r\n}\r\n\r\nclass MusicClip {\r\n  constructor (Type, Clip_id, duration = 60, arraySet = [], timeSet = [], lyricSet = [], lyrictimeSet = [], lyricsVideoId = []) {\r\n      console.log(\"music Type : \", Type, \"Clip_id\", Clip_id,  \"duration\", duration);\r\n      this.Type = Type;\r\n      this.Clip_id = Clip_id;\r\n      this.duration = duration;\r\n      if(Type==MusicClipType.Melody){\r\n        this.melodyNoteSet = arraySet;\r\n        this.melodyTimeset = timeSet;\r\n        this.melodyNoteId = arraySet.length;\r\n\r\n        this.lyricSet = lyricSet;\r\n        this.lyrictimeSet = lyrictimeSet;\r\n        this.lyricId = lyricSet.length;\r\n        this.lyricsVideoId = lyricsVideoId\r\n      }\r\n      if(Type==MusicClipType.Beat){\r\n        this.beatSet = arraySet;\r\n        this.beatTime = timeSet;\r\n        this.beatSetId = arraySet.length;\r\n      }\r\n  }\r\n  setType(type){\r\n    this.Type = type;\r\n  }\r\n  setNoteInput(note, time) {\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyNoteSet.push(note);\r\n      this.melodyTimeset.push([time, -1]);\r\n      this.melodyNoteId +=1;\r\n    }\r\n    else{\r\n      alert(\"This Cilp type is Melody\");\r\n    }\r\n  }\r\n  setNoteRelease(note, time) {\r\n    if(this.Type==MusicClipType.Melody){\r\n      for (let i = this.melodyNoteSet.length - 1; i >= 0; i--) {\r\n        if (this.melodyNoteSet[i] === note) {\r\n          if(this.melodyTimeset[i][1] == -1){\r\n            this.melodyTimeset[i][1] = time;\r\n            break;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      alert(\"This Cilp type is Melody\");\r\n    }\r\n  }\r\n  setBeatInput(pad_id, time) {\r\n    if(this.Type==MusicClipType.Beat){\r\n      this.beatSet.push(pad_id);\r\n      this.beatTime.push(time);\r\n      this.beatSetId+=1;\r\n    }\r\n    else{\r\n      alert(\"This Clip type is Beat\");\r\n    }\r\n  }\r\n  setDuration(duration){\r\n    this.duration = duration;\r\n  }\r\n  setInstrument(instrument_id){\r\n    this.instrument_id = instrument_id;\r\n  }\r\n  setLyrics(lyric, timeset){\r\n    this.lyricSet.push(lyric);\r\n    this.lyrictimeSet.push(timeset);\r\n    this.lyricId += 1;\r\n    this.lyricsVideoId.push(-1);\r\n  }\r\n  setLyricsVideo(lyricsId, vidoeId){\r\n    this.lyricsVideoId[lyricsId] = vidoeId;\r\n  }\r\n  editNote(noteIndex, deltaTimeset){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyTimeset[noteIndex][0] += deltaTimeset[0];\r\n      this.melodyTimeset[noteIndex][1] += deltaTimeset[1];\r\n    }\r\n    else{\r\n      this.beatTime[noteIndex] += deltaTimeset[0];\r\n    }\r\n  }\r\n  editLyrics(lyricid, deltaTimeset){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyrictimeSet[lyricid][0] += deltaTimeset[0];\r\n      this.lyrictimeSet[lyricid][1] += deltaTimeset[1];\r\n    }\r\n  }\r\n  deleteNote(noteIndex){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyNoteSet.splice(noteIndex,1);\r\n      this.melodyTimeset.splice(noteIndex,1);\r\n    }\r\n    else{\r\n      this.beatSet.splice(noteIndex,1);\r\n      this.beatTime.splice(noteIndex,1);\r\n    }\r\n  }\r\n  deletelyric(lyricId){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyricSet.splice(lyricId,1);\r\n      this.lyrictimeSet.splice(lyricId,1);\r\n      this.lyricsVideoId.push(lyricId,1);\r\n    }\r\n  }\r\n  dleteAlllyric(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyricSet =[];\r\n      this.lyrictimeSet=[];\r\n      this.lyricId = 0;\r\n      this.lyricsVideoId = [];\r\n    }\r\n  }\r\n  getClipLastTime(){\r\n    let lastTime = 1;\r\n    if(this.Type == MusicClipType.Melody){\r\n      for(let i=0; i<this.melodyTimeset.length; i++){\r\n        if(lastTime < this.melodyTimeset[i][1]){\r\n          lastTime = this.melodyTimeset[i][1]\r\n        }\r\n      }\r\n      for(let i=0; i<this.lyrictimeSet.length; i++){\r\n        if(lastTime < this.lyrictimeSet[i][1]){\r\n          lastTime = this.lyrictimeSet[i][1]\r\n        }\r\n      }\r\n      return lastTime\r\n    }\r\n    else{\r\n      for(let i=0; i<this.beatTime.length; i++){\r\n        if(lastTime < this.beatTime[i]){\r\n          lastTime = this.beatTime[i]\r\n        }\r\n      }\r\n      return lastTime\r\n    }\r\n  }\r\n  getLyricsVideoId(lyricsId){\r\n    return this.lyricsVideoId[lyricsId];\r\n  }\r\n  getClipId(){\r\n    return this.Clip_id;\r\n  }\r\n  getClipType(){\r\n    return this.Type;\r\n  }\r\n  getDuration(){\r\n    return parseFloat(this.duration);\r\n  }\r\n  getNoteIndex(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      return this.melodyNoteId;\r\n    }\r\n    else{\r\n      return this.beatSetId;\r\n    }\r\n  }\r\n  getLyricsIndex(){\r\n    return this.lyricId;\r\n  }\r\n  getMusicClip(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      return [this.melodyNoteSet, this.melodyTimeset]\r\n    }\r\n    else{\r\n      return [this.beatSet, this.beatTime]\r\n    }\r\n  }\r\n\r\n  getcurrentNoteSet(currentTime){\r\n    const noteSet = []\r\n    if(this.Type==MusicClipType.Melody){\r\n      //return [this.melodyNoteSet, this.melodyTimeset]\r\n      for (let i = 0; i < this.melodyTimeset.length; i++) {\r\n        if (this.melodyTimeset[i][0] <= currentTime && currentTime < this.melodyTimeset[i][1]) {\r\n          noteSet.push(this.melodyNoteSet[i]);\r\n        }\r\n      }\r\n      return noteSet;\r\n    }\r\n    else{\r\n      //return [this.beatSet, this.beatTime]\r\n      for (let i = 0; i < this.beatTime.length; i++) {\r\n        if (this.beatTime[i] - 1/60 <= currentTime && currentTime < this.beatTime[i] + 1/60) {\r\n          noteSet.push(this.beatSet[i]);\r\n        }\r\n      }\r\n      return noteSet;\r\n    }\r\n  }\r\n\r\n  getLyrics(currentTime){\r\n    //console.log(this.lyricSet, this.lyrictimeSet)\r\n    for (let i = 0; i < this.lyrictimeSet.length; i++) {\r\n      if (this.lyrictimeSet[i][0] <= currentTime && currentTime < this.lyrictimeSet[i][1]) {\r\n        return [this.lyricSet[i], i];\r\n      }\r\n    }\r\n    return [\"\", -1];\r\n  }\r\n  getLyricsTimeset(lyricsId){\r\n    if (lyricsId < this.lyrictimeSet.length && lyricsId >= 0 ){ \r\n      return [this.lyrictimeSet[lyricsId][0], this.lyrictimeSet[lyricsId][1]];\r\n    }\r\n    else{\r\n      return [null, null]\r\n    }\r\n  }\r\n  getLyricsLastTime(){\r\n    let lastTime = 0;\r\n    if(this.Type == MusicClipType.Melody){\r\n      for(let i=0; i<this.lyrictimeSet.length; i++){\r\n        if(lastTime < this.lyrictimeSet[i][1]){\r\n          lastTime = this.lyrictimeSet[i][1]\r\n        }\r\n      }\r\n    }\r\n    return lastTime\r\n  }\r\n  getLyricsText(lyricsId){\r\n    return this.lyricSet[lyricsId];\r\n  }\r\n  getAllLyrics(){\r\n    return [this.lyricSet, this.lyrictimeSet, this.lyricsVideoId];\r\n  }\r\n}\r\n\r\nclass MusicTrack{\r\n  constructor (userId = 0, id_set = [[],[],[]], time_set = [[], [], []]){\r\n    this.userId = userId;\r\n\r\n    this.TemplateIdClip = id_set[0];\r\n    this.MelodyClipIdList = id_set[1];\r\n    this.BeatClipIdList = id_set[2];\r\n\r\n    this.TemplateTimeset = time_set[0];\r\n    this.MelodyTimeset = time_set[1];\r\n    this.BeatTimeset = time_set[2];\r\n  }\r\n  setMusicClip(musicClip, clipTime){\r\n    if(musicClip.getClipType() == MusicClipType.Melody){\r\n      this.MelodyClipIdList.push(musicClip.getClipId());\r\n      let duration = parseFloat(musicClip.getDuration());\r\n      this.MelodyTimeset.push([clipTime, clipTime + duration]);\r\n      console.log(\"Add Melody box\", this.MelodyClipIdList);\r\n    }\r\n    else{\r\n      this.BeatClipIdList.push(musicClip.getClipId());\r\n      let duration = parseFloat(musicClip.getDuration());\r\n      this.BeatTimeset.push([clipTime, clipTime + duration]);\r\n      console.log(\"Add Beat box\", this.BeatClipIdList);\r\n    }\r\n  }\r\n  setTemplateClip(templateId, clipTime){  //지금 코드가 조금 꼬여서 임의로 Template은 30초 길이로 고정\r\n    this.TemplateIdClip.push(templateId);\r\n    this.TemplateTimeset.push([clipTime, clipTime + 30]);\r\n    console.log(\"Add Template box\", this.TemplateIdClip);\r\n  }\r\n  editMusicClip(type, clip_id, deltaTime){\r\n    if(type == MusicClipType.Melody){\r\n      this.MelodyTimeset[clip_id][0] += deltaTime;\r\n      this.MelodyTimeset[clip_id][1] += deltaTime;\r\n    }\r\n    else{\r\n      this.BeatTimeset[clip_id][0] += deltaTime;\r\n      this.BeatTimeset[clip_id][1] += deltaTime;\r\n    }\r\n  }\r\n  getTempalateId(){\r\n    return this.TemplateIdClip.length;\r\n  }\r\n  getMelodyId(){\r\n    return this.MelodyClipIdList.length;\r\n  }\r\n  getBeatId(){\r\n    return this.BeatClipIdList.length;\r\n  }\r\n  getcurrentClipSet(currentTime){\r\n    const Meldoy_set = []\r\n    const Beat_set = []\r\n    const Template_set = []\r\n    //console.log(this.BeatTimeset);\r\n    for (let i = 0; i < this.TemplateTimeset.length; i++) {\r\n      if (this.TemplateTimeset[i][0] <= currentTime && currentTime < this.TemplateTimeset[i][1]) {\r\n        Template_set.push(this.TemplateTimeset[i][0]);  // 시간이 먼저\r\n        Template_set.push(this.TemplateIdClip[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.MelodyTimeset.length; i++) {\r\n      if (this.MelodyTimeset[i][0] <= currentTime && currentTime < this.MelodyTimeset[i][1]) {\r\n        Meldoy_set.push(this.MelodyTimeset[i][0]);\r\n        Meldoy_set.push(this.MelodyClipIdList[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.BeatTimeset.length; i++) {\r\n      if (this.BeatTimeset[i][0] <= currentTime && currentTime < this.BeatTimeset[i][1]) {\r\n        Beat_set.push(this.BeatTimeset[i][0]);\r\n        Beat_set.push(this.BeatClipIdList[i]);\r\n      }\r\n    }\r\n    return [Template_set, Meldoy_set, Beat_set];  //순서는 항상 Template, Melody, Beat로 고정\r\n  }\r\n  getUserId(){\r\n    return this.userId;\r\n  }\r\n  getIdData(){\r\n    return [this.TemplateIdClip, this.MelodyClipIdList, this.BeatClipIdList]\r\n  }\r\n  getTimeData(){\r\n    return [this.TemplateTimeset, this.MelodyTimeset, this.BeatTimeset]\r\n  }\r\n  getTemplateSet(){\r\n    return [this.TemplateIdClip, this.TemplateTimeset]\r\n  }\r\n  getMelodySet(){\r\n    return [this.MelodyClipIdList, this.MelodyTimeset]\r\n  }\r\n  getBeatSet(){\r\n    return [this.BeatClipIdList, this.BeatTimeset]\r\n  }\r\n  deleteClip(clipType, clipIndex){\r\n    console.log(\"delete Track\", clipType, clipIndex);\r\n    if(clipType != null){\r\n      if(clipType == MusicClipType.Template){\r\n        this.TemplateIdClip.splice(clipIndex,1)\r\n        this.TemplateTimeset.splice(clipIndex,1)\r\n      }\r\n      else if(clipType == MusicClipType.Melody){\r\n        this.MelodyClipIdList.splice(clipIndex,1)\r\n        this.MelodyTimeset.splice(clipIndex,1)\r\n      }\r\n      else{\r\n        this.BeatClipIdList.splice(clipIndex,1)\r\n        this.BeatTimeset.splice(clipIndex,1)\r\n      }\r\n    }\r\n  }\r\n  getLastClipData(clipType){\r\n    if(clipType == MusicClipType.Melody){\r\n      let index = this.MelodyClipIdList.length-1\r\n      if(index != -1){\r\n        return [this.MelodyClipIdList[index], this.MelodyTimeset[index]]\r\n      }\r\n      else{\r\n        return [null, 0]\r\n      }\r\n    }\r\n    else if(clipType == MusicClipType.Beat){\r\n      let index = this.BeatClipIdList.length-1\r\n      if(index != -1){\r\n        return [this.BeatClipIdList[index], this.BeatTimeset[index]]\r\n      }\r\n      else{\r\n        return [null, 0]\r\n      }\r\n    }\r\n    else{\r\n      return [null, 0]\r\n    }\r\n  }\r\n  // setMusicClip(Melody_clip_array){  //Track의 Clip 정리 코드\r\n  //   const MaxId = Math.max.apply(null, this.MelodyClipIdList);\r\n  // }\r\n  // setBeatClip(Beat_clip_array){  //Track의 Clip 정리 코드\r\n  //   const MaxId = Math.max.apply(null, this.BeatClipIdList);\r\n  // }\r\n  // saveTrack(){\r\n  //   console.log(\"save the Music Track\");\r\n  // }\r\n}\n\n//# sourceURL=webpack://Synthesizer/./src/js/Share.js?");

/***/ }),

/***/ "./src/js/SheetMusic.js":
/*!******************************!*\
  !*** ./src/js/SheetMusic.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Share_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Share.js */ \"./src/js/Share.js\");\n/* harmony import */ var _Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Synthesizer.js */ \"./src/js/Synthesizer.js\");\n/* harmony import */ var _jsmidgen_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsmidgen.js */ \"./src/js/jsmidgen.js\");\n/* harmony import */ var _jsmidgen_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jsmidgen_js__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n//import * as JZZ from \"./JZZ.js\"\r\n\r\n//최소 범위 A2 ~ C7\r\n\r\nlet nowClicked;\r\nlet previousClicked;\r\nlet clickCount = 0;\r\nlet clickedHistory = [];\r\n\r\n\r\nlet nowVideoClicked;\r\nlet previousVideoClicked;\r\nlet clickVideoCount = 0;\r\nlet clickedVideoHistory = [];\r\n\r\nconst fps = 30;\r\nlet currentTime = 0.0;\r\nlet currentTrackTime = 0.0;\r\nlet play_state = false;\r\nlet play_state_track = false;\r\nlet timer = null;\r\nlet duration = document.getElementById(\"clipduration\").value;\r\nlet duration_track = document.getElementById(\"trackduration\").value;\r\n\r\nlet clipduration = document.getElementById(\"clipduration\");\r\nlet timeLine1 = document.getElementById(\"timeLine1\");\r\nlet timeLine2 = document.getElementById(\"timeLine2\");\r\nlet timeLine3 = document.getElementById(\"timeLine3\");\r\nlet FileInput = document.getElementById(\"fileUpload\");\r\n\r\nconst Template_clip_array = [];\r\nconst Melody_clip_array = [];\r\nconst Beat_clip_array = [];\r\n\r\nlet current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Mood;\r\nlet melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration);\r\nlet beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration);\r\nlet template_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.TemplateClip(Template_clip_array.length, duration_track);\r\ntemplateConnectToVisualAndSound(template_clip);\r\nlet onNoteList = [];\r\nlet previousNote = [];\r\nlet previousNote_track = [];\r\nlet TrackObject = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicTrack(duration_track);\r\nlet videoObject = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.VideoClip();\r\nlet previousDial_ID = -1;\r\nlet doubleChecker = 0 //Webpack double Event error catcher\r\nlet trackActivaqte = false;\r\nlet noteClickIndex = -1;\r\nlet trackClickIndex = -1;\r\nlet trackClickType = null\r\nconst clip_box_width = 1810;\r\nconst clip_start_px = 80;\r\nconst track_box_width = 700;\r\n\r\nlet lyricsId = 0;\r\n\r\nlet bpmPlayNumber = 0;\r\n\r\nconst userName = document.getElementById(\"userName\").innerHTML\r\nconst userEmail = document.getElementById(\"userEmail\").innerHTML\r\nconst musicId = parseInt(document.getElementById(\"musicType\").innerHTML);\r\n\r\ndocument.getElementById(\"synthConnector\").click();\r\n\r\nconst videoRecordCanvas = document.getElementById(\"videoRecordCanvas\");\r\nlet videoCheckCanvas = document.getElementById(\"videoCheckCanvas\");\r\n\r\n\r\n//---------------------------무드 데이터 수집용-------------------------//\r\n\r\nlet currentMoodName = \"blur\";\r\nlet backgroundColor = document.getElementById(\"backgroundColorID\").value;\r\nlet objectColor = document.getElementById(\"objectColor1ID\").value;\r\nlet speedFeature = document.getElementById(\"speedID\").value;\r\nlet zoomFeature = document.getElementById(\"zoomID\").value;\r\nlet sizeFeature = document.getElementById(\"sizeID\").value;\r\nlet velocityFeature = document.getElementById(\"velocityID\").value;\r\n\r\ndocument.getElementById('thema_clouds').addEventListener(\"click\", function(){currentMoodName = \"cloud\"});\r\ndocument.getElementById('thema_blur').addEventListener(\"click\", function(){currentMoodName = \"blur\"});\r\ndocument.getElementById('thema_fog').addEventListener(\"click\", function(){currentMoodName = \"fog\"});\r\ndocument.getElementById('thema_halo').addEventListener(\"click\", function(){currentMoodName = \"halo\"});\r\ndocument.getElementById('thema_cells').addEventListener(\"click\", function(){currentMoodName = \"cells\"});\r\ndocument.getElementById('thema_none').addEventListener(\"click\", function(){currentMoodName = \"none\"});\r\n\r\n\r\n// 색상 저장 버튼\r\ndocument.getElementById('backgroundColorSaveButton').addEventListener(\"click\", function(){\r\n  backgroundColor = document.getElementById(\"backgroundColorID\").value;\r\n});\r\ndocument.getElementById('objectColor1SaveButton').addEventListener(\"click\", function(){\r\n  objectColor = document.getElementById(\"objectColor1ID\").value;\r\n});\r\n\r\n\r\n// 추가 요소 저장 버튼\r\ndocument.getElementById('speedSaveButton').addEventListener(\"click\", function(){\r\n  speedFeature = document.getElementById(\"speedID\").value;\r\n});\r\ndocument.getElementById('zoomSaveButton').addEventListener(\"click\", function(){\r\n  zoomFeature = document.getElementById(\"zoomID\").value;\r\n});\r\ndocument.getElementById('sizeSaveButton').addEventListener(\"click\", function(){\r\n  sizeFeature = document.getElementById(\"sizeID\").value;\r\n});\r\ndocument.getElementById('velocitySaveButton').addEventListener(\"click\", function(){\r\n  velocityFeature = document.getElementById(\"velocityID\").value;\r\n});\r\n\r\nfunction saveMood(){\r\n  let MoodDataObject = {\r\n    \"MoodName\":currentMoodName,\r\n    \"backgroundColor\":backgroundColor,\r\n    \"objectColor\":objectColor,\r\n    \"speedFeature\":speedFeature,\r\n    \"zoomFeature\":zoomFeature,\r\n    \"sizeFeature\":sizeFeature,\r\n    \"velocityFeature\":velocityFeature\r\n  }\r\n  console.log(\"MoodDataSave\")\r\n  console.log(MoodDataObject)\r\n  downloadJsonFile(userName + \"_Moodlog\", MoodDataObject);\r\n}\r\n\r\n\r\n\r\ndocument.getElementById(\"PreviousButton\").addEventListener(\"click\", function(){\r\n  console.log(\"previous check\")\r\n  stopRecording();\r\n  stopAllNotePlayer();\r\n  play_state = false;\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Mood){\r\n    console.log('to Login')\r\n    document.getElementById(\"loginPage\").click();\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    moodTypeSceneChanger();\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    beatTypeSceneChanger();\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    melodyTypeSceneChanger();\r\n  }\r\n  else{\r\n    lyricsTypeSceneChanger();\r\n  }\r\n  // else{\r\n  //   templateTypeSceneChanger();\r\n  // }\r\n})\r\n\r\ndocument.getElementById(\"NextButton\").addEventListener(\"click\", function(){\r\n  stopRecording();\r\n  stopAllNotePlayer();\r\n  play_state = false;\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Mood){\r\n    beatTypeSceneChanger();\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    melodyTypeSceneChanger();\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    lyricsTypeSceneChanger();\r\n  }\r\n  // else if(current_clip_type == MusicClipType.Lyrics){\r\n  //   templateTypeSceneChanger();\r\n  // }\r\n  else{\r\n    totalTypeSceneChanger();\r\n  }\r\n})\r\nfunction moodTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Mood;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Mood\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"block\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"none\";\r\n  document.getElementById(\"trackContainer\").style.display = \"none\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"block\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'none';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'none';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'none';\r\n}\r\nfunction beatTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Beat\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"none\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"block\";\r\n  document.getElementById(\"trackContainer\").style.display = \"block\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"none\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'block';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'none';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'none';\r\n  initializeTimer();\r\n}\r\nfunction melodyTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Melody\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"none\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"block\";\r\n  document.getElementById(\"trackContainer\").style.display = \"block\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"none\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'none';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'block';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'none';\r\n\r\n  document.getElementById(\"noteBoxContainer\").style.display = 'block';\r\n  document.getElementById(\"timeLineContainer\").style.display = 'block';\r\n  document.getElementById(\"lyricsVideoContainer\").style.display = 'none';\r\n  initializeTimer();\r\n}\r\nfunction lyricsTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Lyrics\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"none\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"block\";\r\n  document.getElementById(\"trackContainer\").style.display = \"block\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"none\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'none';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'block';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'none';\r\n\r\n  document.getElementById(\"noteBoxContainer\").style.display = 'none'\r\n  document.getElementById(\"timeLineContainer\").style.display = 'none';\r\n  document.getElementById(\"lyricsVideoContainer\").style.display = 'block';\r\n\r\n\r\n  document.getElementById(\"trackText\").style.display = 'block';\r\n  document.getElementById(\"timeLine3\").style.display = 'block';\r\n  document.getElementById(\"trackMusicDeleteButton\").disabled = false;\r\n  document.getElementById(\"trackClipCreateButton\").disabled = false;\r\n  document.getElementById(\"TrackContainer\").style.display = 'block';\r\n  document.getElementById(\"clipEditContainer\").style.display = 'block';\r\n  document.getElementById(\"videoCheckCanvas2\").style.display = 'none';\r\n\r\n  videoCheckCanvas = document.getElementById(\"videoCheckCanvas\");\r\n\r\n  initializeTimer();\r\n}\r\nfunction templateTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Template;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Template\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"none\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"block\";\r\n  document.getElementById(\"trackContainer\").style.display = \"block\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"none\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'none';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'none';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'block';\r\n\r\n  document.getElementById(\"trackText\").style.display = 'block';\r\n  document.getElementById(\"timeLine3\").style.display = 'block';\r\n  document.getElementById(\"trackMusicDeleteButton\").disabled = false;\r\n  document.getElementById(\"trackClipCreateButton\").disabled = false;\r\n  document.getElementById(\"TrackContainer\").style.display = 'block';\r\n  document.getElementById(\"clipEditContainer\").style.display = 'block';\r\n  document.getElementById(\"videoCheckCanvas2\").style.display = 'none';\r\n\r\n  videoCheckCanvas = document.getElementById(\"videoCheckCanvas\");\r\n}\r\nfunction totalTypeSceneChanger(){\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Total;\r\n  noteClickIndex = -1;\r\n  console.log(\"to Total\", current_clip_type);\r\n  document.getElementById(\"moodContainer\").style.display = \"none\";\r\n  document.getElementById(\"sheetMusicController\").style.display = \"none\";\r\n  document.getElementById(\"trackContainer\").style.display = \"block\";\r\n  document.getElementById(\"ThemaContainer\").style.display = \"none\";\r\n  document.getElementById(\"BeatContainer\").style.display = 'none';\r\n  document.getElementById(\"MelodyContainer\").style.display = 'none';\r\n  document.getElementById(\"TemplateContainer\").style.display = 'none';\r\n\r\n  document.getElementById(\"trackText\").style.display = 'none';\r\n  document.getElementById(\"timeLine3\").style.display = 'none';\r\n  document.getElementById(\"trackMusicDeleteButton\").disabled = true;\r\n  document.getElementById(\"trackClipCreateButton\").disabled = true;\r\n  document.getElementById(\"TrackContainer\").style.display = 'none';\r\n  document.getElementById(\"clipEditContainer\").style.display = 'none';\r\n  document.getElementById(\"videoCheckCanvas2\").style.display = 'block';\r\n\r\n\r\n  document.getElementById(\"shape-canvas\").style.width = '960px';\r\n  document.getElementById(\"shape-canvas\").style.height = '580px';\r\n  document.getElementById(\"shape-canvas\").style.marginTop = '300px'\r\n\r\n  document.getElementById(\"trackContainer\").style.width = '900px'\r\n  document.getElementById(\"trackContainer\").style.height = '620px'\r\n\r\n  document.getElementById(\"trackContainer\").style.marginTop = '-620px'\r\n  document.getElementById(\"slider_track\").style.width = '720px';\r\n  document.getElementById(\"slider_track\").style.marginLeft = '70px';\r\n  document.getElementById('trackMusicPlayButton').style.marginLeft = '580px';\r\n  document.getElementById('trackMusicDeleteButton').style.display = 'none';\r\n  document.getElementById('trackClipCreateButton').style.display = 'none';\r\n\r\n  videoCheckCanvas = document.getElementById(\"videoCheckCanvas2\");\r\n  videoCheckCanvas.style.width = '750px';\r\n  videoCheckCanvas.style.height = '510px';\r\n  videoCheckCanvas.style.marginTop = '10px';\r\n  videoCheckCanvas.style.marginLeft = '60px';\r\n}\r\n/*------------------------------단축키 코드 관련 코드--------------------------------*/\r\ndocument.addEventListener('keyup', function(event) {\r\n  if (event.defaultPrevented) {\r\n    return;\r\n  }\r\n  switch (event.key) {\r\n    case 'Enter':\r\n      console.log(\"Enter\")\r\n      if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n        document.getElementById(\"LyricsPushButton\").click();\r\n      }\r\n      break;\r\n    case ' ':\r\n      if (event.shiftKey) { \r\n        console.log(\"Shift+space\")\r\n        if(!play_state_track){\r\n          document.getElementById(\"trackMusicPlayButton\").click();\r\n        }\r\n        else{\r\n          document.getElementById(\"trackMusicPauseButton\").click();\r\n        }\r\n      } \r\n      else {\r\n        console.log(\"space\")\r\n        if(!play_state){\r\n          document.getElementById(\"sheetMusicPlayButton\").click();\r\n        }\r\n        else{\r\n          document.getElementById(\"sheetMusicPauseButton\").click();\r\n        }\r\n      }\r\n      break;\r\n    case 's':\r\n      if(event.ctrlKey){\r\n        document.getElementById(\"sheetMusicSaveButton\").click();\r\n      }\r\n      break;\r\n    case 'q':\r\n      if(event.ctrlKey){\r\n        document.getElementById(\"synthInitialize\").click();\r\n        console.log(\"initial synth\")\r\n      }\r\n      break;\r\n    case 'ArrowLeft':\r\n      console.log(\"Left\")\r\n      document.getElementById(\"PreviousButton\").click();\r\n      break;\r\n    case 'ArrowRight':\r\n      console.log(\"right\")\r\n      document.getElementById(\"NextButton\").click();\r\n      break;\r\n    case \"Backspace\":\r\n      if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n        document.getElementById(\"sheetMusicDeleteButton\").click();\r\n      }\r\n      break\r\n    case \"Delete\":\r\n      if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n        document.getElementById(\"sheetMusicDeleteButton\").click();\r\n      }\r\n      break\r\n    default:\r\n      return;\r\n  }\r\n\r\n  event.preventDefault();\r\n}, true);\r\n\r\n/*------------------------------녹화용 코드 관련 코드--------------------------------*/\r\nlet mediaRecorder = null;\r\nlet videoId = 0;\r\nvideoCheckCanvas.autoplay = false;\r\nlet chunck = [];\r\nfunction videoRecordingMode(recordingState){\r\n  if(recordingState){\r\n    videoRecordCanvas.style.display = \"block\"\r\n    videoCheckCanvas.style.display = \"none\"\r\n  }\r\n  else{\r\n    videoRecordCanvas.style.display = \"none\"\r\n    videoCheckCanvas.style.display = \"block\"\r\n  }\r\n}\r\n\r\ndocument.getElementById(\"recordStartButton\").addEventListener(\"click\", function(){\r\n  let timeElapsed = 4;\r\n  const intervalId = setInterval( function() {\r\n    timeElapsed--;\r\n    console.log(`${timeElapsed}초 뒤에 함수가 실행됩니다.`);\r\n    document.getElementById(\"videoWaitTime\").innerHTML = `${timeElapsed}초 뒤에 녹화 시작.`;\r\n    if (timeElapsed <= 0) {\r\n      document.getElementById(\"videoWaitTime\").innerHTML = '';\r\n      videoRecordingStart()\r\n      clearInterval(intervalId);\r\n    }\r\n  }, 1000);\r\n});\r\n\r\nasync function videoRecordingStart(){\r\n  videoRecordingMode(true);\r\n  let vidoeDuration = 0;\r\n  let startDate = 0;\r\n  let waitTime = 3;\r\n  let recordingState = false\r\n  const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n    audio: false,\r\n    video: true\r\n  });\r\n  videoRecordCanvas.srcObject = mediaStream;\r\n  videoRecordCanvas.onloadedmetadata = (event)=>{\r\n    videoRecordCanvas.play();\r\n    console.log(\"recording Start\");\r\n    vidoeDuration = 0\r\n    startDate = Date.now();\r\n  }\r\n  mediaRecorder = new MediaRecorder(mediaStream);\r\n  mediaRecorder.ondataavailable = (event)=>{\r\n    chunck.push(event.data);\r\n  }\r\n  mediaRecorder.onstop = (event)=>{\r\n    // 배열에 담아둔 녹화 데이터들을 통합한 Blob객체 생성\r\n    vidoeDuration = (Date.now() - startDate)/1000\r\n    console.log(\"recording Stop : \");\r\n    console.log(\"video Duration :\", vidoeDuration);\r\n    let videoBlob = new Blob(chunck, { type: 'video/webm' });\r\n    videoObject.setVideo(videoId, videoBlob, vidoeDuration);\r\n    // BlobURL(ObjectURL) 생성\r\n    const blobURL = window.URL.createObjectURL(videoBlob);\r\n    // 녹화된 영상 재생: \r\n    videoCheckCanvas.src = blobURL;\r\n    videoCheckCanvas.play();\r\n    // 기존 녹화 데이터 제거\r\n    chunck.splice(0);\r\n    createVideoClipObject(videoId)\r\n    videoId +=1;\r\n    console.log(videoObject);\r\n  }\r\n  mediaRecorder.start();\r\n}\r\n\r\n\r\n\r\n\r\ndocument.getElementById(\"recordStopButton\").addEventListener(\"click\", function(){\r\n  // 녹화 종료!\r\n  videoRecordingMode(false);\r\n  mediaRecorder.stop();\r\n})\r\nfunction loadVideoClip(videoId, playDuration = null){\r\n  videoRecordingMode(false);\r\n  let videoData = videoObject.getVideoData(videoId);\r\n  let videoDuration = videoObject.getVideoDuration(videoId);\r\n  if (videoData instanceof Blob){\r\n    let url = window.URL.createObjectURL(videoData);\r\n    videoCheckCanvas.src = url;\r\n    videoCheckCanvas.play();\r\n    if(playDuration != null && playDuration > 0){\r\n      console.log(\"play rate :\", videoDuration / playDuration);\r\n      videoCheckCanvas.playbackRate  = videoDuration / playDuration;\r\n    }\r\n    else{\r\n      videoCheckCanvas.playbackRate  = 1.0\r\n    }\r\n  }\r\n  else{\r\n    console.error('The element at this index is not a Blob')\r\n  }\r\n}\r\nfunction setViodeTime(setTime, playbackRate){\r\n  let videoTime = setTime * playbackRate;\r\n  if(Math.abs(videoCheckCanvas.currentTime - videoTime) > 0.4){\r\n    console.log(\"setting video Time : \", videoCheckCanvas.currentTime, videoTime)\r\n    videoCheckCanvas.currentTime = videoTime;\r\n  }\r\n}\r\nfunction pauseVideo(){\r\n  videoCheckCanvas.pause();\r\n}\r\n\r\n\r\nfunction videoDownload(blob, id, duration){\r\n  const url = window.URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  let fileName = userName + \"_\" + id + \"_\" + parseInt(duration)\r\n  a.style.display = 'none';\r\n  a.href = url;\r\n  a.download = fileName;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n\r\n  setTimeout(() => {\r\n    document.body.removeChild(a);\r\n    window.URL.revokeObjectURL(url);\r\n  }, 100);\r\n}\r\n\r\n\r\n//video Clip Object 생성용 코드(melody, Beat용)\r\nfunction createVideoClipObject(videoCLipId){\r\n  const videoIdClip = document.createElement(\"div\");\r\n  videoIdClip.classList.add(\"Video_clip\");\r\n  videoIdClip.style.width = '200px'\r\n  videoIdClip.style.backgroundColor = getColor(videoCLipId)\r\n  videoIdClip.textContent = \"수어 \" + (videoCLipId + 1); \r\n  let boxItem = document.getElementById(\"VideoClipContainer\");\r\n  videoIdClip.setAttribute(\"Video_Cilp_id\", videoCLipId); // clip_id 속성 추가\r\n\r\n  videoIdClip.setAttribute('id', \"video\" + videoCLipId); // 색상 바꾸는 용도\r\n\r\n\r\n\r\n  videoIdClip.addEventListener(\"click\", function(){\r\n    console.log(\"videoClipId:\", videoIdClip.getAttribute(\"Video_Cilp_id\"));\r\n    if(videoCLipId != -1){\r\n      loadVideoClip(videoIdClip.getAttribute(\"Video_Cilp_id\"));\r\n    }\r\n    if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n      document.getElementById('lyricsVideo').innerHTML = videoIdClip.textContent;\r\n    }\r\n  })\r\n\r\n  // 여기임당\r\n\r\n  videoIdClip.addEventListener(\"click\", function (){\r\n    clickVideoCount += 1;\r\n    console.log(videoIdClip.id);\r\n    clickedVideoHistory.push(videoIdClip.id) // 아이디 히스토리 리스트로 넣기\r\n\r\n    // clickedHistory[-2] != clickedHistory[-1]\r\n    if (clickedVideoHistory.length == 1){     // 하나만 들어왔을 시\r\n      // console.log('히스토리', clickedHistory);\r\n      nowVideoClicked = document.getElementById(clickedVideoHistory[0]);\r\n      console.log('요거', nowVideoClicked)\r\n      nowVideoClicked.style.borderWidth = '0.5em'\r\n    }\r\n\r\n    // 두개 이상 들어왔을 시\r\n    else if (clickedVideoHistory.length > 1 && clickedVideoHistory[clickedVideoHistory.length - 1] != clickedVideoHistory[clickedVideoHistory.length - 2]){\r\n      nowVideoClicked = document.getElementById(clickedVideoHistory[clickedVideoHistory.length - 1]);\r\n      previousVideoClicked = document.getElementById(clickedVideoHistory[clickedVideoHistory.length - 2])\r\n\r\n      nowVideoClicked.style.borderWidth = '0.5em'\r\n      previousVideoClicked.style.borderWidth = ''\r\n      \r\n    }})\r\n  boxItem.appendChild(videoIdClip);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ndocument.getElementById(\"lyricsSettingButton\").addEventListener(\"click\", function(){\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    let lyricsText = document.getElementById('lyricsVideo').innerHTML;\r\n    if(noteClickIndex != -1){\r\n      console.log(\"current lyrics id :\", noteClickIndex, \"video id :\", parseInt(lyricsText.substr(2))-1);\r\n      alert(\"자막(\" + melody_clip.getLyricsText(noteClickIndex) +\")과 영상 (\"+lyricsText +\")이 연결되었습니다.\")\r\n      melody_clip.setLyricsVideo(noteClickIndex, parseInt(lyricsText.substr(2))-1)\r\n    }\r\n  }\r\n})\r\n\r\nlet previousLyricsIndex  = null;\r\nfunction playVideoControl(currentTime, lyricsIndex){\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics  || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Total){\r\n    let videoId = melody_clip.getLyricsVideoId(lyricsIndex);\r\n    if(lyricsIndex != -1 && videoId != -1){\r\n      let [startTime, lastTime] = melody_clip.getLyricsTimeset(lyricsIndex);\r\n      let videoDuration = videoObject.getVideoDuration(videoId);\r\n      //console.log(\"time:\", currentTime - startTime, \"VideoId\", videoId);\r\n      if(lyricsIndex != -1 && previousLyricsIndex != lyricsIndex){\r\n        let videoData = videoObject.getVideoData(videoId);\r\n        if (videoData instanceof Blob){\r\n          let url = window.URL.createObjectURL(videoData);\r\n          videoCheckCanvas.src = url;\r\n          let playDuration = lastTime - startTime;\r\n          console.log(\"check\", playDuration, startTime, lastTime);\r\n          if(playDuration != null && playDuration > 0){\r\n            videoCheckCanvas.playbackRate  = videoDuration / playDuration;\r\n            console.log(\"rate Change\", videoDuration / playDuration)\r\n          }\r\n          else{\r\n            videoCheckCanvas.playbackRate  = 1.0;\r\n          }\r\n        }\r\n        previousLyricsIndex = lyricsIndex;\r\n      }\r\n      //if(videoCheckCanvas.paused){\r\n      //  videoCheckCanvas.play();\r\n      //}\r\n      setViodeTime(currentTime - startTime, videoDuration/(lastTime - startTime))\r\n    }\r\n    // else{\r\n    //   if(!videoCheckCanvas.paused){\r\n    //     console.log(\"pause check\");\r\n    //     videoCheckCanvas.pause();\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*-----------------------------MIDI 파일 생성용 코드-----------------------------------------*/\r\n\r\nlet MidiEventTime = 0.0\r\nconst midiBPM = 120;\r\nconst midiBeatNote = [\"C\" ,\"D\", \"F\", \"A#\"]\r\nfunction generateMidi(miditype) {\r\n    var file = new _jsmidgen_js__WEBPACK_IMPORTED_MODULE_2__.File();\r\n    var track = new _jsmidgen_js__WEBPACK_IMPORTED_MODULE_2__.Track();\r\n\r\n    file.addTrack(track);\r\n    track.setTempo(midiBPM);\r\n    if(miditype == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      track.instrument(0, 0x03) // 피아노 악기로 설정\r\n    }\r\n    else{\r\n      track.instrument(0, 0x70) // 타악기로 설정\r\n    }\r\n    \r\n    MidiTrackMaker(track, miditype)\r\n\r\n    var midiData = file.toBytes();\r\n    var byteNumbers = new Array(midiData.length);\r\n    for (var i = 0; i < midiData.length; i++) {\r\n        byteNumbers[i] = midiData.charCodeAt(i);\r\n    }\r\n    var byteArray = new Uint8Array(byteNumbers);\r\n    var blob = new Blob([byteArray], {type: \"application/octet-stream\"});\r\n    var downloadLink = document.createElement('a');\r\n    downloadLink.href = window.URL.createObjectURL(blob);\r\n    downloadLink.download = userName + \"_\" + miditype + '_Midi.mid';\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n}\r\n\r\nfunction MidiTrackMaker(track, miditype){\r\n  for(let trackTimer = 0; trackTimer <duration_track; trackTimer += 1/fps){\r\n    let cur_track_set = TrackObject.getcurrentClipSet(trackTimer);\r\n    if(cur_track_set[1].length > 0 && miditype == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      MidiMelodyMaker(track, trackTimer, trackTimer - cur_track_set[1][0], Melody_clip_array[cur_track_set[1][1]]);\r\n    }\r\n    if(cur_track_set[2].length > 0 && miditype == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n      MidiBeatMaker(track, trackTimer, trackTimer - cur_track_set[2][0], Beat_clip_array[cur_track_set[2][1]]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction MidiMelodyMaker(track, currentTime, inputTime, melody_clip){\r\n  let currentNote = melody_clip.getcurrentNoteSet(inputTime);\r\n  MidiNoteAdditor(track, currentNote, previousNote_track, currentTime);\r\n  previousNote_track = melody_clip.getcurrentNoteSet(inputTime);\r\n}\r\nfunction MidiNoteAdditor(track, currentNote, previousNote, currentTime){ //피아노 음 재생 함수\r\n  //piano_player(currentNote[0], true);\r\n  if(currentTime < MidiEventTime){\r\n    MidiEventTime = 0.0;\r\n  }\r\n  var exclusiveArr1 = currentNote.filter(function(val) {\r\n    return previousNote.indexOf(val) === -1;\r\n  });\r\n  var exclusiveArr2 = previousNote.filter(function(val) {\r\n    return currentNote.indexOf(val) === -1;\r\n  });\r\n  if(exclusiveArr1.length > 0){\r\n    //console.log(\"Inpnut\", exclusiveArr1);\r\n    for( let note of exclusiveArr1){\r\n      track.noteOn(0, note, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"note ON\", note, parseInt((currentTime - MidiEventTime) * midiBPM * 2), currentTime)\r\n      MidiEventTime = currentTime\r\n    }  \r\n  }\r\n  if(exclusiveArr2.length > 0){\r\n    //console.log(\"Ouput \", exclusiveArr2);\r\n    for( let note of exclusiveArr2){\r\n      track.noteOff(0, note, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"note OFF\", note, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      MidiEventTime = currentTime\r\n    }  \r\n  }\r\n}\r\n\r\n\r\nfunction MidiBeatMaker(track, currentTime, inputTime, beat_clip){\r\n  let currentBeat = beat_clip.getcurrentNoteSet(inputTime);\r\n  if(currentTime < MidiEventTime){\r\n    console.log(\"MidiEventTimer reset\")\r\n    MidiEventTime = 0.0;\r\n  }\r\n  for (let beat of currentBeat){\r\n    if(beat == 0){\r\n      track.addNote(0, midiBeatNote[beat]+\"2\", 32, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"beat ON\",beat+1, parseInt((currentTime - MidiEventTime) * midiBPM * 2), currentTime)\r\n      MidiEventTime = currentTime\r\n    }\r\n    else if(beat == 1){\r\n      track.addNote(0, midiBeatNote[beat]+\"2\", 32, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"beat ON\",beat+1, parseInt((currentTime - MidiEventTime) * midiBPM * 2), currentTime)\r\n      MidiEventTime = currentTime\r\n    }\r\n    else if(beat == 2){\r\n      track.addNote(0, midiBeatNote[beat]+\"2\", 32, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"beat ON\",beat+1, parseInt((currentTime - MidiEventTime) * midiBPM * 2), currentTime)\r\n      MidiEventTime = currentTime\r\n    }\r\n    else{\r\n      track.addNote(0, midiBeatNote[beat]+\"2\", 32, parseInt((currentTime - MidiEventTime) * midiBPM * 2))\r\n      console.log(\"beat ON\",beat+1, parseInt((currentTime - MidiEventTime) * midiBPM * 2), currentTime)\r\n      MidiEventTime = currentTime\r\n    }\r\n   }\r\n}\r\n\r\n\r\n\r\n/*-----------------------------MIDI 파일 생성용 코드-----------------------------------------*/\r\n\r\n\r\n\r\nfunction InitializeAllSetting(){\r\n  currentTime = 0.0;\r\n  currentTrackTime = 0.0;\r\n  play_state = false;\r\n  play_state_track = false;\r\n  Template_clip_array.length = 0;\r\n  Melody_clip_array.length = 0;\r\n  Beat_clip_array.length = 0;\r\n  melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration);\r\n  beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration);\r\n  template_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.TemplateClip(Template_clip_array.length, duration_track);\r\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat;\r\n  onNoteList = [];\r\n  previousNote = [];\r\n  previousNote_track = [];\r\n  TrackObject = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicTrack();\r\n  previousDial_ID = -1;\r\n  doubleChecker = 0;\r\n  trackActivaqte = false;\r\n  noteClickIndex = -1;\r\n  trackClickIndex = -1;\r\n  trackClickType = null\r\n  lyricsId = 0;\r\n  stopRecording();\r\n  clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n  clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n  clearAllBoxClip();\r\n  initializeTimer();\r\n  initializeTimer2();\r\n}\r\n\r\n/* Timer Setting and Update code*/\r\nfunction startRecording(){//Timer를 시작하는 코드\r\n  stopTrack()\r\n  play_state = true;\r\n  previousLyricsIndex = null;\r\n  startTimer();\r\n  startMetronome();\r\n  if(document.getElementById(\"BPMType\").checked){\r\n    bpmPlayNumber = 5\r\n  }\r\n}\r\nfunction stopRecording(){//Timer를 중지하는 코드\r\n  play_state = false;\r\n  noteSizeAllOff();\r\n  stopTimer();\r\n  stopMetronome();\r\n}\r\nfunction startTimer() { // 타이머 시작 코드\r\n  if (!timer) { // 타이머가 이미 실행 중이지 않은 경우에만 실행\r\n    timer = setInterval(updateTime, 1 / fps * 1000); // 0.01초 간격으로 updateTime 함수 실행\r\n  }\r\n}\r\nfunction stopTimer() {  // 타이머 정지 코드\r\n  clearInterval(timer);\r\n  timer = null; // 타이머 변수 초기화\r\n  pauseVideo(); // 영상 재생 정지\r\n}\r\n\r\n\r\n// track timer code\r\nfunction startTrack(){//Timer를 시작하는 코드\r\n  stopRecording()\r\n  play_state = true;\r\n  play_state_track = true;\r\n  previousLyricsIndex = null;\r\n  startTimer2();\r\n  startMetronome();\r\n  if(document.getElementById(\"BPMType\").checked){\r\n    bpmPlayNumber = 5\r\n  }\r\n}\r\nfunction stopTrack(){//Timer를 중지하는 코드\r\n  play_state = false;\r\n  play_state_track = false;\r\n  noteSizeAllOff();\r\n  stopTimer2();\r\n  stopMetronome();\r\n}\r\nfunction startTimer2() { // 타이머 시작 코드\r\n  if (!timer) { // 타이머가 이미 실행 중이지 않은 경우에만 실행\r\n    timer = setInterval(updateTime2, 1 / fps * 1000); // 0.01초 간격으로 updateTime 함수 실행\r\n  }\r\n}\r\nfunction stopTimer2() {  // 타이머 정지 코드\r\n  clearInterval(timer);\r\n  timer = null; // 타이머 변수 초기화\r\n}\r\nfunction currentClipDuration(){\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody||current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    return melody_clip.getDuration();\r\n  }\r\n  else{\r\n    return beat_clip.getDuration();\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction updateTime() { //시간에 따라 업데이트 해야하는 함수들\r\n  if(bpmPlayNumber > 4){\r\n    currentTime += 1/fps;\r\n    musicPlayer(currentTime);\r\n    //console.log(time_to_px(currentTime, duration)-clip_start_px);\r\n    $(\"#slider\").slider(\"value\",time_to_px(currentTime, currentClipDuration()));\r\n    timeLine2.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n    timeLine1.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n    // console.log(onNoteList[0].style.left, time_to_px(currentTime, currentClipDuration()) + \"px\")\r\n    // updateTime2(currentTime)\r\n    showLyrics(currentTime);\r\n    for (let item of onNoteList){\r\n      noteResizeChanger(item, time_to_px(currentTime, currentClipDuration()));\r\n    }\r\n    if(currentTime >= currentClipDuration()){\r\n      stopRecording() //끝 도달하면 자동으로 종료\r\n    }\r\n    console.log(onNoteList);\r\n  }\r\n}\r\n\r\nfunction ClipUpdateTimeControl(setTime){\r\n  currentTime = setTime\r\n  $(\"#slider\").slider(\"value\",time_to_px(currentTime, currentClipDuration()));\r\n  timeLine2.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n  timeLine1.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n  showLyrics(currentTime);\r\n  for (let item of onNoteList){\r\n    noteResizeChanger(item, time_to_px(currentTime, currentClipDuration()));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n$(\"#slider\").slider({ //Timer 슬라이더\r\n  value: clip_start_px,\r\n  min: clip_start_px,\r\n  max: clip_box_width,\r\n  step: 0.01,\r\n  slide: function( event, ui ) {\r\n    timeLine1.style.left = ((ui.value)-clip_start_px) + \"px\";\r\n    timeLine2.style.left = ((ui.value)-clip_start_px) + \"px\";\r\n    currentTime = px_to_time(ui.value, currentClipDuration());\r\n    // if(practiceMode){\r\n    //   player1.seekTo(px_to_time(ui.value, duration), true);\r\n    // }\r\n    // else{\r\n    //   player2.seekTo(px_to_time(ui.value, duration), true);\r\n    // }\r\n    noteSizeAllOff();\r\n  }\r\n});\r\nfunction initializeTimer(){ //Timer 초기화\r\n  stopRecording();\r\n  currentTime = 0.0;\r\n  $(\"#slider\").slider(\"value\",time_to_px(currentTime, currentClipDuration()));\r\n  timeLine2.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n  timeLine1.style.left = (time_to_px(currentTime, currentClipDuration())-clip_start_px) + \"px\";\r\n}\r\nfunction time_to_px(time, duration, width = clip_box_width, start = clip_start_px){ //Time을 Px로 변환하는 코드\r\n  return start + time / duration * (width - start)\r\n}\r\nfunction time_to_px_Scale(time, duration, width = clip_box_width, start = clip_start_px){ //Time을 Px로 변환하는 코드\r\n  return time / duration * (width - start)\r\n}\r\nfunction px_to_time(px, duration, width = clip_box_width, start = clip_start_px){  //Px을 Time으로 변환하는 코드\r\n  return (px - start) * duration / (width - start)\r\n}\r\nfunction px_to_time_Scale(px, duration, width = clip_box_width, start = clip_start_px){  //Px Scale을 Time Scale로 변환하는 코드\r\n  return px * duration / (width - start)\r\n}\r\n/*Note Sound Maker*/\r\nfunction musicPlayer(currentTime){  //음, 비트 소리를 재생하는 코드\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody || current_clip_type==_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    let currentNote = melody_clip.getcurrentNoteSet(currentTime)\r\n    notePlayer(currentNote, previousNote);\r\n    previousNote = melody_clip.getcurrentNoteSet(currentTime);\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    let currentBeat = beat_clip.getcurrentNoteSet(currentTime);\r\n    for (let beat of currentBeat){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.beat_player)(beat);\r\n      setTimeout(() => (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.beat_output_play)(beat), 100);\r\n    }\r\n  }\r\n}\r\nfunction notePlayer(currentNote, previousNote){ //피아노 음 재생 함수\r\n  //piano_player(currentNote[0], true);\r\n  var exclusiveArr1 = currentNote.filter(function(val) {\r\n    return previousNote.indexOf(val) === -1;\r\n  });\r\n  var exclusiveArr2 = previousNote.filter(function(val) {\r\n    return currentNote.indexOf(val) === -1;\r\n  });\r\n  if(exclusiveArr1.length > 0){\r\n    //console.log(\"Inpnut\", exclusiveArr1);\r\n    for( let note of exclusiveArr1){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.piano_player)(note, true);\r\n    }  \r\n  }\r\n  if(exclusiveArr2.length > 0){\r\n    //console.log(\"Ouput \", exclusiveArr2);\r\n    for( let note of exclusiveArr2){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.piano_player)(note, false);\r\n    }  \r\n  }\r\n  //console.log(\"piano Player Test \", exclusiveArr1, exclusiveArr2)\r\n}\r\nfunction stopAllNotePlayer(){ //재생되는 음을 모두 정지하는\r\n  if(previousNote.length > 0){\r\n    //console.log(\"Ouput \", exclusiveArr2);\r\n    for(let note of previousNote){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.piano_player)(note, false);\r\n    }  \r\n  }\r\n  if(previousNote_track.length > 0){\r\n    //console.log(\"Ouput \", exclusiveArr2);\r\n    for(let note of previousNote_track){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.piano_player)(note, false);\r\n    }  \r\n  }\r\n  previousNote = []\r\n  previousNote_track = []\r\n}\r\nfunction OctaveToColor(octave){\r\n  switch(octave){\r\n    case \"C4\":\r\n      return 'hsl(0,99%,41%)'\r\n    case \"C#4\":\r\n      return 'hsl(24,99%,41%)';\r\n    case \"D4\":\r\n      return 'hsl(36,99%,41%)';\r\n    case \"D#4\":\r\n      return 'hsl(46,99%,41%)';\r\n    case \"E4\":\r\n      return 'hsl(55,99%,41%)';\r\n    case \"F4\":\r\n      return 'hsl(129,100%,31%)';\r\n    case \"F#4\":\r\n      return 'hsl(179,100%,27%)';\r\n    case \"G4\":\r\n      return 'hsl(186,99%,41%)';\r\n    case \"G#4\":\r\n      return  '#2E93FF';\r\n    case \"A4\":\r\n      return 'hsl(273,99%,40%)';\r\n    case \"A#4\":\r\n      return  'hsl(284,100%,34%)';\r\n    case \"B4\":\r\n      return 'hsl(329,100%,39%)';\r\n    //let magenta = 'hsl(346,100%,39%)'\r\n    case \"C5\":\r\n      return 'hsl(0,100%,25%)'\r\n    case \"C#5\":\r\n      return 'hsl(25,100%,24%)'\r\n    case \"D5\":\r\n      return 'hsl(36,100%,24%)'\r\n    case \"D#5\":\r\n      return 'hsl(48,100%,24%)'\r\n    case \"E5\":\r\n      return  'hsl(57,100%,26%)'\r\n    case \"F5\":\r\n      return  'hsl(120,100%,19%)'\r\n    case \"F#5\":\r\n      return 'hsl(178,100%,18%)'\r\n    case \"G5\":\r\n      return 'hsl(210,100%,22%)'\r\n    case \"G#5\":\r\n      return 'hsl(246,100%,22%)'\r\n    case \"A5\":\r\n      return 'hsl(275,100%,22%)'\r\n    case \"A#5\":\r\n      return  'hsl(308,100%,22%)'\r\n    case \"B5\":\r\n      return  'hsl(323,100%,21%)'\r\n    case \"C6\":\r\n      return  'hsl(351,100%,21%)'\r\n    default:\r\n      return 'hsl(0,100%,0%)'\r\n  }\r\n}\r\nfunction getColor(id){\r\n  switch(id%12){\r\n    case 0:\r\n      return 'hsl(0,99%,41%)'\r\n    case 1:\r\n      return 'hsl(24,99%,41%)';\r\n    case 2:\r\n      return 'hsl(36,99%,41%)';\r\n    case 3:\r\n      return 'hsl(46,99%,41%)';\r\n    case 4:\r\n      return 'hsl(55,99%,41%)';\r\n    case 5:\r\n      return 'hsl(129,100%,31%)';\r\n    case 6:\r\n      return 'hsl(179,100%,27%)';\r\n    case 7:\r\n      return 'hsl(186,99%,41%)';\r\n    case 8:\r\n      return  '#2E93FF';\r\n    case 9:\r\n      return 'hsl(273,99%,40%)';\r\n    case 10:\r\n      return  'hsl(284,100%,34%)';\r\n    case 11:\r\n      return 'hsl(329,100%,39%)';\r\n  }\r\n}\r\n/*Cilp Note Object creater*/\r\nfunction createResizeDragElement(note, leftPosition, noteId, type) { //Melody, Beat 노트 생성\r\n  const resizeDrag = document.createElement(\"div\");\r\n  let boxItem = null\r\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    resizeDrag.classList.add(\"resize-drag\");  // resize-drag로 생성\r\n    const Itemid = \"box_\" + note.substr(0, note.length - 1); \r\n    boxItem = document.getElementById(Itemid);\r\n    resizeDrag.textContent = note.substr(note.length - 1, note.length);\r\n    resizeDrag.style.backgroundColor =  OctaveToColor(note)\r\n  }\r\n  else{\r\n    resizeDrag.classList.add(\"draggable\");  // resize-drag로 생성\r\n    const Itemid = \"box_\" + note;\r\n    boxItem = document.getElementById(Itemid);\r\n    resizeDrag.textContent = \"\"\r\n  }\r\n  resizeDrag.style.left = leftPosition + \"px\"; // left 스타일 추가\r\n  resizeDrag.setAttribute(\"note_id\", noteId); // note_id 속성 추가\r\n  resizeDrag.setAttribute(\"note\", note); // note_id 속성 추가\r\n  resizeDrag.addEventListener(\"click\", function(){\r\n    //console.log(\"Note Id:\", resizeDrag.getAttribute(\"note_id\"));\r\n    noteClickIndex = resizeDrag.getAttribute(\"note_id\");\r\n  })\r\n  noteClickIndex = noteId;\r\n  if(boxItem != null){\r\n    boxItem.appendChild(resizeDrag);\r\n  }\r\n  return resizeDrag\r\n}\r\n\r\nfunction noteResizeChanger(noteObejct, target_pix){\r\n  const currentWidth = 10;  //Meldoy 음표의 최소 길이값(css에서 변경시 바꿔야함)\r\n  const currentleft = parseFloat(noteObejct.style.left);\r\n  if(currentWidth < target_pix - currentleft){\r\n    noteObejct.style.width = (target_pix - currentleft) + \"px\";\r\n  }\r\n}\r\nfunction noteSizeAllOff(){ //Note 변화용 array 초기화\r\n  for (let i = 0; i < onNoteList.length; i++) {\r\n    melody_clip.setNoteRelease(onNoteList[i].getAttribute(\"note\"), currentTime);\r\n  }\r\n  onNoteList = [];\r\n}\r\nfunction noteOff(note){//Note 변화 설정 초기화\r\n  for (let i = 0; i < onNoteList.length; i++) {\r\n    if (onNoteList[i].getAttribute(\"note\") === note) {\r\n      onNoteList.splice(i, 1);\r\n    }\r\n  }\r\n}\r\nfunction newClipCreater(){\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    console.log(\"New Melody Clip Create\", Melody_clip_array.length)\r\n    melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration);\r\n    noteClickIndex = -1;\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n    initializeTimer();\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    console.log(\"New Beat Clip Create\", Beat_clip_array.length)\r\n    beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration);\r\n    noteClickIndex = -1;\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n    initializeTimer();\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Template){\r\n    console.log(\"New Template Clip Create\", Template_clip_array.length)\r\n    template_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.TemplateClip(Template_clip_array.length, duration_track);\r\n    templateConnectToVisualAndSound(template_clip);\r\n    console.log(Template_clip_array)\r\n  }\r\n}\r\n\r\n/* Clip Event Code */\r\ndocument.getElementById(\"trackClipCreateButton\").addEventListener('click', function (){\r\n  newClipCreater();\r\n})\r\ndocument.getElementById(\"sheetMusicTemplateButton\").addEventListener('click', function (){\r\n  if(template_clip.get_Clip_id() != Template_clip_array.length){\r\n    console.log(\"New Template Clip Create\", template_clip.get_Clip_id(), Template_clip_array.length)\r\n    template_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.TemplateClip(Template_clip_array.length, duration_track);\r\n    templateConnectToVisualAndSound(template_clip);\r\n    console.log(Template_clip_array)\r\n  }\r\n})\r\ndocument.getElementById(\"sheetMusicSaveButton\").addEventListener('click', function (){\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){     // Melody Save \r\n    if(melody_clip.getClipId() == Melody_clip_array.length){\r\n      clipDurationNormalize(current_clip_type)\r\n      createClipBox(melody_clip);\r\n      Melody_clip_array.push(melody_clip);\r\n      melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration);\r\n      alert(\"멜로디 저장\")\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      initializeTimer();\r\n    }\r\n    else{\r\n      clipDurationNormalize(current_clip_type)\r\n      Melody_clip_array[melody_clip.getClipId()] = melody_clip;\r\n      alert(\"멜로디 다시 저장\")\r\n    }\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){      \r\n    if(beat_clip.getClipId() == Beat_clip_array.length){        \r\n      clipDurationNormalize(current_clip_type)                          // Beat Save\r\n      createClipBox(beat_clip);\r\n      Beat_clip_array.push(beat_clip);\r\n      beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration);\r\n      alert(\"비트 저장\")\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n      initializeTimer();\r\n    }\r\n    else{\r\n      clipDurationNormalize(current_clip_type)\r\n      Beat_clip_array[beat_clip.getClipId()] = beat_clip;\r\n      alert(\"비트 다시 저장\")\r\n    }\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    \r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Template){\r\n    if(template_clip.get_Clip_id() == Template_clip_array.length){\r\n      createTemplateClipBox(template_clip);\r\n      Template_clip_array.push(template_clip);\r\n      template_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.TemplateClip(Template_clip_array.length , duration_track);\r\n      templateConnectToVisualAndSound(template_clip);\r\n      console.log(Template_clip_array)\r\n      alert(\"이펙트 저장\")\r\n    }\r\n    else{\r\n      Template_clip_array[template_clip.get_Clip_id()] = template_clip;\r\n      alert(\"이펙트 다시 저장\")\r\n    }\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Total){  //자지막 전부 저장하는 부분\r\n     generateMidi(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n     generateMidi(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n     let [videoId, videoData, videoDuration] = videoObject.getAllData();\r\n     for(let i=0;i <videoId.length; i++){\r\n      videoDownload(videoData[i], videoId[i], videoDuration[i])\r\n     }\r\n     saveLyrics();\r\n     saveMood();\r\n  }\r\n})\r\n\r\n\r\ndocument.getElementById(\"sheetMusicPlayButton\").addEventListener('click', function (){\r\n  startRecording();\r\n})\r\ndocument.getElementById(\"sheetMusicPauseButton\").addEventListener('click', function (){\r\n  stopRecording();\r\n  stopAllNotePlayer();\r\n  stopAllNotePlayer();\r\n})\r\ndocument.getElementById(\"sheetMusicDeleteButton\").addEventListener('click', function (){\r\n  if(noteClickIndex!=-1){\r\n    if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      melody_clip.deleteNote(noteClickIndex);\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n    else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n      beat_clip.deleteNote(noteClickIndex);\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n      loadClip(beat_clip, beat_clip.getDuration())\r\n    }\r\n    else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n      melody_clip.deletelyric(noteClickIndex);\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n  }\r\n  noteClickIndex = -1; //선택 클립 number 초기화\r\n})\r\ndocument.getElementById(\"sheetMusicAllDeleteButton\").addEventListener('click', function (){\r\n  if (window.confirm(\"정말 클립 내용을 모두 삭제하시겠습니까?\")) {\r\n    if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, melody_clip.getClipId(), duration);\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n    else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n      beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, beat_clip.getClipId(), duration);\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n      loadClip(beat_clip, beat_clip.getDuration());\r\n    }\r\n    else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n      melody_clip.dleteAlllyric();\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics);\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n  }\r\n})\r\n\r\n/* Synthesizer Event Code */\r\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('pianoKeyInput', function (e){\r\n  doubleChecker += 1\r\n  if(doubleChecker%2 ==0){\r\n    if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      melody_clip.setNoteInput(e.detail.note, currentTime);\r\n        //console.log(\"noteInpu Check\", e.detail.note)\r\n      let NoteItem = createResizeDragElement(e.detail.note, time_to_px(currentTime, currentClipDuration()), melody_clip.getNoteIndex(), _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      onNoteList.push(NoteItem); \r\n    }\r\n  }\r\n})\r\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('pianoKeyOutput', function (e){\r\n  //doubleChecker += 1\r\n  //if(doubleChecker%2 ==0){\r\n    if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n      melody_clip.setNoteRelease(e.detail.note, currentTime);\r\n      noteOff(e.detail.note)\r\n    }\r\n  //}\r\n})\r\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('padkeyInput', function (e){\r\n  doubleChecker += 1\r\n  if(doubleChecker%2 ==0){\r\n    if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n      beat_clip.setBeatInput(e.detail.id, currentTime);\r\n      console.log(\"Pad Input\")\r\n      let PadItem = createResizeDragElement(e.detail.id, time_to_px(currentTime, currentClipDuration()), beat_clip.getNoteIndex(), _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n    }\r\n  }\r\n})\r\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('dialInput', function(e){\r\n  doubleChecker += 1\r\n  if(doubleChecker%2 ==0){\r\n    template_clip.set_dial(e.detail.value);\r\n    document.getElementById(\"dial_1\").value = e.detail.value[0][0]\r\n    document.getElementById(\"dial_2\").value = e.detail.value[0][1]\r\n    document.getElementById(\"dial_3\").value = e.detail.value[0][2]\r\n    document.getElementById(\"dial_4\").value = e.detail.value[0][3]\r\n  }\r\n})\r\n\r\n/*Clip Edit code*/\r\n// clipduration.addEventListener(\"change\", function(){ //Clip duration change code\r\n//   changeClipDuration(parseFloat(clipduration.value));\r\n// })\r\n// function changeClipDuration(inputDuration){\r\n//   duration = inputDuration\r\n//   console.log(\"Clip duration Set : \", duration);\r\n//   noteSizeAllOff();\r\n//   clearNoteClip(current_clip_type);\r\n//   if(time_to_px(currentTime, duration) >= clip_box_width){\r\n//     $(\"#slider\").slider(\"value\", clip_box_width);\r\n//     timeLine2.style.left = (clip_box_width-clip_start_px) + \"px\";\r\n//     timeLine1.style.left = (clip_box_width-clip_start_px) + \"px\";\r\n//   }\r\n//   else{\r\n//     $(\"#slider\").slider(\"value\",time_to_px(currentTime, duration));\r\n//     timeLine2.style.left = (time_to_px(currentTime, duration)-clip_start_px) + \"px\";\r\n//     timeLine1.style.left = (time_to_px(currentTime, duration)-clip_start_px) + \"px\";\r\n//   }\r\n//   if(current_clip_type == MusicClipType.Melody){\r\n//     melody_clip.setDuration(duration);\r\n//     template_clip.set_duration(duration);\r\n//     loadClip(melody_clip, duration);\r\n//   }\r\n//   else if(current_clip_type == MusicClipType.Beat){\r\n//     beat_clip.setDuration(duration);\r\n//     loadClip(beat_clip, duration);\r\n//   }\r\n// }\r\nfunction removeAllElementsByClassName(className) {//\r\n  const elements = document.getElementsByClassName(className);\r\n  while (elements.length > 0) {\r\n    elements[0].parentNode.removeChild(elements[0]);\r\n  }\r\n}\r\nfunction clearNoteClip(type){// 편집기에 모든 노트 제거\r\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    removeAllElementsByClassName(\"resize-drag\");\r\n    removeAllElementsByClassName(\"resize-lyrics\");\r\n  }\r\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    removeAllElementsByClassName(\"resize-lyrics\");\r\n  }\r\n  else{\r\n    removeAllElementsByClassName(\"draggable\");\r\n  }\r\n}\r\nfunction clearExampleClip(type){\r\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    removeAllElementsByClassName(\"inresize-drag\");\r\n  }\r\n  else{\r\n    removeAllElementsByClassName(\"indraggable\");\r\n  }\r\n}\r\n\r\n\r\nfunction loadClip(MusicClip, duration){ // 입력 클립을 편집기에 반영\r\n  console.log(\"load Clip\", MusicClip);\r\n  console.log(\"duration \", duration);\r\n  if(MusicClip.getClipType() == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    const [NoteSet, TimeSet] = MusicClip.getMusicClip();\r\n    //const lyricsList = MusicClip.getLyrics();\r\n    for(let i=0; i<NoteSet.length; i++){\r\n      let NoteItem = createResizeDragElement(NoteSet[i], time_to_px(TimeSet[i][0], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      noteResizeChanger(NoteItem, time_to_px(TimeSet[i][1], duration));\r\n    }\r\n    const [LyricsSet, LyricsTimeSet, LyricsVideoId] = MusicClip.getAllLyrics();\r\n    for(let i=0; i<LyricsSet.length; i++){\r\n      createLyricsObject(i, LyricsSet[i], LyricsTimeSet[i][0],LyricsTimeSet[i][1], LyricsVideoId[i])\r\n    }\r\n  }\r\n  else{\r\n    const [padSet, TimeSet] = MusicClip.getMusicClip()\r\n    for(let i=0; i<padSet.length; i++){\r\n      let NoteItem = createResizeDragElement(padSet[i], time_to_px(TimeSet[i], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n    }\r\n  }\r\n  noteClickIndex = -1;\r\n}\r\n\r\nfunction changeMusicClip(noteIndex, deltaTimeset){ // 노트 위치, 크기 편집을 클립 시간에 반영\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    melody_clip.editNote(noteIndex, deltaTimeset)\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    beat_clip.editNote(noteIndex, deltaTimeset)\r\n  }\r\n}\r\nfunction changelyricsClip(noteIndex, deltaTimeset){ // 노트 위치, 크기 편집을 클립 시간에 반영\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody||current_clip_type==_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){\r\n    melody_clip.editLyrics(noteIndex, deltaTimeset);\r\n  }\r\n}\r\n\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//------------------------------------------- Track Code------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n\r\n//Track Clip Icon Maker\r\nfunction createClipBox(musicClip) { //Melody, Beat 노트 생성\r\n  let currenctCliptType = musicClip.getClipType();\r\n  let clip_id = musicClip.getClipId();\r\n  const dragdrop = document.createElement(\"div\");\r\n  dragdrop.classList.add(\"drag-drop\");  // resize-drag로 생성\r\n  dragdrop.setAttribute(\"clip_id\", clip_id); // clip_id 속성 추가\r\n  dragdrop.setAttribute(\"clip_type\", currenctCliptType); // clip_type 속성 추가\r\n  dragdrop.addEventListener(\"click\", function(){\r\n    console.log(\"current Clip Type:\", dragdrop.getAttribute(\"clip_type\"),\"current Clip id\", dragdrop.getAttribute(\"clip_id\"))\r\n    loadFromTrackToMusicClip(dragdrop.getAttribute(\"clip_type\"), dragdrop.getAttribute(\"clip_id\"));\r\n  })\r\n  if(currenctCliptType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    dragdrop.textContent = \"멜로디 \" + (clip_id+1); //내용이 있어야 나와서 -로 일단 임시로 추가\r\n    dragdrop.setAttribute(\"id\", \"melody-drop\");\r\n    let boxItem = document.getElementById(\"MelodydropContainer\");\r\n    boxItem.appendChild(dragdrop);\r\n  }\r\n  else{\r\n    dragdrop.textContent = \"비트 \" + (clip_id+1); //내용이 있어야 나와서 -로 일단 임시로 추가\r\n    dragdrop.setAttribute(\"id\", \"beat-drop\");\r\n    let boxItem = document.getElementById(\"BeatdropContainer\");\r\n    boxItem.appendChild(dragdrop);\r\n  }\r\n}\r\nfunction createTemplateClipBox(template_clip){\r\n  let clip_id = template_clip.get_Clip_id()\r\n  const dragdrop_template = document.createElement(\"div\");\r\n  dragdrop_template.classList.add(\"drag-drop\");  // resize-drag로 생성\r\n  dragdrop_template.setAttribute(\"clip_id\", clip_id); // clip_id 속성 추가\r\n  dragdrop_template.setAttribute(\"clip_type\", _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Template); // clip_type 속성 추가\r\n  dragdrop_template.addEventListener(\"click\", function(){\r\n    //console.log(\"current Clip Type:\", dragdrop_template.getAttribute(\"clip_type\"),\"current Clip id\", dragdrop_template.getAttribute(\"clip_id\"))\r\n    loadFromTrackToTemplateClip(dragdrop_template.getAttribute(\"clip_id\"));\r\n  })\r\n    dragdrop_template.textContent = \"효과 \" + (clip_id+1); //내용이 있어야 나와서 -로 일단 임시로 추가\r\n    dragdrop_template.setAttribute(\"id\", \"template-drop\");\r\n    let boxItem_template = document.getElementById(\"TemplatedropContainer\");\r\n    boxItem_template.appendChild(dragdrop_template);\r\n  }\r\n\r\n\r\n//Track Clip Object 생성용 코드(melody, Beat용)\r\nfunction createTrackClipObject(dropzoneName, clipType, clip_id, duration, box_id){\r\n  //let clipType = musicClip.getClipType();\r\n  //let clip_id = musicClip.getClipId();\r\n  //let duration = musicClip.getDuration();\r\n  //console.log(\"duration Check\", duration);\r\n  const trackClip = document.createElement(\"div\");\r\n  trackClip.classList.add(\"draggable_clip\");\r\n  trackClip.style.width = time_to_px(duration, duration_track, track_box_width, 0) + \"px\"\r\n\r\n  if(clipType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    trackClip.textContent = \"멜로디\" + (clip_id + 1); //내용이 있어야 나와서 -로 일단 임시로 추가\r\n    //dragdrop.setAttribute(\"id\", \"melody-drop\");\r\n  }\r\n  else{\r\n    trackClip.textContent = \"비트\" + (clip_id + 1); //내용이 있어야 나와서 -로 일단 임시로 추가\r\n    //dragdrop.setAttribute(\"id\", \"beat-drop\");\r\n  }\r\n  let boxItem = document.getElementById(dropzoneName);\r\n  trackClip.setAttribute(\"box_id\", box_id); // clip_id 속성 추가\r\n  trackClip.setAttribute(\"box_type\", clipType); // clip_type 속성 추가\r\n  trackClip.addEventListener(\"click\", function(){\r\n    console.log(\"type:\", trackClip.getAttribute(\"box_type\"), \"id\", trackClip.getAttribute(\"box_id\"));\r\n    trackClickIndex = trackClip.getAttribute(\"box_id\");\r\n    trackClickType = trackClip.getAttribute(\"box_type\");\r\n  })\r\n  boxItem.appendChild(trackClip);\r\n  return px_to_time_Scale(trackClip.offsetLeft, duration_track, track_box_width, 0)\r\n}\r\n\r\n//Track Clip Object 생성용 코드(Template용)\r\nfunction createTrackClipObject_template(dropzoneName, clip_id, box_id){\r\n  const trackClip = document.createElement(\"div\");\r\n  trackClip.classList.add(\"resize-drag_clip\");\r\n  trackClip.style.width = time_to_px(60, duration_track, track_box_width, 0) + \"px\"\r\n  let boxItem = document.getElementById(dropzoneName);\r\n  trackClip.textContent = \"효과\" + (clip_id+1)\r\n  trackClip.setAttribute(\"box_id\", box_id); // clip_id 속성 추가\r\n  trackClip.setAttribute(\"box_type\", _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Template); // clip_type 속성 추가\r\n  trackClip.addEventListener(\"click\", function(){\r\n    console.log(\"type:\", trackClip.getAttribute(\"box_type\"), \"id\", trackClip.getAttribute(\"box_id\"));\r\n    trackClickIndex = trackClip.getAttribute(\"box_id\");\r\n    trackClickType = trackClip.getAttribute(\"box_type\");\r\n  })\r\n  boxItem.appendChild(trackClip);\r\n  return px_to_time_Scale(trackClip.offsetLeft, duration_track, track_box_width, 0)\r\n}\r\n\r\n//clip 정보를 가져오는 코드\r\nfunction get_clip(clipType, clip_id){\r\n  if(clipType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    return Melody_clip_array[clip_id]\r\n    //dragdrop.setAttribute(\"id\", \"melody-drop\");\r\n  }\r\n  else{\r\n    return Beat_clip_array[clip_id]\r\n    //dragdrop.setAttribute(\"id\", \"beat-drop\");\r\n  }\r\n}\r\n\r\n$(\"#slider_track\").slider({ //Timer 슬라이더2\r\n  value: 0,\r\n  min: 0,\r\n  max: track_box_width,\r\n  step: 0.1,\r\n  slide: function( event, ui ) {\r\n    timeLine3.style.left = (ui.value) + \"px\";\r\n    currentTrackTime = px_to_time(ui.value, duration_track, track_box_width, 0)\r\n    //console.log(\"Track Time\", currentTrackTime)\r\n  }\r\n});\r\n\r\nfunction updateTime2() { //시간에 따라 업데이트 해야하는 함수들\r\n  if(bpmPlayNumber > 4){\r\n    currentTrackTime += 1/fps\r\n    //musicPlayer(currentTime);\r\n    $(\"#slider_track\").slider(\"value\",time_to_px(currentTrackTime, duration_track, track_box_width, 0));\r\n    timeLine3.style.left = time_to_px(currentTrackTime, duration_track, track_box_width, 0) + \"px\";\r\n    //console.log(\"Test Track\", cur_track_set[0][1]);\r\n    let cur_track_set = TrackObject.getcurrentClipSet(currentTrackTime);\r\n    //console.log(cur_track_set)\r\n    if(cur_track_set[0].length > 0){\r\n      //console.log(Template_clip_array);\r\n      templatePlayerClip(Template_clip_array[cur_track_set[0][1]]);\r\n    }\r\n    if(cur_track_set[1].length > 0){\r\n      musicPlayerMelodyClip(currentTrackTime - cur_track_set[1][0], Melody_clip_array[cur_track_set[1][1]]);\r\n      if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody || current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){ // 클립 로드\r\n        if(melody_clip != Melody_clip_array[cur_track_set[1][1]]){\r\n          melody_clip = Melody_clip_array[cur_track_set[1][1]];\r\n          clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n          loadClip(melody_clip, melody_clip.getDuration());\r\n        }\r\n        ClipUpdateTimeControl(currentTrackTime - cur_track_set[1][0]);\r\n      }\r\n    }\r\n    if(cur_track_set[2].length > 0){\r\n      musicPlayerBeatClip(currentTrackTime - cur_track_set[2][0], Beat_clip_array[cur_track_set[2][1]]);\r\n      if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){// 클립 로드\r\n        if(beat_clip != Beat_clip_array[cur_track_set[2][1]]){\r\n          beat_clip = Beat_clip_array[cur_track_set[2][1]];\r\n          clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n          loadClip(beat_clip, beat_clip.getDuration());\r\n        }\r\n        ClipUpdateTimeControl(currentTrackTime - cur_track_set[2][0])\r\n      }\r\n    }\r\n    if(currentTrackTime >= duration_track){\r\n      stopTrack() // 끝 도달하면 자동으로 종료\r\n    }\r\n  }\r\n}\r\nfunction initializeTimer2(){ // Timer 초기화\r\n  $(\"#slider_track\").slider(\"value\",time_to_px(currentTrackTime, duration_track, track_box_width, 0));\r\n  timeLine3.style.left = time_to_px(currentTrackTime, duration_track, track_box_width, 0) + \"px\";\r\n}\r\nfunction musicPlayerMelodyClip(currentTime, melody_clip){  //음이나 비트 소리를 재생하는 코드\r\n  let currentNote = melody_clip.getcurrentNoteSet(currentTime);\r\n  notePlayer(currentNote, previousNote_track);\r\n  previousNote_track = melody_clip.getcurrentNoteSet(currentTime);\r\n  showLyrics(currentTime);\r\n}\r\nfunction musicPlayerBeatClip(currentTime, beat_clip){  //음이나 비트 소리를 재생하는 코드\r\n  let currentBeat = beat_clip.getcurrentNoteSet(currentTime);\r\n  for (let beat of currentBeat){\r\n    (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.beat_player)(beat);\r\n    setTimeout(() => (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.beat_output_play)(beat), 100);\r\n  }\r\n}\r\nfunction templatePlayerClip(inputClip){\r\n  if(inputClip.get_Clip_id() != previousDial_ID){\r\n    //console.log(\"id\", inputClip.get_Clip_id())\r\n    template_clip = inputClip\r\n    templateConnectToVisualAndSound(inputClip);\r\n     previousDial_ID = inputClip.get_Clip_id();\r\n  }\r\n}\r\nfunction templateConnectToVisualAndSound(inputClip){\r\n  const event = new CustomEvent('templateLoad', { detail: inputClip.get_dial() });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.dispatchEvent(event);\r\n}\r\nfunction clearAllBoxClip(){// 편집기에 모든 노트 제거\r\n  InitializeAllTrack();\r\n  removeAllElementsByClassName(\"drag-drop\");\r\n}\r\nfunction InitializeAllTrack(){\r\n  removeAllElementsByClassName(\"resize-drag_clip\");\r\n  removeAllElementsByClassName(\"draggable_clip\");\r\n}\r\ndocument.getElementById(\"trackMusicPlayButton\").addEventListener('click', function (){\r\n  startTrack();\r\n})\r\ndocument.getElementById(\"trackMusicPauseButton\").addEventListener('click', function (){\r\n  stopTrack();\r\n  stopAllNotePlayer2();\r\n})\r\ndocument.getElementById(\"trackMusicDeleteButton\").addEventListener('click', function (){\r\n  TrackObject.deleteClip(trackClickType, trackClickIndex);\r\n  InitializeAllTrack();\r\n  loadTrack(TrackObject);\r\n})\r\nfunction loadTrack(MusicTrack){ // Track을 편집기에 반영\r\n  const [TemplateId, TemplateTimeset] = MusicTrack.getTemplateSet()\r\n  const [MelodyClipId, MelodyTimeset] = MusicTrack.getMelodySet()\r\n  const [BeatClipId, BeatTimeset] = MusicTrack.getBeatSet()\r\n  for(let i=0; i<TemplateId.length; i++){\r\n    createTrackClipObject_template('template-dropzone', TemplateId[i], i);\r\n  }\r\n  for(let i=0; i<MelodyClipId.length; i++){\r\n    createTrackClipObject(\"melody-dropzone\", _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, MelodyClipId[i], MelodyTimeset[i][1]-MelodyTimeset[i][0], i)\r\n  }\r\n  for(let i=0; i<BeatClipId.length; i++){\r\n    createTrackClipObject(\"beat-dropzone\", _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, BeatClipId[i], BeatTimeset[i][1]-BeatTimeset[i][0], i)\r\n  }\r\n}\r\n\r\nfunction stopAllNotePlayer2(){\r\n  if(previousNote_track.length > 0){\r\n    //console.log(\"Ouput \", exclusiveArr2);\r\n    for( let note of previousNote_track){\r\n      (0,_Synthesizer_js__WEBPACK_IMPORTED_MODULE_1__.piano_player)(note, false);\r\n    }  \r\n  }\r\n  previousNote_track - [];\r\n}\r\nfunction loadFromTrackToMusicClip(clip_type, clip_id){\r\n  if(clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Lyrics){  //클릭 당시 Lyrics 씬일 때만 적용\r\n      lyricsTypeSceneChanger();\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      melody_clip = Melody_clip_array[clip_id];\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n    else{                                           // 나머지는 다 Melody 씬으로 이동\r\n      melodyTypeSceneChanger();\r\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n      melody_clip = Melody_clip_array[clip_id];\r\n      loadClip(melody_clip, melody_clip.getDuration());\r\n    }\r\n  }\r\n  else{\r\n    beatTypeSceneChanger();\r\n    clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\r\n    beat_clip = Beat_clip_array[clip_id];\r\n    loadClip(beat_clip, beat_clip.getDuration());\r\n  }\r\n}\r\nfunction loadFromTrackToTemplateClip(clip_id){\r\n  templateTypeSceneChanger();\r\n  templateConnectToVisualAndSound(template_clip);\r\n}\r\n\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------- File Save and upLoad code -------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n\r\nfunction downloadJsonFile(filename, data) { // 객체를 JSON 파일로 다운로드하는 함수\r\n  const jsonData = JSON.stringify(data);\r\n  const blob = new Blob([jsonData], { type: 'application/json' });\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const link = document.createElement('a');\r\n  link.download = filename;\r\n  link.href = url;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n}\r\n//Track이랑 Clip을 따로 파일로 저장하는 함수, Track은 Clip의 위치값만 있기 때문에 한 번에 가져와야함\r\nconst tmp_Meldoy_array = []\r\nconst tmp_Beat_array = []\r\nconst tmp_template_array = []\r\n\r\nfunction saveLyrics(){\r\n  let [MelodyClipIdList, MelodyTimeset] = TrackObject.getMelodySet()\r\n  let clipId =[]\r\n  let LyricsSet = []\r\n  let LyricsTimeset = []\r\n  let LyricsVideoSet = []\r\n  for(let i = 0; i <Melody_clip_array.length; i++){\r\n    clipId.push(Melody_clip_array[i].getClipId());\r\n    let [text, time, video] = Melody_clip_array[i].getAllLyrics()\r\n    LyricsSet.push(text)\r\n    LyricsTimeset.push(time)\r\n    LyricsVideoSet.push(video)\r\n  }\r\n  let LyricsDataObject = {\r\n        \"name\":userName,\r\n        \"trackIdset\":MelodyClipIdList,\r\n        \"trackTimeset\":MelodyTimeset,\r\n        \"clipIdset\":clipId,\r\n        \"LyricsSet\":LyricsSet,\r\n        \"LyricsTimeset\":LyricsTimeset,\r\n        \"LyricsVideoSet\":LyricsVideoSet\r\n      }\r\n  console.log(\"lyricsSave\")\r\n  console.log(LyricsDataObject)\r\n  downloadJsonFile(userName + \"_LyricsLog\", LyricsDataObject);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n// document.getElementById(\"trackMusicSaveButton\").addEventListener('click', function(){\r\n//   generateMidi(MusicClipType.Melody);\r\n//   generateMidi(MusicClipType.Beat);\r\n//   let MusicTrackObejct = {\r\n//     \"Type\":\"MusicTrack\",\r\n//     \"user_Id\": TrackObject.getUserId(),\r\n//     \"id_set\" : TrackObject.getIdData(),\r\n//     \"time_set\" : TrackObject.getTimeData()\r\n//   }\r\n//   //downloadJsonFile(\"MusicTrack_\" + TrackObject.getUserId(), MusicTrackObejct);  //Track 정보 저장\r\n//   if(current_clip_type == MusicClipType.Template){\r\n//     for(let i = 0; i < Template_clip_array.length; i ++){\r\n//       let templateObejct = {\r\n//         \"userName\":userName,\r\n//         \"musicName\":musicId,\r\n//         \"Type\": MusicClipType.Template,\r\n//         \"CLip id\": Template_clip_array[i].get_Clip_id(),\r\n//         \"duration\": Template_clip_array[i].get_duration(),\r\n//         \"instrument\": Template_clip_array[i].get_instrument(),\r\n//         \"dial_set\": Template_clip_array[i].get_dial()\r\n//       }\r\n//       downloadJsonFile(\"template_clip_\" + userName + \"_\" + musicId, templateObejct); \r\n//     }\r\n//   }\r\n//   if(current_clip_type == MusicClipType.Melody){\r\n//     for(let i = 0; i < Melody_clip_array.length; i ++){\r\n//       let MusicObejct = {\r\n//         \"userName\":userName,\r\n//         \"musicName\":musicId,\r\n//         \"Type\": Melody_clip_array[i].getClipType(),\r\n//         \"CLip id\": Melody_clip_array[i].getClipId(),\r\n//         \"duration\": Melody_clip_array[i].getDuration(),\r\n//         \"noteSet\": Melody_clip_array[i].getMusicClip()[0],\r\n//         \"timeSet\": Melody_clip_array[i].getMusicClip()[1],\r\n//       }\r\n//       downloadJsonFile(\"Melody_clip_\" + userName + \"_\" + musicId, MusicObejct); \r\n//     }\r\n//   }\r\n//   if(current_clip_type == MusicClipType.Beat){\r\n//     for(let i = 0; i < Beat_clip_array.length; i ++){\r\n//       let MusicObejct = {\r\n//         \"userName\":userName,\r\n//         \"musicName\":musicId,\r\n//         \"Type\": Beat_clip_array[i].getClipType(),\r\n//         \"CLip id\": Beat_clip_array[i].getClipId(),\r\n//         \"duration\": Beat_clip_array[i].getDuration(),\r\n//         \"noteSet\": Beat_clip_array[i].getMusicClip()[0],\r\n//         \"timeSet\": Beat_clip_array[i].getMusicClip()[1]\r\n//       }\r\n//       downloadJsonFile(\"Beat_clip_\" + userName + \"_\" + musicId, MusicObejct); \r\n//     }\r\n//   }\r\n//})\r\n\r\n\r\n\r\n/*------------------------------------------laod MIDI Code -------------------------------------------- */\r\ndocument.getElementById(\"sheetMusicLoadButton\").addEventListener('click', function (){\r\n  FileInput.click();\r\n})\r\nFileInput.addEventListener('change', function(e){\r\n  // const Files = e.target.files;\r\n  // for(let file of Files){\r\n  //   const reader = new FileReader();\r\n  //   reader.onload = function(event) {\r\n  //     const contents = event.target.result;\r\n  //     const jsonObject = JSON.parse(contents);\r\n  //     if(jsonObject[\"Type\"]==MusicClipType.Melody){\r\n  //       let Tmp_melody_clip = new MusicClip(jsonObject[\"Type\"], jsonObject[\"CLip_id\"], jsonObject[\"duration\"], jsonObject[\"noteSet\"], jsonObject[\"TimeSet\"])\r\n  //       console.log(\"Melody push\", Tmp_melody_clip);\r\n  //       tmp_Meldoy_array.push(Tmp_melody_clip)\r\n  //     }\r\n  //     if(jsonObject[\"Type\"]==MusicClipType.Beat){\r\n  //       let Tmp_beat_clip = new MusicClip(jsonObject[\"Type\"], jsonObject[\"CLip_id\"], jsonObject[\"duration\"], jsonObject[\"noteSet\"], jsonObject[\"TimeSet\"]);\r\n  //       console.log(\"Beat push\", Tmp_beat_clip);\r\n  //       tmp_Beat_array.push(Tmp_beat_clip);\r\n  //     }\r\n  //     if(jsonObject[\"Type\"]==MusicClipType.Template){\r\n  //       let Tmp_template_clip = new TemplateClip(jsonObject[\"CLip_id\"], jsonObject[\"duration\"], jsonObject[\"instrument\"]);\r\n  //       Tmp_template_clip.set_dial(jsonObject[\"dial_set\"]);\r\n  //       console.log(\"Template push\", Tmp_template_clip);\r\n  //       tmp_template_array.push(Tmp_template_clip);\r\n  //     }\r\n  //     if(jsonObject[\"Type\"]==\"MusicTrack\"){\r\n  //       TrackObject = new MusicTrack(jsonObject[\"user_Id\"], jsonObject[\"id_set\"], jsonObject[\"time_set\"]);\r\n  //       console.log(\"TrackObject : \", TrackObject);\r\n  //     }\r\n  //   };\r\n  //   reader.readAsText(file);\r\n  const file = e.target.files[0];\r\n  const reader = new FileReader();\r\n  reader.onload = function(e) {\r\n      try {\r\n          const data = new Uint8Array(e.target.result);\r\n          const smf = new JZZ.MIDI.SMF(data.buffer);\r\n          getMididata(smf[0])\r\n      } catch (error) {\r\n          console.error('Error parsing MIDI file:', error);\r\n      }\r\n  };\r\n  reader.onerror = function() {\r\n      console.error('Error reading file:', reader.error);\r\n  };\r\n  reader.readAsArrayBuffer(file);\r\n})\r\nlet OverMidiDataChecker = false;\r\n\r\nfunction clipDurationNormalize(type){\r\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    if(melody_clip.getNoteIndex() != 0){\r\n      melody_clip.setDuration(melody_clip.getClipLastTime()+ 0.1);\r\n    }\r\n    else{\r\n      console.log(\"there isn't note\")\r\n    }\r\n  }\r\n  else{\r\n    if(beat_clip.getNoteIndex() != 0){\r\n      beat_clip.setDuration(beat_clip.getClipLastTime()+ 0.1);\r\n    }\r\n    else{\r\n      console.log(\"there isn't note\")\r\n    }\r\n  }\r\n}\r\nfunction setMidiToMelodyClip(inputLog){\r\n  let [channel, input, note, time] = inputLog\r\n  if(channel == 0){\r\n    if(input){\r\n      melody_clip.setNoteInput(note,time);\r\n    }\r\n    else{\r\n      melody_clip.setNoteRelease(note,time);\r\n    }\r\n  }\r\n}\r\nfunction setMidiToBeatClip(inputLog){\r\n  let [channel, input, note, time] = inputLog\r\n  if(input){\r\n    console.log(\"note :\", note.slice(0, -1), \"index :\", midiBeatNote.indexOf(note.slice(0, -1)), \"time:\", time)\r\n    if(midiBeatNote.indexOf(note.slice(0, -1)) != -1){\r\n      beat_clip.setBeatInput(midiBeatNote.indexOf(note.slice(0, -1)), time)\r\n    }\r\n    else{\r\n      OverMidiDataChecker = true;\r\n    }\r\n  }\r\n}\r\nfunction getMididata(midiData) { \r\n  console.log(\"current Type\", current_clip_type);\r\n  newClipCreater();  \r\n  for(let i = 0; i<midiData.length; i++){\r\n    if(midiData[i].length > 0){\r\n      let MidiTextLine = getMidiLine(midiData[i])\r\n      if(MidiTextLine != null){\r\n        if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n          setMidiToMelodyClip(MidiTextLine)\r\n        }\r\n        else if(current_clip_type==_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n          setMidiToBeatClip(MidiTextLine)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\r\n    clipDurationNormalize(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody)\r\n    console.log(melody_clip)\r\n    loadClip(melody_clip, melody_clip.getDuration())\r\n  }\r\n  else if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\r\n    clipDurationNormalize(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat)\r\n    console.log(beat_clip)\r\n    loadClip(beat_clip, beat_clip.getDuration())\r\n  }\r\n  if(OverMidiDataChecker){\r\n    alert(\"범위에서 벗어난 MIDI 정보가 있습니다. 일부는 적용이 안됩니다.\")\r\n    OverMidiDataChecker = false;\r\n  }\r\n}\r\n\r\nfunction getMidiLine(midiLine){\r\n  if(midiLine[0] >= 144 && midiLine[0] <= 154){\r\n    return [midiLine[0] - 144, true, pitch2NoteMidi(midiLine[1]), midiLine.tt/midiBPM/2]\r\n  }\r\n  else if(midiLine[0] >= 128 && midiLine[0] <= 138){\r\n    return [midiLine[0] - 128, false, pitch2NoteMidi(midiLine[1]), midiLine.tt/midiBPM/2]\r\n  }\r\n  else if(midiLine[0] >= 192 && midiLine[0] <= 202){\r\n    console.log(\"channel :\", midiLine[0] - 192, \" setting MIDI Instrument :\", midiLine[1])\r\n    return null\r\n  }\r\n  else{\r\n    //console.log(\"except check here\");\r\n    console.log(\"except check here\", midiLine);\r\n    OverMidiDataChecker = true;\r\n    return null\r\n  }\r\n}\r\n\r\nfunction pitch2NoteMidi(input_pitch){\r\n  let noteType = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]\r\n  return noteType[(input_pitch -12)%12] + String(parseInt((input_pitch - 12)/12))\r\n}\r\n\r\n\r\n/*------------------------------------------laod MIDI Code -------------------------------------------- */\r\n\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//---------------------------------------------가사 관련 추가 코드---------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\ndocument.getElementById(\"LyricsPushButton\").addEventListener(\"click\", function(){\r\n  let lyricsDefaultTime = parseInt(melody_clip.getDuration()/10)\r\n  if(lyricsDefaultTime < 1){\r\n    lyricsDefaultTime = 1\r\n  }\r\n  let lyricsText = document.getElementById(\"lyricsInputer\").value;\r\n  if(lyricsText != \"\"){\r\n    let lyricsLastTime = melody_clip.getLyricsLastTime();\r\n    let lyticsId = melody_clip.getLyricsIndex()\r\n    melody_clip.setLyrics(lyricsText,[lyricsLastTime, lyricsLastTime + lyricsDefaultTime])\r\n    createLyricsObject(lyticsId, lyricsText, lyricsLastTime, lyricsLastTime + lyricsDefaultTime, -1);\r\n  }\r\n  document.getElementById(\"lyricsInputer\").value = \"\"\r\n})\r\nfunction createLyricsObject(note_id, lyricsText, startTime, endTime, LyricsVideoId){\r\n  const boxItem = document.getElementById(\"LyricsBox1\");\r\n  const lyricsNote = document.createElement(\"div\");\r\n  lyricsNote.classList.add(\"resize-lyrics\");\r\n\r\n  lyricsNote.style.left = time_to_px(startTime, currentClipDuration()) + \"px\";\r\n  lyricsNote.style.width = time_to_px_Scale(endTime - startTime, currentClipDuration()) + \"px\";\r\n  lyricsNote.textContent = lyricsText\r\n  lyricsNote.setAttribute(\"note_id\", note_id); // clip_id 속성 추가\r\n  lyricsNote.setAttribute('id', note_id) // 색상 바꾸는 용도\r\n\r\n  \r\n  lyricsNote.addEventListener(\"click\", function(){\r\n\r\n\r\n    console.log(\"id\", lyricsNote.getAttribute(\"note_id\"));\r\n    noteClickIndex = lyricsNote.getAttribute(\"note_id\");\r\n\r\n\r\n    document.getElementById(\"lyricsWord\").innerHTML = lyricsNote.textContent;\r\n    let lyricsVideoId = melody_clip.getLyricsVideoId(lyricsNote.getAttribute(\"note_id\"))\r\n    if(lyricsVideoId != -1){\r\n      loadVideoClip(lyricsVideoId)\r\n      document.getElementById('lyricsVideo').innerHTML = \"수어 \" + (lyricsVideoId + 1);\r\n    }\r\n    else{\r\n      document.getElementById('lyricsVideo').innerHTML = \"none\";\r\n    }\r\n\r\n\r\n  })\r\n\r\n\r\n  lyricsNote.addEventListener(\"click\", function history(){\r\n    clickCount += 1;\r\n    clickedHistory.push(lyricsNote.id) // 아이디 히스토리 리스트로 넣기\r\n\r\n    // clickedHistory[-2] != clickedHistory[-1]\r\n    if (clickedHistory.length == 1){     //하나 이상 클릭했을 때\r\n      // console.log('히스토리', clickedHistory);\r\n      nowClicked = document.getElementById(clickedHistory[0]);\r\n      nowClicked.style.borderWidth = 'thick'\r\n    }\r\n\r\n    else if (clickedHistory.length > 1 && clickedHistory[clickedHistory.length - 1] != clickedHistory[clickedHistory.length - 2]){\r\n      nowClicked = document.getElementById(clickedHistory[clickedHistory.length - 1]);\r\n      previousClicked = document.getElementById(clickedHistory[clickedHistory.length - 2])\r\n\r\n      nowClicked.style.borderWidth = 'thick'\r\n      previousClicked.style.borderWidth = ''\r\n      \r\n    }})\r\n\r\n\r\n\r\n  boxItem.appendChild(lyricsNote);\r\n}\r\n\r\nfunction showLyrics(currentTime){\r\n  let [currentLyricsText, currentLyricsIndex] = melody_clip.getLyrics(currentTime);\r\n  document.getElementById(\"lyricsDisplay\").innerHTML = currentLyricsText;\r\n  playVideoControl(currentTime, currentLyricsIndex);\r\n}\r\n\r\n\r\n\r\ninteract('.resize-lyrics')\r\n  .resizable({\r\n    edges: { top: false, left: true, bottom: false, right: true },\r\n    listeners: {\r\n      move: function (event) {\r\n        let { x, y } = event.target.dataset\r\n        x = (parseFloat(x) || 0) + event.deltaRect.left\r\n        y = (parseFloat(y) || 0) + event.deltaRect.top\r\n        Object.assign(event.target.style, {\r\n          width: `${event.rect.width}px`,\r\n          height: `${event.rect.height}px`,\r\n          transform: `translate(${x}px, ${y}px)`\r\n        })\r\n        changelyricsClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.deltaRect.left, currentClipDuration()), px_to_time_Scale(event.deltaRect.left + event.deltaRect.width, currentClipDuration())])\r\n        Object.assign(event.target.dataset, { x, y })\r\n      }\r\n    }\r\n  })\r\n  .draggable({\r\n    listeners: { move: window.dragMoveListener_lyrics },\r\n    inertia: true,\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ]\r\n  })\r\n  .draggable({\r\n    // enable inertial throwing\r\n    inertia: true,\r\n    // keep the element within the area of it's parent\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ],\r\n    // enable autoScroll\r\n    autoScroll: true,\r\n    listeners: {\r\n      // call this function on every dragmove event\r\n      move: dragMoveListener_lyrics,\r\n\r\n      // call this function on every dragend event\r\n      end (event) {\r\n        var textEl = event.target.querySelector('p')\r\n        textEl && (textEl.textContent =\r\n          'moved a distance of ' +\r\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                     Math.pow(event.pageY - event.y0, 2) | 0))\r\n            .toFixed(2) + 'px')\r\n      }\r\n    }\r\n  })\r\nfunction dragMoveListener_lyrics(event) {\r\n  var target = event.target\r\n  // keep the dragged position in the data-x/data-y attributes\r\n  var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n  var y = 0\r\n  // translate the element\r\n  target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\r\n  changelyricsClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.dx, currentClipDuration()), px_to_time_Scale(event.dx, currentClipDuration())])\r\n  // update the posiion attributes\r\n  target.setAttribute('data-x', x)\r\n}\r\n\r\n//------------------------------------------- 매트로늄 생성용 코드---------------------------------------------------//\r\n\r\n\r\n//let bpmPlayOn = document.getElementById(\"BPMType\"); //bpm 온오프 설정용 예비함수1\r\n\r\nlet bpmHapticOn = false // bpm-beat haptic 설정용 예비함수2\r\nconst metronome = new Tone.Loop(time => {\r\n  const synth = new Tone.NoiseSynth().toDestination();\r\n  if(!document.getElementById(\"BPMType\").checked){\r\n    synth.triggerAttackRelease(\"2n\", time, 0.3);\r\n  }\r\n  if(document.getElementById(\"hapticType\").checked){\r\n    document.getElementById('HapticPlayButton1').click();\r\n  }\r\n  bpmPlayNumber += 1;\r\n}, \"4n\");\r\n\r\nfunction startMetronome() {\r\n  const bpm = parseFloat(document.getElementById(\"bpm\").value);\r\n  Tone.Transport.bpm.value = bpm;\r\n  metronome.start(0);\r\n  Tone.Transport.start();\r\n}\r\nfunction stopMetronome() {\r\n  metronome.stop();\r\n  Tone.Transport.stop();\r\n  bpmPlayNumber = 0;\r\n}\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//------------------------------------------- Note Interaction용 ----------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n//-------------------------------------------------------------------------------------------------------------------//\r\n\r\n\r\n//Piano clip note \r\ninteract('.resize-drag')\r\n  .resizable({\r\n    edges: { top: false, left: true, bottom: false, right: true },\r\n    listeners: {\r\n      move: function (event) {\r\n        let { x, y } = event.target.dataset\r\n        x = (parseFloat(x) || 0) + event.deltaRect.left\r\n        y = (parseFloat(y) || 0) + event.deltaRect.top\r\n        Object.assign(event.target.style, {\r\n          width: `${event.rect.width}px`,\r\n          height: `${event.rect.height}px`,\r\n          transform: `translate(${x}px, ${y}px)`\r\n        })\r\n        changeMusicClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.deltaRect.left, currentClipDuration()), px_to_time_Scale(event.deltaRect.left + event.deltaRect.width, currentClipDuration())])\r\n        \r\n        Object.assign(event.target.dataset, { x, y })\r\n      }\r\n    }\r\n  })\r\n  .draggable({\r\n    listeners: { move: window.dragMoveListener_note },\r\n    inertia: true,\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ]\r\n  })\r\n  .draggable({\r\n    // enable inertial throwing\r\n    inertia: true,\r\n    // keep the element within the area of it's parent\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ],\r\n    // enable autoScroll\r\n    autoScroll: true,\r\n    listeners: {\r\n      // call this function on every dragmove event\r\n      move: dragMoveListener_note,\r\n\r\n      // call this function on every dragend event\r\n      end (event) {\r\n        var textEl = event.target.querySelector('p')\r\n        textEl && (textEl.textContent =\r\n          'moved a distance of ' +\r\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                     Math.pow(event.pageY - event.y0, 2) | 0))\r\n            .toFixed(2) + 'px')\r\n      }\r\n    }\r\n  })\r\n  // Track Template\r\n  interact('.resize-drag_clip')\r\n  .resizable({\r\n    edges: { top: false, left: false, bottom: false, right: true },\r\n    listeners: {\r\n      move: function (event) {\r\n        let { x, y } = event.target.dataset\r\n        x = (parseFloat(x) || 0) + event.deltaRect.left\r\n        y = (parseFloat(y) || 0) + event.deltaRect.top\r\n        Object.assign(event.target.style, {\r\n          width: `${event.rect.width}px`,\r\n          height: `${event.rect.height}px`,\r\n          transform: `translate(${x}px, ${y}px)`\r\n        })\r\n        Object.assign(event.target.dataset, { x, y })\r\n      }\r\n    }\r\n  })\r\n\r\n//beat clip note \r\ninteract('.draggable')\r\n  .draggable({\r\n    listeners: { move: window.dragMoveListener_note },\r\n    inertia: true,\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ]\r\n  })\r\n  .draggable({\r\n    // enable inertial throwing\r\n    inertia: true,\r\n    // keep the element within the area of it's parent\r\n    modifiers: [\r\n      interact.modifiers.restrictRect({\r\n        restriction: 'parent',\r\n        endOnly: true\r\n      })\r\n    ],\r\n    // enable autoScroll\r\n    autoScroll: true,\r\n    listeners: {\r\n      // call this function on every dragmove event\r\n      move: dragMoveListener_note,\r\n\r\n      // call this function on every dragend event\r\n      end (event) {\r\n        var textEl = event.target.querySelector('p')\r\n\r\n        textEl && (textEl.textContent =\r\n          'moved a distance of ' +\r\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                    Math.pow(event.pageY - event.y0, 2) | 0))\r\n            .toFixed(2) + 'px')\r\n      }\r\n    }\r\n  })\r\n\r\n//track music box\r\ninteract('.draggable_clip')\r\n.draggable({\r\n  listeners: { move: window.dragMoveListener_clip },\r\n  inertia: true,\r\n  modifiers: [\r\n    interact.modifiers.restrictRect({\r\n      restriction: 'parent',\r\n      endOnly: true\r\n    })\r\n  ]\r\n})\r\n.draggable({\r\n  // enable inertial throwing\r\n  inertia: true,\r\n  // keep the element within the area of it's parent\r\n  modifiers: [\r\n    interact.modifiers.restrictRect({\r\n      restriction: 'parent',\r\n      endOnly: true\r\n    })\r\n  ],\r\n  // enable autoScroll\r\n  autoScroll: true,\r\n  listeners: {\r\n    // call this function on every dragmove event\r\n    move: dragMoveListener_clip,\r\n\r\n    // call this function on every dragend event\r\n    end (event) {\r\n      var textEl = event.target.querySelector('p')\r\n\r\n      textEl && (textEl.textContent =\r\n        'moved a distance of ' +\r\n        (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                  Math.pow(event.pageY - event.y0, 2) | 0))\r\n          .toFixed(2) + 'px')\r\n    }\r\n  }\r\n})\r\n\r\n  function dragMoveListener_note (event) {\r\n    var target = event.target\r\n    // keep the dragged position in the data-x/data-y attributes\r\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n    var y = 0\r\n    // translate the element\r\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\r\n    //console.log( \"id:\", event.target.getAttribute(\"note_id\"), \"Add timeset:\", [px_to_time_Scale(event.dx, duration), px_to_time_Scale(event.dx, duration)]);\r\n    changeMusicClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.dx, currentClipDuration()), px_to_time_Scale(event.dx, currentClipDuration())])\r\n    // console.log(\"Add Plus :\", px_to_time(x, duration), \"id:\", target.getAttribute(\"note_id\"));\r\n    // update the posiion attributes\r\n    target.setAttribute('data-x', x)\r\n  }\r\n\r\n  function dragMoveListener_clip (event) {\r\n    var target = event.target\r\n    // keep the dragged position in the data-x/data-y attributes\r\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n    var y = 0\r\n    // translate the element\r\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\r\n    //console.log( \"type:\", event.target.getAttribute(\"box_type\"), \"id:\", event.target.getAttribute(\"box_id\"), \"Add timeset:\", event.dx/10);\r\n    TrackObject.editMusicClip(event.target.getAttribute(\"box_type\"), event.target.getAttribute(\"box_id\"), px_to_time(event.dx, duration_track, track_box_width, 0))\r\n    // console.log(\"Add Plus :\", px_to_time(x, duration), \"id:\", target.getAttribute(\"note_id\"));\r\n    // update the posiion attributes\r\n    target.setAttribute('data-x', x)\r\n  }\r\n\r\n\r\n  //clip dropzone 설정용 코드\r\n  interact('.template-dropzone').dropzone({\r\n    // only accept elements matching this CSS selector\r\n    accept: '#template-drop',\r\n    // Require a 75% element overlap for a drop to be possible\r\n    overlap: 0.75,\r\n  \r\n    // listen for drop related events:\r\n  \r\n    ondropactivate: function (event) {\r\n      // add active dropzone feedback\r\n      event.target.classList.add('drop-active')\r\n    },\r\n    ondragenter: function (event) {\r\n      var draggableElement = event.relatedTarget\r\n      var dropzoneElement = event.target\r\n      // feedback the possibility of a drop\r\n      if(trackActivaqte){\r\n      dropzoneElement.classList.add('drop-target')\r\n      draggableElement.classList.add('can-drop')\r\n      //draggableElement.textContent = 'Dragged in'\r\n      event.target.classList.remove('drop-active')\r\n      event.target.classList.remove('drop-target')\r\n      const tempalteId = parseInt(event.relatedTarget.getAttribute(\"clip_id\"));\r\n      const clipTime = createTrackClipObject_template('template-dropzone', tempalteId, TrackObject.getTempalateId())\r\n        //console.log(\"clip Time Check\", clipTime/10);\r\n      TrackObject.setTemplateClip(tempalteId, clipTime)\r\n        trackActivaqte = false;\r\n      }\r\n    },\r\n    ondragleave: function (event) {\r\n      // remove the drop feedback style\r\n      event.target.classList.remove('drop-target')\r\n      event.relatedTarget.classList.remove('can-drop')\r\n      //event.relatedTarget.textContent = 'Dragged out'\r\n    },\r\n    ondrop: function (event) {\r\n      //event.relatedTarget.textContent = 'Dropped'\r\n    },\r\n    ondropdeactivate: function (event) {\r\n      // remove active dropzone feedback\r\n      trackActivaqte = true\r\n    }\r\n  })\r\n\r\n  interact('.melody-dropzone').dropzone({\r\n    // only accept elements matching this CSS selector\r\n    accept: '#melody-drop',\r\n    // Require a 75% element overlap for a drop to be possible\r\n    overlap: 0.75,\r\n    // listen for drop related events:\r\n    ondropactivate: function (event) {\r\n      // add active dropzone feedback\r\n      event.target.classList.add('drop-active')\r\n    },\r\n    ondragenter: function (event) {\r\n      var draggableElement = event.relatedTarget\r\n      var dropzoneElement = event.target\r\n      if(trackActivaqte){\r\n        // feedback the possibility of a drop\r\n        dropzoneElement.classList.add('drop-target')\r\n        draggableElement.classList.add('can-drop')\r\n        //draggableElement.textContent = 'Dragged in'\r\n        event.target.classList.remove('drop-active')\r\n        event.target.classList.remove('drop-target')\r\n        const Tmp_clip = get_clip(event.relatedTarget.getAttribute(\"clip_type\"), event.relatedTarget.getAttribute(\"clip_id\"))\r\n        let [lastMelodyId, lastMelodyTime] = TrackObject.getLastClipData(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\r\n        //console.log(\"chcek id\", lastMelodyId, lastMelodyTime[1])\r\n        let trackLastTime = 0;\r\n        if(lastMelodyId != null){\r\n          trackLastTime= lastMelodyTime[1] + Melody_clip_array[lastMelodyId].getDuration();\r\n        }\r\n        console.log(\"trackLastTime\", trackLastTime, melody_clip.getDuration())\r\n        if(trackLastTime + melody_clip.getDuration() < duration_track){\r\n          const clipTime = createTrackClipObject('melody-dropzone', Tmp_clip.getClipType(), Tmp_clip.getClipId(), Tmp_clip.getDuration(), TrackObject.getMelodyId())\r\n          TrackObject.setMusicClip(Tmp_clip, clipTime)\r\n        }\r\n        else{\r\n          alert(\"트랙의 크기가 \" + duration_track + \"초를 넘겼습니다\")\r\n        }\r\n        trackActivaqte = false;\r\n      }\r\n    },\r\n    ondragleave: function (event) {\r\n      // remove the drop feedback style\r\n      event.target.classList.remove('drop-target')\r\n      event.relatedTarget.classList.remove('can-drop')\r\n      //event.relatedTarget.textContent = 'Dragged out'\r\n    },\r\n    ondrop: function (event) {\r\n      //event.relatedTarget.textContent = 'Dropped'\r\n      //createTrackClipObject('melody-dropzone',get_clip(event.target.getAttribute(\"clip_id\"), event.target.getAttribute(\"clip_type\")))\r\n\r\n    },\r\n    ondropdeactivate: function (event) {\r\n      // remove active dropzone feedback\r\n      trackActivaqte = true\r\n    }\r\n  })\r\n\r\n    interact('.beat-dropzone').dropzone({\r\n    // only accept elements matching this CSS selector\r\n    accept: '#beat-drop',\r\n    // Require a 75% element overlap for a drop to be possible\r\n    overlap: 0.75,\r\n    // listen for drop related events:\r\n    ondropactivate: function (event) {\r\n      // add active dropzone feedback\r\n      event.target.classList.add('drop-active')\r\n    },\r\n    ondragenter: function (event) {\r\n      var draggableElement = event.relatedTarget\r\n      var dropzoneElement = event.target\r\n      if(trackActivaqte){\r\n        // feedback the possibility of a drop\r\n        dropzoneElement.classList.add('drop-target')\r\n        draggableElement.classList.add('can-drop')\r\n        //draggableElement.textContent = 'Dragged in'\r\n        event.target.classList.remove('drop-active')\r\n        event.target.classList.remove('drop-target')\r\n        const Tmp_clip = get_clip(event.relatedTarget.getAttribute(\"clip_type\"), event.relatedTarget.getAttribute(\"clip_id\"))\r\n        let [lastBeatId, lastBeatTime] = TrackObject.getLastClipData(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat)\r\n        let trackLastTime = 0;\r\n        if(lastBeatId != null){\r\n          trackLastTime = lastBeatTime[1] + Beat_clip_array[lastBeatId].getDuration();\r\n        }\r\n        if(trackLastTime + beat_clip.getDuration() < duration_track){\r\n          const clipTime = createTrackClipObject('beat-dropzone', Tmp_clip.getClipType(), Tmp_clip.getClipId(), Tmp_clip.getDuration(), TrackObject.getBeatId())\r\n          TrackObject.setMusicClip(Tmp_clip, clipTime)\r\n          trackActivaqte = false;\r\n        }\r\n        else{\r\n          alert(\"트랙의 크기가 \" + duration_track + \"초를 넘겼습니다\")\r\n        }\r\n        //console.log(\"clip Time Check\", clipTime/10);\r\n      }\r\n    },\r\n    ondragleave: function (event) {\r\n      // remove the drop feedback style\r\n      event.target.classList.remove('drop-target')\r\n      event.relatedTarget.classList.remove('can-drop')\r\n      //event.relatedTarget.textContent = 'Dragged out'\r\n    },\r\n    ondrop: function (event) {\r\n      //event.relatedTarget.textContent = 'Dropped'\r\n      //createTrackClipObject('beat-dropzone',get_clip(event.target.getAttribute(\"clip_id\"), event.target.getAttribute(\"clip_type\")))\r\n  \r\n    },\r\n    ondropdeactivate: function (event) {\r\n      // remove active dropzone feedback\r\n      trackActivaqte = true\r\n    }\r\n  })\r\n  \r\n  interact('.drag-drop')\r\n    .draggable({\r\n      inertia: true,\r\n      modifiers: [\r\n        interact.modifiers.restrictRect({\r\n          restriction: 'parent',\r\n          endOnly: true\r\n        })\r\n      ],\r\n      autoScroll: true,\r\n      // dragMoveListener from the dragging demo above\r\n      listeners: { move: dragMoveListenerxy }\r\n    })\r\n  \r\n  function dragMoveListenerxy (event) {\r\n    var target = event.target\r\n    // keep the dragged position in the data-x/data-y attributes\r\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n    var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy\r\n    // translate the element\r\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\r\n    // update the posiion attributes\r\n    target.setAttribute('data-x', x)\r\n    target.setAttribute('data-y', y)\r\n  }\n\n//# sourceURL=webpack://Synthesizer/./src/js/SheetMusic.js?");

/***/ }),

/***/ "./src/js/Synthesizer.js":
/*!*******************************!*\
  !*** ./src/js/Synthesizer.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"beat_output_play\": () => (/* binding */ beat_output_play),\n/* harmony export */   \"beat_player\": () => (/* binding */ beat_player),\n/* harmony export */   \"dialInitialize\": () => (/* binding */ dialInitialize),\n/* harmony export */   \"piano_player\": () => (/* binding */ piano_player)\n/* harmony export */ });\n/* harmony import */ var _JZZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JZZ.js */ \"./src/js/JZZ.js\");\n/* harmony import */ var _JZZ_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_JZZ_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Share_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Share.js */ \"./src/js/Share.js\");\n\r\n\r\n\r\nlet noteType = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]\r\nlet vector = {X:\"x\", Y:\"y\"}\r\n\r\nlet BeatHapticOn = true; //bpm-beat haptic 설정용 예비함수2 (서로 반대로 설정해야함)\r\n\r\n//AutiFilter >> 그냥 필터!\r\nconst filter = new Tone.Filter().toDestination();\r\nfilter.set({\r\n  frequency: \"C4\",\r\n  type:\"highpass\"\r\n});\r\n\r\nconst beatAudio1 = document.getElementById('beat1');\r\nconst beatAudio2 = document.getElementById('beat2');\r\nconst beatAudio3 = document.getElementById('beat3');\r\nconst beatAudio4 = document.getElementById('beat4');\r\n//AutoWah >> 울리는 효과\r\n// const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\r\n// autoWah.Q.value = 6;\r\n\r\n//BitCrusher >> 찢어지는 듯한 효과\r\n// const crusher = new Tone.BitCrusher(4).toDestination();\r\n\r\n//Chebyshev >> 고양이 소리?\r\n// const cheby = new Tone.Chebyshev(50).toDestination();\r\n\r\n//Chorus >> 동시에 누를 때 확인\r\n// const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\r\n\r\n//Distortion >> 음이 더 늘어지는 효과\r\n//const dist = new Tone.Distortion(1.5).toDestination();\r\n\r\n//FeedbackDelay >> delay랑 코러스 효과음?\r\n// const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\r\n\r\n//Freeverb >> 먹먹해지는 효과?\r\n// const freeverb = new Tone.Freeverb().toDestination();\r\n// freeverb.dampening = 1000;\r\n\r\n//JCReverb >> 두 음이 울리는 느낌?\r\n//const reverb = new Tone.JCReverb(0.4).toDestination();\r\nconst delay = new Tone.FeedbackDelay(0.5).toDestination();;\r\n//const synth = new Tone.Synth().chain(delay, reverb);\r\n\r\n//Phaser >> 잡음이 섞이는 느낌\r\n// const phaser = new Tone.Phaser({\r\n// \tfrequency: 150,\r\n// \toctaves: 10,\r\n// \tbaseFrequency: 1000\r\n// }).toDestination();\r\n\r\n// //PingPonDelay >> 탁구공이 튀는 느낌으로 점점 음이 생기는 느낌\r\n// const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\r\n\r\n// const vibrato = new Tone.Vibrato(5, 0.1).toDestination();\r\n\r\n// let autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\r\n// let crusher = new Tone.BitCrusher(4).toDestination();\r\n// let cheby = new Tone.Chebyshev(50).toDestination();\r\n// let chorus = new Tone.Chorus(5, 2.5, 0.5).toDestination();\r\n// let feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\r\n// let freeverb = new Tone.Freeverb().toDestination();\r\n// let phaser = new Tone.Phaser({\r\n//   frequency: 150,\r\n//   octaves: 10,\r\n//   baseFrequency: 1000\r\n// }).toDestination();\r\n// let vibrato = new Tone.Vibrato(5, 0.1).toDestination();\r\nlet dial_bool = [false, false, false, false, false, false, false, false]\r\n\r\n// const synth = new Tone.Synth().chain(chorus).toDestination();\r\n// const AMsynth = new Tone.AMSynth().toDestination();\r\n// const duoSynth = new Tone.DuoSynth().toDestination();\r\n// const fmSynth = new Tone.FMSynth().toDestination();\r\n// const MembraneSynth = new Tone.MembraneSynth().toDestination();\r\n// const plucky = new Tone.PluckSynth().toDestination();\r\n\r\n\r\nlet polySynth = new Tone.PolySynth().toDestination();\r\n//polySynth.set({ detune: -1200 });\r\n\r\n// const MonoSynth = new Tone.MonoSynth({\r\n// \toscillator: {\r\n// \t\ttype: \"square\"\r\n// \t},\r\n// \tenvelope: {\r\n// \t\tattack: 0.1\r\n// \t}\r\n// }).toDestination();\r\n\r\n// const sampler = new Tone.Sampler({\r\n// \turls: {\r\n// \t\tA1: \"A1.mp3\",\r\n// \t\tA2: \"A2.mp3\",\r\n// \t},\r\n// \t//baseUrl: \"https://tonejs.github.io/audio/salamander/\",\r\n//   baseUrl: \"https://tonejs.github.io/audio/casio/\",\r\n//   attack: 1,\r\n//   release: 0,\r\n// }).toDestination();\r\n\r\n//sampler.connect(pingPong)\r\n\r\n\r\n\r\n// Beat\r\n//const MetalSynth = new Tone.MetalSynth().toDestination();\r\n//const noiseSynth = new Tone.NoiseSynth().toDestination();\r\ndocument.getElementById(\"synthInitialize\").addEventListener(\"click\", function(){\r\n  polySynth = new Tone.PolySynth().toDestination();\r\n  polySynth.set({ detune: -1200 });\r\n})\r\n\r\nfunction set_synthesiser(msg){\r\n  let synthesiser_msg = get_msg_input(msg)\r\n    switch (synthesiser_msg.input_type){\r\n      case \"90\":  //Press the piano keys\r\n        piano_key_input(synthesiser_msg.input_id, synthesiser_msg.input_value)\r\n        break;\r\n      case \"80\":  //Release the piano keys\r\n        piano_key_release(synthesiser_msg.input_id)\r\n        break;\r\n      case \"99\":  //tap the touch pad\r\n        pad_input(synthesiser_msg.input_id, synthesiser_msg.input_value)\r\n        break;\r\n      case \"89\":  //Release the touch pad\r\n        pad_output(synthesiser_msg.input_id)\r\n        break;\r\n      case \"b0\":  //Moving the dial or Moving the joystick(up,down)\r\n        if(synthesiser_msg.input_id != 1){\r\n          dial_input(synthesiser_msg.input_id, synthesiser_msg.input_value)\r\n        }\r\n        else{\r\n          joystick_input(synthesiser_msg.input_id, synthesiser_msg.input_value, vector.Y)\r\n        }\r\n        break;\r\n      case \"e0\":  //Moving the joystick(left, right)\r\n        joystick_input(synthesiser_msg.input_id, synthesiser_msg.input_value, vector.X)\r\n        break;\r\n      case \"d9\":  //Press the touch pad\r\n        break;\r\n      default:\r\n        break;\r\n      }\r\n}\r\n\r\nfunction get_msg_input(msg){\r\n  // output list : [input_type, input_id, input_value, bool(OnOff)]\r\n  return {\r\n    input_type: msg.substr(0,2), \r\n    input_id: parseInt(msg.substr(3,2), 16), \r\n    input_value: parseInt(msg.substr(6,2), 16)\r\n  }\r\n}\r\nfunction piano_player(input_note, attackRelase, value = 127){\r\n  if(attackRelase){\r\n    polySynth.triggerAttack(input_note);\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.pitch = note2Pitch(input_note);  //output : 0 ~ 127\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.note = input_note; //output : C0 ~ B7\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.value = value; //output : 0 ~ 127\r\n    const event = new CustomEvent('noteInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set });\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  }\r\n  else{\r\n    polySynth.triggerRelease(input_note);\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.pitch = note2Pitch(input_note);  //output : 0 ~ 127\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.note = input_note; //output : C0 ~ B7\r\n    const event = new CustomEvent('noteRelease', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set });\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  }\r\n}\r\nfunction note2Pitch(input_note){\r\n  //console.log(\"input\", input_note.slice(0,-1), input_note.slice(-1));\r\n  let num = noteType.findIndex((num) => num == input_note.slice(0,1));\r\n  return num + noteType.length * parseInt(input_note.slice(-1))\r\n}\r\nfunction pitch2Note(input_pitch){\r\n  return noteType[input_pitch%12] + String(parseInt(input_pitch/12))\r\n}\r\n\r\nfunction piano_key_input(input_id, input_value){\r\n  let input_note = pitch2Note(input_id)\r\n  piano_player(input_note, true);\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.pitch = input_id;  //output : 0 ~ 127\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.note = input_note; //output : C0 ~ B7\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.value = input_value; //output : 0 ~ 127\r\n  const event = new CustomEvent('pianoKeyInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n}\r\n\r\nfunction piano_key_release(input_id){\r\n  let input_note = pitch2Note(input_id)\r\n  piano_player(input_note, false);\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.pitch = input_id;  //output : 0 ~ 127\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set.note = input_note; //output : C0 ~ B7\r\n  const event = new CustomEvent('pianoKeyOutput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.note_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n}\r\nfunction restartAudio(audioElement) {\r\n  audioElement.currentTime = 0; // 재생 위치를 0으로 설정\r\n  audioElement.play(); // 오디오 재생 시작\r\n}\r\nfunction beat_player(input_id){\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set.id = input_id;\r\n  const event = new CustomEvent('padInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  //console.log(\"tap Check\");\r\n  switch (input_id){\r\n    case 0:\r\n      restartAudio(beatAudio1);\r\n      if(!document.getElementById(\"hapticType\").checked){\r\n        document.getElementById('HapticPlayButton1').click();\r\n      }\r\n      break;\r\n    case 1:\r\n      restartAudio(beatAudio2);\r\n      if(!document.getElementById(\"hapticType\").checked){\r\n        document.getElementById('HapticPlayButton2').click();\r\n      }\r\n      break;\r\n    case 2:\r\n      restartAudio(beatAudio3);\r\n      if(!document.getElementById(\"hapticType\").checked){\r\n        document.getElementById('HapticPlayButton3').click();\r\n      }\r\n      break;\r\n    case 3:\r\n      restartAudio(beatAudio4);\r\n      if(!document.getElementById(\"hapticType\").checked){\r\n        document.getElementById('HapticPlayButton4').click();\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\nfunction beat_output_play(input_id){\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set.id = input_id;\r\n  const event = new CustomEvent('padOutput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n}\r\n\r\nfunction pad_input(input_id){\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set.id = input_id - 36;\r\n  beat_player(input_id - 36)\r\n  const event = new CustomEvent('padkeyInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.pad_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n}\r\nfunction pad_output(input_id){\r\n  beat_output_play(input_id - 36)\r\n}\r\n_Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.addEventListener('templateLoad', function (e){\r\n  // console.log(\"In Circle note: \", e.detail.value); //범위가 0~127입니다.\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set.value = e.detail;\r\n  //console.log(\"set chnaged\", dial_set);\r\n  const event = new CustomEvent('dialInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  //console.log(dial_set);\r\n  //for(let i = 70; i < 78; i++){\r\n  //  dial_effect(i, dial_set.value[parseInt((i-70)/4)][(i-70)%4]);\r\n  //}\r\n})\r\n\r\n\r\nfunction dialInitialize(){\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set.value = [[0.0, 0.0, 0.0, 0.0], \r\n                  [0.0, 0.0, 0.0, 0.0]]\r\n  const event = new CustomEvent('dialInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set });\r\n  _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  //for(let i = 70; i < 78; i++){\r\n  //  dial_effect(i, 0);\r\n  //}\r\n  \r\n}\r\nfunction dial_input(input_id, input_value){\r\n  //console.log(\"dial_input\", input_id, );\r\n  if(input_id > 69){  //there are except case in joystick\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set.value[parseInt((input_id-70)/4)][(input_id-70)%4] = input_value;\r\n    const event = new CustomEvent('dialInput', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.dial_set });\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n    //dial_effect(input_id, input_value);\r\n  }\r\n}\r\n\r\nfunction Normaizing(input_value, minmaxList){\r\n  return minmaxList[0] + (minmaxList[1] - minmaxList[0]) * ((input_value - 10) / (127 - 10));\r\n}\r\n\r\nfunction dial_effect(input_id, input_value){\r\n    switch (input_id){\r\n      case 70:\r\n        console.log(\"feedbackDelay\", input_value)\r\n        if(dial_bool[0]){\r\n          console.log(\"feedbackDelay disconnect\");\r\n          polySynth.disconnect(feedbackDelay);\r\n          dial_bool[0] = false;\r\n        }\r\n        if(input_value > 10){\r\n          // console.log(\"connect\");\r\n          //feedbackDelay = new Tone.FeedbackDelay(\"8n\", Normaizing(input_value, [0, 0.8])).toDestination();\r\n          //feedbackDelay.feedback.value = Normaizing(input_value, [0, 0.5]);\r\n          //polySynth.connect(feedbackDelay);\r\n          //dial_bool[0] = true;\r\n        }\r\n        break;\r\n      case 71:\r\n        console.log(\"crusher\", input_value)\r\n        if(dial_bool[1]){\r\n          console.log(\"crusher disconnect\");\r\n          polySynth.disconnect(crusher);\r\n          dial_bool[1] = false;\r\n        }\r\n        if(input_value > 10){\r\n          // console.log(\"connect\");\r\n          //crusher.bits.value = 9 - parseInt(Normaizing(input_value, [1, 3]));\r\n          //polySynth.connect(crusher);\r\n          //dial_bool[1] = true;\r\n        }\r\n        break;\r\n      case 72:\r\n        console.log(\"cheby\", input_value)\r\n        if(dial_bool[2]){\r\n          console.log(\"cheby disconnect\");\r\n          polySynth.disconnect(cheby);\r\n          dial_bool[2] = false;\r\n        }\r\n        if(input_value > 10){  \r\n          // console.log(\"connect\");\r\n          //cheby.order = parseInt(Normaizing(input_value, [1, 20]));\r\n          //polySynth.connect(cheby);\r\n          //dial_bool[2] = true;\r\n        }\r\n        break;\r\n      case 73:\r\n        console.log(\"chorus\", input_value)\r\n        if(dial_bool[3]){\r\n          console.log(\"chorus disconnect\");\r\n          polySynth.disconnect(chorus);\r\n          dial_bool[3] = false;\r\n        }\r\n        if(input_value > 10){\r\n          // console.log(\"connect\");\r\n          //chorus = new Tone.Chorus(Normaizing(input_value, [1, 10]), 2.5, 0.5).toDestination();\r\n          chorus.frequency.value = Normaizing(input_value, [1, 7])\r\n          polySynth.connect(chorus);\r\n          dial_bool[3] = true;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n      }\r\n}\r\n\r\n\r\n\r\nfunction joystick_input(input_id, input_value, type){\r\n  if(type == vector.X){\r\n    //console.log(type, input_value - 64)\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.joystick_set.value[0] = input_value - 64;\r\n    const event = new CustomEvent('joystickInpnut', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.joystick_set });\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  }\r\n  else{\r\n    //console.log(type, parseInt(input_value/2))\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.joystick_set.value[1] = parseInt(input_value/2)\r\n    const event = new CustomEvent('joystickInpnut', { detail: _Share_js__WEBPACK_IMPORTED_MODULE_1__.joystick_set });\r\n    _Share_js__WEBPACK_IMPORTED_MODULE_1__.SyntheysizerEvents.dispatchEvent(event);\r\n  }\r\n}\r\n\r\n// MIDI Device Detect code\r\nvar midi_in;\r\nlet open_midi = document.querySelector('[data-action=\"open_midi_in\"]');\r\nopen_midi.addEventListener('click', event => {\r\n  midi_in = (0,_JZZ_js__WEBPACK_IMPORTED_MODULE_0__.JZZ)().openMidiIn()\r\n  .or(function(){document.getElementById(\"midiInName\").innerHTML = \"Cannot open!\";})\r\n  .and(function(){document.getElementById(\"midiInName\").innerHTML = this.name(); console.log(this.info());})\r\n  .connect(function(msg){\r\n    set_synthesiser(msg.toString());\r\n  });\r\n });\r\n\r\n let close_midi = document.querySelector('[data-action=\"close_midi_in\"]');\r\n close_midi.addEventListener('click', event => {\r\n  if (midi_in) {\r\n    midi_in.close();\r\n    midi_in = undefined;\r\n    document.getElementById(\"midiInName\").innerHTML = \"closed\";\r\n  }\r\n  });\n\n//# sourceURL=webpack://Synthesizer/./src/js/Synthesizer.js?");

/***/ }),

/***/ "./src/js/jsmidgen.js":
/*!****************************!*\
  !*** ./src/js/jsmidgen.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar Midi = {};\r\n\r\n(function(exported) {\r\n\r\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\r\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\r\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\r\n\r\n\t/* ******************************************************************\r\n\t * Utility functions\r\n\t ****************************************************************** */\r\n\r\n\tvar Util = {\r\n\r\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\r\n\r\n\t\t/**\r\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\r\n\t\t * 60, middle C).\r\n\t\t *\r\n\t\t * @param {string} n - The symbolic note name to parse.\r\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\r\n\t\t * name.\r\n\t\t */\r\n\t\tmidiPitchFromNote: function(n) {\r\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\r\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\r\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\r\n\t\t * it may already be one (including a purely numeric string).\r\n\t\t *\r\n\t\t * @param {string|number} p - The pitch to convert.\r\n\t\t * @returns {number} The resulting numeric MIDI pitch.\r\n\t\t */\r\n\t\tensureMidiPitch: function(p) {\r\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\r\n\t\t\t\t// numeric pitch\r\n\t\t\t\treturn parseInt(p, 10);\r\n\t\t\t} else {\r\n\t\t\t\t// assume it's a note name\r\n\t\t\t\treturn Util.midiPitchFromNote(p);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\r\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\r\n\r\n\t\t/**\r\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\r\n\t\t * (e.g. \"c4\").\r\n\t\t *\r\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\r\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\r\n\t\t * notes to sharpened ones. Optional, default false.\r\n\t\t * @returns {string} The resulting symbolic note name.\r\n\t\t */\r\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\r\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\r\n\t\t\tif (n > 23) {\r\n\t\t\t\t// noteNum is on octave 1 or more\r\n\t\t\t\toctave = Math.floor(n/12) - 1;\r\n\t\t\t\t// subtract number of octaves from noteNum\r\n\t\t\t\tnoteNum = n - octave * 12;\r\n\t\t\t}\r\n\r\n\t\t\t// get note name (c#, d, f# etc)\r\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\r\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\r\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\r\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\r\n\t\t\t}\r\n\t\t\treturn noteName + octave;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\r\n\t\t *\r\n\t\t * @param {number} bpm - A number in beats per minute.\r\n\t\t * @returns {number} The number of microseconds per quarter note.\r\n\t\t */\r\n\t\tmpqnFromBpm: function(bpm) {\r\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\r\n\t\t\tvar ret=[];\r\n\t\t\tdo {\r\n\t\t\t\tret.unshift(mpqn & 0xFF);\r\n\t\t\t\tmpqn >>= 8;\r\n\t\t\t} while (mpqn);\r\n\t\t\twhile (ret.length < 3) {\r\n\t\t\t\tret.push(0);\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\r\n\t\t *\r\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\r\n\t\t * @returns {number} A number in beats per minute.\r\n\t\t */\r\n\t\tbpmFromMpqn: function(mpqn) {\r\n\t\t\tvar m = mpqn;\r\n\t\t\tif (typeof mpqn[0] != 'undefined') {\r\n\t\t\t\tm = 0;\r\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\r\n\t\t\t\t\tm |= mpqn[i] << l;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn Math.floor(60000000 / mpqn);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\r\n\t\t * it to be converted into a base64 string.\r\n\t\t *\r\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\r\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\r\n\t\t */\r\n\t\tcodes2Str: function(byteArray) {\r\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\r\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\r\n\t\t * `finalBytes` parameter.\r\n\t\t *\r\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\r\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\r\n\t\t * (not nibbles) that the returned array should contain.\r\n\t\t * @returns {Array} An array of nibbles.\r\n\t\t */\r\n\t\tstr2Bytes: function (str, finalBytes) {\r\n\t\t\tif (finalBytes) {\r\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\r\n\t\t\t}\r\n\r\n\t\t\tvar bytes = [];\r\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\r\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\r\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\r\n\t\t\t}\r\n\r\n\t\t\treturn bytes;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\r\n\t\t * of bytes with the time values. MIDI has a very particular way to express\r\n\t\t * time; take a good look at the spec before ever touching this function.\r\n\t\t *\r\n\t\t * @param {number} ticks - Number of ticks to be translated.\r\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\r\n\t\t */\r\n\t\ttranslateTickTime: function(ticks) {\r\n\t\t\tvar buffer = ticks & 0x7F;\r\n\r\n\t\t\twhile (ticks = ticks >> 7) {\r\n\t\t\t\tbuffer <<= 8;\r\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\r\n\t\t\t}\r\n\r\n\t\t\tvar bList = [];\r\n\t\t\twhile (true) {\r\n\t\t\t\tbList.push(buffer & 0xff);\r\n\r\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\r\n\t\t\t\telse { break; }\r\n\t\t\t}\r\n\t\t\treturn bList;\r\n\t\t},\r\n\r\n\t};\r\n\r\n\t/* ******************************************************************\r\n\t * Event class\r\n\t ****************************************************************** */\r\n\r\n\t/**\r\n\t * Construct a MIDI event.\r\n\t *\r\n\t * Parameters include:\r\n\t *  - time [optional number] - Ticks since previous event.\r\n\t *  - type [required number] - Type of event.\r\n\t *  - channel [required number] - Channel for the event.\r\n\t *  - param1 [required number] - First event parameter.\r\n\t *  - param2 [optional number] - Second event parameter.\r\n\t */\r\n\tvar MidiEvent = function(params) {\r\n\t\tif (!this) return new MidiEvent(params);\r\n\t\tif (params &&\r\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\r\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\r\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\r\n\t\t\tthis.setTime(params.time);\r\n\t\t\tthis.setType(params.type);\r\n\t\t\tthis.setChannel(params.channel);\r\n\t\t\tthis.setParam1(params.param1);\r\n\t\t\tthis.setParam2(params.param2);\r\n\t\t}\r\n\t};\r\n\r\n\t// event codes\r\n\tMidiEvent.NOTE_OFF           = 0x80;\r\n\tMidiEvent.NOTE_ON            = 0x90;\r\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\r\n\tMidiEvent.CONTROLLER         = 0xB0;\r\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\r\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\r\n\tMidiEvent.PITCH_BEND         = 0xE0;\r\n\r\n\r\n\t/**\r\n\t * Set the time for the event in ticks since the previous event.\r\n\t *\r\n\t * @param {number} ticks - The number of ticks since the previous event. May\r\n\t * be zero.\r\n\t */\r\n\tMidiEvent.prototype.setTime = function(ticks) {\r\n\t\tthis.time = Util.translateTickTime(ticks || 0);\r\n\t};\r\n\r\n\t/**\r\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\r\n\t *\r\n\t * @param {number} type - Event type.\r\n\t */\r\n\tMidiEvent.prototype.setType = function(type) {\r\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\r\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\r\n\t\t}\r\n\r\n\t\tthis.type = type;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\r\n\t *\r\n\t * @param {number} channel - The event channel.\r\n\t */\r\n\tMidiEvent.prototype.setChannel = function(channel) {\r\n\t\tif (channel < 0 || channel > 15) {\r\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\r\n\t\t}\r\n\r\n\t\tthis.channel = channel;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the first parameter for the event. Must be between 0 and 255,\r\n\t * inclusive.\r\n\t *\r\n\t * @param {number} p - The first event parameter value.\r\n\t */\r\n\tMidiEvent.prototype.setParam1 = function(p) {\r\n\t\tthis.param1 = p;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the second parameter for the event. Must be between 0 and 255,\r\n\t * inclusive.\r\n\t *\r\n\t * @param {number} p - The second event parameter value.\r\n\t */\r\n\tMidiEvent.prototype.setParam2 = function(p) {\r\n\t\tthis.param2 = p;\r\n\t};\r\n\r\n\t/**\r\n\t * Serialize the event to an array of bytes.\r\n\t *\r\n\t * @returns {Array} The array of serialized bytes.\r\n\t */\r\n\tMidiEvent.prototype.toBytes = function() {\r\n\t\tvar byteArray = [];\r\n\r\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\r\n\r\n\t\tbyteArray.push.apply(byteArray, this.time);\r\n\t\tbyteArray.push(typeChannelByte);\r\n\t\tbyteArray.push(this.param1);\r\n\r\n\t\t// Some events don't have a second parameter\r\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\r\n\t\t\tbyteArray.push(this.param2);\r\n\t\t}\r\n\t\treturn byteArray;\r\n\t};\r\n\r\n\t/* ******************************************************************\r\n\t * MetaEvent class\r\n\t ****************************************************************** */\r\n\r\n\t/**\r\n\t * Construct a meta event.\r\n\t *\r\n\t * Parameters include:\r\n\t *  - time [optional number] - Ticks since previous event.\r\n\t *  - type [required number] - Type of event.\r\n\t *  - data [optional array|string] - Event data.\r\n\t */\r\n\tvar MetaEvent = function(params) {\r\n\t\tif (!this) return new MetaEvent(params);\r\n\t\tvar p = params || {};\r\n\t\tthis.setTime(params.time);\r\n\t\tthis.setType(params.type);\r\n\t\tthis.setData(params.data);\r\n\t};\r\n\r\n\tMetaEvent.SEQUENCE   = 0x00;\r\n\tMetaEvent.TEXT       = 0x01;\r\n\tMetaEvent.COPYRIGHT  = 0x02;\r\n\tMetaEvent.TRACK_NAME = 0x03;\r\n\tMetaEvent.INSTRUMENT = 0x04;\r\n\tMetaEvent.LYRIC      = 0x05;\r\n\tMetaEvent.MARKER     = 0x06;\r\n\tMetaEvent.CUE_POINT  = 0x07;\r\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\r\n\tMetaEvent.END_OF_TRACK   = 0x2f;\r\n\tMetaEvent.TEMPO      = 0x51;\r\n\tMetaEvent.SMPTE      = 0x54;\r\n\tMetaEvent.TIME_SIG   = 0x58;\r\n\tMetaEvent.KEY_SIG    = 0x59;\r\n\tMetaEvent.SEQ_EVENT  = 0x7f;\r\n\r\n\t/**\r\n\t * Set the time for the event in ticks since the previous event.\r\n\t *\r\n\t * @param {number} ticks - The number of ticks since the previous event. May\r\n\t * be zero.\r\n\t */\r\n\tMetaEvent.prototype.setTime = function(ticks) {\r\n\t\tthis.time = Util.translateTickTime(ticks || 0);\r\n\t};\r\n\r\n\t/**\r\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\r\n\t *\r\n\t * @param {number} t - Event type.\r\n\t */\r\n\tMetaEvent.prototype.setType = function(t) {\r\n\t\tthis.type = t;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the data associated with the event. May be a string or array of byte\r\n\t * values.\r\n\t *\r\n\t * @param {string|Array} d - Event data.\r\n\t */\r\n\tMetaEvent.prototype.setData = function(d) {\r\n\t\tthis.data = d;\r\n\t};\r\n\r\n\t/**\r\n\t * Serialize the event to an array of bytes.\r\n\t *\r\n\t * @returns {Array} The array of serialized bytes.\r\n\t */\r\n\tMetaEvent.prototype.toBytes = function() {\r\n\t\tif (!this.type) {\r\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\r\n\t\t}\r\n\r\n\t\tvar byteArray = [];\r\n\t\tbyteArray.push.apply(byteArray, this.time);\r\n\t\tbyteArray.push(0xFF, this.type);\r\n\r\n\t\t// If data is an array, we assume that it contains several bytes. We\r\n\t\t// apend them to byteArray.\r\n\t\tif (Array.isArray(this.data)) {\r\n\t\t\tbyteArray.push(this.data.length);\r\n\t\t\tbyteArray.push.apply(byteArray, this.data);\r\n\t\t} else if (typeof this.data == 'number') {\r\n\t\t\tbyteArray.push(1, this.data);\r\n\t\t} else if (this.data !== null && this.data !== undefined) {\r\n\t\t\t// assume string; may be a bad assumption\r\n\t\t\tbyteArray.push(this.data.length);\r\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\r\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\r\n\t\t} else {\r\n\t\t\tbyteArray.push(0);\r\n\t\t}\r\n\r\n\t\treturn byteArray;\r\n\t};\r\n\r\n\t/* ******************************************************************\r\n\t * Track class\r\n\t ****************************************************************** */\r\n\r\n\t/**\r\n\t * Construct a MIDI track.\r\n\t *\r\n\t * Parameters include:\r\n\t *  - events [optional array] - Array of events for the track.\r\n\t */\r\n\tvar Track = function(config) {\r\n\t\tif (!this) return new Track(config);\r\n\t\tvar c = config || {};\r\n\t\tthis.events = c.events || [];\r\n\t};\r\n\r\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\r\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\r\n\r\n\t/**\r\n\t * Add an event to the track.\r\n\t *\r\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.addEvent = function(event) {\r\n\t\tthis.events.push(event);\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Add a note-on event to the track.\r\n\t *\r\n\t * @param {number} channel - The channel to add the event to.\r\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\r\n\t * symbolic.\r\n\t * @param {number} [time=0] - The number of ticks since the previous event,\r\n\t * defaults to 0.\r\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\r\n\t * DEFAULT_VOLUME.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\r\n\t\tthis.events.push(new MidiEvent({\r\n\t\t\ttype: MidiEvent.NOTE_ON,\r\n\t\t\tchannel: channel,\r\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\r\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\r\n\t\t\ttime: time || 0,\r\n\t\t}));\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Add a note-off event to the track.\r\n\t *\r\n\t * @param {number} channel - The channel to add the event to.\r\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\r\n\t * symbolic.\r\n\t * @param {number} [time=0] - The number of ticks since the previous event,\r\n\t * defaults to 0.\r\n\t * @param {number} [velocity=90] - The velocity the note was released,\r\n\t * defaults to DEFAULT_VOLUME.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\r\n\t\tthis.events.push(new MidiEvent({\r\n\t\t\ttype: MidiEvent.NOTE_OFF,\r\n\t\t\tchannel: channel,\r\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\r\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\r\n\t\t\ttime: time || 0,\r\n\t\t}));\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Add a note-on and -off event to the track.\r\n\t *\r\n\t * @param {number} channel - The channel to add the event to.\r\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\r\n\t * symbolic.\r\n\t * @param {number} dur - The duration of the note, in ticks.\r\n\t * @param {number} [time=0] - The number of ticks since the previous event,\r\n\t * defaults to 0.\r\n\t * @param {number} [velocity=90] - The velocity the note was released,\r\n\t * defaults to DEFAULT_VOLUME.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\r\n\t\tthis.noteOn(channel, pitch, time, velocity);\r\n\t\tif (dur) {\r\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\r\n\t *\r\n\t * @param {number} channel - The channel to add the event to.\r\n\t * @param {array} chord - An array of pitches, either numeric or\r\n\t * symbolic.\r\n\t * @param {number} dur - The duration of the chord, in ticks.\r\n\t * @param {number} [velocity=90] - The velocity of the chord,\r\n\t * defaults to DEFAULT_VOLUME.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\r\n\t\tif (!Array.isArray(chord) && !chord.length) {\r\n\t\t\tthrow new Error('Chord must be an array of pitches');\r\n\t\t}\r\n\t\tchord.forEach(function(note) {\r\n\t\t\tthis.noteOn(channel, note, 0, velocity);\r\n\t\t}, this);\r\n\t\tchord.forEach(function(note, index) {\r\n\t\t\tif (index === 0) {\r\n\t\t\t\tthis.noteOff(channel, note, dur);\r\n\t\t\t} else {\r\n\t\t\t\tthis.noteOff(channel, note);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Set instrument for the track.\r\n\t *\r\n\t * @param {number} channel - The channel to set the instrument on.\r\n\t * @param {number} instrument - The instrument to set it to.\r\n\t * @param {number} [time=0] - The number of ticks since the previous event,\r\n\t * defaults to 0.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\r\n\t\tthis.events.push(new MidiEvent({\r\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\r\n\t\t\tchannel: channel,\r\n\t\t\tparam1: instrument,\r\n\t\t\ttime: time || 0,\r\n\t\t}));\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the tempo for the track.\r\n\t *\r\n\t * @param {number} bpm - The new number of beats per minute.\r\n\t * @param {number} [time=0] - The number of ticks since the previous event,\r\n\t * defaults to 0.\r\n\t * @returns {Track} The current track.\r\n\t */\r\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\r\n\t\tthis.events.push(new MetaEvent({\r\n\t\t\ttype: MetaEvent.TEMPO,\r\n\t\t\tdata: Util.mpqnFromBpm(bpm),\r\n\t\t\ttime: time || 0,\r\n\t\t}));\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * Serialize the track to an array of bytes.\r\n\t *\r\n\t * @returns {Array} The array of serialized bytes.\r\n\t */\r\n\tTrack.prototype.toBytes = function() {\r\n\t\tvar trackLength = 0;\r\n\t\tvar eventBytes = [];\r\n\t\tvar startBytes = Track.START_BYTES;\r\n\t\tvar endBytes   = Track.END_BYTES;\r\n\r\n\t\tvar addEventBytes = function(event) {\r\n\t\t\tvar bytes = event.toBytes();\r\n\t\t\ttrackLength += bytes.length;\r\n\t\t\teventBytes.push.apply(eventBytes, bytes);\r\n\t\t};\r\n\r\n\t\tthis.events.forEach(addEventBytes);\r\n\r\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\r\n\t\t// they are counted (unlike the start-of-track ones).\r\n\t\ttrackLength += endBytes.length;\r\n\r\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\r\n\t\t// the length is less than that (the usual case).\r\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\r\n\r\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\r\n\t};\r\n\r\n\t/* ******************************************************************\r\n\t * File class\r\n\t ****************************************************************** */\r\n\r\n\t/**\r\n\t * Construct a file object.\r\n\t *\r\n\t * Parameters include:\r\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\r\n\t *    Must be 1-32767.\r\n\t *  - tracks [optional array] - Track data.\r\n\t */\r\n\tvar File = function(config){\r\n\t\tif (!this) return new File(config);\r\n\r\n\t\tvar c = config || {};\r\n\t\tif (c.ticks) {\r\n\t\t\tif (typeof c.ticks !== 'number') {\r\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\r\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.ticks = c.ticks || 128;\r\n\t\tthis.tracks = c.tracks || [];\r\n\t};\r\n\r\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\r\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\r\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\r\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\r\n\r\n\t/**\r\n\t * Add a track to the file.\r\n\t *\r\n\t * @param {Track} track - The track to add.\r\n\t */\r\n\tFile.prototype.addTrack = function(track) {\r\n\t\tif (track) {\r\n\t\t\tthis.tracks.push(track);\r\n\t\t\treturn this;\r\n\t\t} else {\r\n\t\t\ttrack = new Track();\r\n\t\t\tthis.tracks.push(track);\r\n\t\t\treturn track;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Serialize the MIDI file to an array of bytes.\r\n\t *\r\n\t * @returns {Array} The array of serialized bytes.\r\n\t */\r\n\tFile.prototype.toBytes = function() {\r\n\t\tvar trackCount = this.tracks.length.toString(16);\r\n\r\n\t\t// prepare the file header\r\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\r\n\r\n\t\t// set Midi type based on number of tracks\r\n\t\tif (parseInt(trackCount, 16) > 1) {\r\n\t\t\tbytes += File.HDR_TYPE1;\r\n\t\t} else {\r\n\t\t\tbytes += File.HDR_TYPE0;\r\n\t\t}\r\n\r\n\t\t// add the number of tracks (2 bytes)\r\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\r\n\t\t// add the number of ticks per beat (currently hardcoded)\r\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\r\n\r\n\t\t// iterate over the tracks, converting to bytes too\r\n\t\tthis.tracks.forEach(function(track) {\r\n\t\t\tbytes += Util.codes2Str(track.toBytes());\r\n\t\t});\r\n\r\n\t\treturn bytes;\r\n\t};\r\n\r\n\t/* ******************************************************************\r\n\t * Exports\r\n\t ****************************************************************** */\r\n\r\n\texported.Util = Util;\r\n\texported.File = File;\r\n\texported.Track = Track;\r\n\texported.Event = MidiEvent;\r\n\texported.MetaEvent = MetaEvent;\r\n\r\n})( Midi );\r\n\r\nif ( true && module !== null) {\r\n\tmodule.exports = Midi;\r\n} else if ( true && exports !== null) {\r\n\texports = Midi;\r\n} else {\r\n\tthis.Midi = Midi;\r\n}\r\n\n\n//# sourceURL=webpack://Synthesizer/./src/js/jsmidgen.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/SheetMusic.js");
/******/ 	
/******/ })()
;