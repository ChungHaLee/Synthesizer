/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Share.js":
/*!*************************!*\
  !*** ./src/js/Share.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MusicClip\": () => (/* binding */ MusicClip),\n/* harmony export */   \"MusicClipType\": () => (/* binding */ MusicClipType),\n/* harmony export */   \"SyntheysizerEvents\": () => (/* binding */ SyntheysizerEvents),\n/* harmony export */   \"dial_set\": () => (/* binding */ dial_set),\n/* harmony export */   \"joystick_set\": () => (/* binding */ joystick_set),\n/* harmony export */   \"note_set\": () => (/* binding */ note_set),\n/* harmony export */   \"pad_set\": () => (/* binding */ pad_set)\n/* harmony export */ });\n//공용 변수 관리를 위해 만든 코드\n\nconst SyntheysizerEvents = window;\n\nconst note_set = {\n  pitch: 0,\n  note: 0,\n  value: 0\n};\n\nconst pad_set = {\n  id: 0,\n};\n\nconst dial_set = {\n  value: [[0.0, 0.0, 0.0, 0.0],  //순서대로 [[11, 12, 13, 14],\n          [0.0, 0.0, 0.0, 0.0]]   //순서대로  [21, 22, 23, 24]]\n}; \n\nconst joystick_set = {\n  value:[0, 0]\n};  \n\nconst MusicClipType = {\n  Melody: \"Melody\",\n  Beat: \"Beat\",\n  Base: \"Base\"\n}\n\nconst MusicNote = {\n  note:\"C0\",\n  intensity : 0.0,\n  start: 0.0,\n  end: -1.0\n}\n\nclass MusicClip {\n  constructor (Type, Clip_id, duration = 15, instrument_id = 0) {\n      console.log(\"music Type : \", Type, \"Clip_id\", Clip_id,  duration = 15);\n      this.Type = Type;\n      this.Clip_id = Clip_id;\n      this.duration = duration;\n      this.instrument_id = instrument_id;\n      if(Type==MusicClipType.Melody){\n        this.melodyNoteSet = [];\n        this.melodyTimeset = [];\n      }\n      if(Type==MusicClipType.Beat){\n        this.beatSet = [];\n        this.beatTime = [];\n      }\n  }\n  setType(type){\n    console.log(\"Set Type: \", type);\n    this.Type = type;\n  }\n\n  setNoteInput(note, time) {\n    if(this.Type==MusicClipType.Melody){\n      //console.log(\"Pitch input Time:\", pitch, time);\n      this.melodyNoteSet.push(note);\n      this.melodyTimeset.push([time, -1]);\n    }\n    else{\n      alert(\"This Cilp type is Melody\");\n    }\n  }\n  setNoteRelease(note, time) {\n    if(this.Type==MusicClipType.Melody){\n      //console.log(\"Pitch Release Time:\", pitch, time);\n      for (let i = this.melodyNoteSet.length - 1; i >= 0; i--) {\n        if (this.melodyNoteSet[i] === note) {\n          if(this.melodyTimeset[i][1] == -1){\n            this.melodyTimeset[i][1] = time;\n            break;\n          }\n          break;\n        }\n      }\n    }\n    else{\n      alert(\"This Cilp type is Melody\");\n    }\n  }\n  setBeatInput(pad_id, time) {\n    if(this.Type==MusicClipType.Beat){\n      //console.log(\"Beat input Time:\", pad_id, time);\n      this.beatSet.push(pad_id);\n      this.beatTime.push(time);\n    }\n    else{\n      alert(\"This Clip type is Beat\");\n    }\n  }\n  setDuration(duration){\n    this.duration = duration;\n  }\n  serInstrument(instrument_id){\n    this.instrument_id = instrument_id;\n  }\n  editNote(noteIndex, deltaTimeset){\n    if(this.Type==MusicClipType.Melody){\n      this.melodyTimeset[noteIndex][0] += deltaTimeset[0];\n      this.melodyTimeset[noteIndex][1] += deltaTimeset[1];\n    }\n    else{\n      this.beatTime[noteIndex] += deltaTimeset[0];\n    }\n  }\n  getClipId(){\n    return this.Clip_id;\n  }\n  getClipType(){\n    return this.Type;\n  }\n  getDuration(){\n    return this.duration;\n  }\n  getNoteIndex(){\n    if(this.Type==MusicClipType.Melody){\n      return this.melodyNoteSet.length - 1;\n    }\n    else{\n      return this.beatSet.length - 1;\n    }\n  }\n  getMusicClip(){\n    if(this.Type==MusicClipType.Melody){\n      return [this.melodyNoteSet, this.melodyTimeset]\n    }\n    else{\n      return [this.beatSet, this.beatTime]\n    }\n  }\n\n  getcurrentNoteSet(currentTime){\n    const noteSet = []\n    if(this.Type==MusicClipType.Melody){\n      return [this.melodyNoteSet, this.melodyTimeset]\n    }\n    else{\n      return [this.beatSet, this.beatTime]\n    }\n  }\n  getCurrentNoteByTime(timeSetArray, currentTime) {\n    const indexes = [];\n    for (let i = 0; i < timeSetArray.length; i++) {\n      if (timeSetArray[i][0] <= currentTime && currentTime < timeSetArray[i][1]) {\n        indexes.push(i);\n      }\n    }\n    return indexes;\n  }\n\n}\n\n\n//# sourceURL=webpack://Synthesizer/./src/js/Share.js?");

/***/ }),

/***/ "./src/js/SheetMusic.js":
/*!******************************!*\
  !*** ./src/js/SheetMusic.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Share_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Share.js */ \"./src/js/Share.js\");\n\n//최소 범위 A2 ~ C7\n\n\nconst clip_box_width = 1880;\nconst clip_start_px = 60;\nlet fps = 30;\nlet currentTime = 0.0;\nlet play_state = false;\nlet timer = null;\nlet duration = 30\nlet clipduration = document.getElementById(\"clipduration\");\nlet timeLine1 = document.getElementById(\"timeLine1\");\nlet timeLine2 = document.getElementById(\"timeLine2\");\nconst Melody_clip_array = [];\nconst Beat_clip_array = []  ;\nlet current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody;\nlet melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration)\nlet beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration)\nlet onNoteList = []\n\n\nclipduration.addEventListener(\"change\", function(){\n  duration = parseFloat(clipduration.value);\n  noteSizeAllOff();\n  clearNoteClip(current_clip_type);\n  if(time_to_px(currentTime, duration) >= clip_box_width){\n    $(\"#slider\").slider(\"value\", clip_box_width);\n    timeLine2.style.left = clip_box_width + \"px\";\n    timeLine1.style.left = clip_box_width + \"px\";\n  }\n  else{\n    $(\"#slider\").slider(\"value\",time_to_px(currentTime, duration));\n    timeLine2.style.left = time_to_px(currentTime, duration) + \"px\";\n    timeLine1.style.left = time_to_px(currentTime, duration) + \"px\";\n  }\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    melody_clip.setDuration(duration);\n    loadClip(melody_clip, duration);\n  }\n  else{\n    beat_clip.setDuration(duration);\n    loadClip(beat_clip, duration);\n  }\n})\nfunction startRecording(){//Timer를 시작하는 코드\n  play_state = true;\n  startTimer();\n}\nfunction stopRecording(){//Timer를 중지하는 코드\n  play_state = false;\n  noteSizeAllOff();\n  stopTimer();\n}\nfunction updateTime() { //시간에 따라 업데이트 해야하는 함수들\n  currentTime += 1/fps;\n  $(\"#slider\").slider(\"value\",time_to_px(currentTime, duration));\n  timeLine2.style.left = time_to_px(currentTime, duration) + \"px\";\n  timeLine1.style.left = time_to_px(currentTime, duration) + \"px\";\n  // console.log(onNoteList[0].style.left, time_to_px(currentTime, duration) + \"px\")\n  for (let item of onNoteList){\n    noteResizeChanger(item, time_to_px(currentTime, duration));\n  }\n  \n  if(currentTime >= duration){\n    stopRecording() //끝 도달하면 자동으로 종료\n  }\n}\nfunction startTimer() {\n  if (!timer) { // 타이머가 이미 실행 중이지 않은 경우에만 실행\n    timer = setInterval(updateTime, 1 / fps * 1000); // 0.01초 간격으로 updateTime 함수 실행\n  }\n}\nfunction stopTimer() {\n  clearInterval(timer); // 타이머 정지\n  timer = null; // 타이머 변수 초기화\n}\n\n$(\"#slider\").slider({ //Timer 슬라이더\n  value: clip_start_px,\n  min: clip_start_px,\n  max: clip_box_width,\n  step: 0.01,\n  slide: function( event, ui ) {\n    timeLine1.style.left = (ui.value) + \"px\";\n    timeLine2.style.left = (ui.value) + \"px\";\n    currentTime = px_to_time(ui.value, duration);\n    noteSizeAllOff();\n  }\n});\nfunction initializeTimer(){ //Timer 초기화\n  stopRecording();\n  currentTime = 0.0;\n  $(\"#slider\").slider(\"value\",time_to_px(currentTime, duration));\n  timeLine2.style.left = time_to_px(currentTime, duration) + \"px\";\n  timeLine1.style.left = time_to_px(currentTime, duration) + \"px\";\n}\n\nfunction time_to_px(time, duration){ //Time을 Px로 변환하는 코드\n  return clip_start_px + time / duration * (clip_box_width - clip_start_px)\n}\nfunction px_to_time(px, duration){  //Px을 Time으로 변환하는 코드\n  return (px - clip_start_px) * duration / (clip_box_width - clip_start_px)\n}\nfunction px_to_time_Scale(px, duration){  //Px을 Time으로 변환하는 코드\n  return px * duration / (clip_box_width - clip_start_px)\n}\n\nfunction createResizeDragElement(note, leftPosition, noteId, type) { //Melody, Beat 노트 생성\n  const Itemid = \"box_\" + note; \n  const boxItem = document.getElementById(Itemid); //노트에 해당하는 Box를 찾아오기(속도가 더 빠름)\n  const resizeDrag = document.createElement(\"div\");\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    resizeDrag.classList.add(\"resize-drag\");  // resize-drag로 생성\n  }\n  else{\n    resizeDrag.classList.add(\"draggable\");  // resize-drag로 생성\n  }\n  resizeDrag.textContent = \" \"; //내용이 있어야 나와서 -로 일단 임시로 추가\n  resizeDrag.style.left = leftPosition + \"px\"; // left 스타일 추가\n  resizeDrag.setAttribute(\"note_id\", noteId); // note_id 속성 추가\n  resizeDrag.setAttribute(\"note\", note); // note_id 속성 추가\n  boxItem.appendChild(resizeDrag);\n  return resizeDrag\n}\nfunction noteResizeChanger(noteObejct, target_pix){\n  const currentWidth = 10;  //Meldoy 음표의 최소 길이값(css에서 변경시 바꿔야함)\n  const currentleft = parseFloat(noteObejct.style.left);\n  if(currentWidth < target_pix - currentleft){\n    noteObejct.style.width = (target_pix - currentleft) + \"px\";\n  }\n}\nfunction noteSizeAllOff(){ //Note 변화용 array 초기화\n  for (let i = 0; i < onNoteList.length; i++) {\n    melody_clip.setNoteRelease(onNoteList[i].getAttribute(\"note\"), currentTime);\n  }\n  onNoteList = [];\n}\nfunction noteOff(note){//Note 변화 설정 초기화\n  for (let i = 0; i < onNoteList.length; i++) {\n    if (onNoteList[i].getAttribute(\"note\") === note) {\n      onNoteList.splice(i, 1);\n      break;\n    }\n  }\n}\n\ndocument.getElementById(\"sheetMusicMelodyButton\").addEventListener('click', function (){\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody;\n  document.getElementById(\"BeatContainer\").style.display = 'none' \n  document.getElementById(\"MelodyContainer\").style.display = 'block'\n})\ndocument.getElementById(\"sheetMusicBeatButton\").addEventListener('click', function (){\n  current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat;\n  document.getElementById(\"BeatContainer\").style.display = 'block'\n  document.getElementById(\"MelodyContainer\").style.display = 'none'\n})\ndocument.getElementById(\"sheetMusicSaveButton\").addEventListener('click', function (){\n  if(current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){     //멜로디 클립 저장 시\n    if(melody_clip.getNoteIndex() != -1){\n      createClipBox(melody_clip);\n      Melody_clip_array.push(melody_clip);\n      melody_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody, Melody_clip_array.length, duration);\n      alert(\"Melody Clip saved\")\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\n      initializeTimer();\n    }\n    else{\n      alert(\"There isn't any note in clip\");\n    }\n  }\n  else{                                         //비트   클립 저장시\n    if(beat_clip.getNoteIndex() != -1){\n      createClipBox(beat_clip);\n      Beat_clip_array.push(beat_clip);\n      beat_clip = new _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat, Beat_clip_array.length, duration);\n      alert(\"Beat Clip saved\")\n      clearNoteClip(_Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\n      initializeTimer();\n    }\n    else{\n      alert(\"There isn't any note in clip\");\n    }\n  }\n})\ndocument.getElementById(\"sheetMusicPlayButton\").addEventListener('click', function (){\n  startRecording();\n})\ndocument.getElementById(\"sheetMusicPauseButton\").addEventListener('click', function (){\n  stopRecording();\n})\n\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('noteInput', function (e){\n  if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    melody_clip.setNoteInput(e.detail.note, currentTime);\n    let NoteItem = createResizeDragElement(e.detail.note, time_to_px(currentTime, duration), melody_clip.getNoteIndex(), _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\n    onNoteList.push(NoteItem); \n  }\n})\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('noteRelease', function (e){\n  if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    melody_clip.setNoteRelease(e.detail.note, currentTime);\n    noteOff(e.detail.note)\n  }\n})\n_Share_js__WEBPACK_IMPORTED_MODULE_0__.SyntheysizerEvents.addEventListener('padInput', function (e){\n  if(play_state && current_clip_type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat){\n    beat_clip.setBeatInput(e.detail.id, currentTime);\n    let PadItem = createResizeDragElement(e.detail.id, time_to_px(currentTime, duration), beat_clip.getNoteIndex(), _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\n  }\n})\n\nfunction removeAllElementsByClassName(className) {//\n  const elements = document.getElementsByClassName(className);\n  while (elements.length > 0) {\n    elements[0].parentNode.removeChild(elements[0]);\n  }\n}\n\nfunction clearNoteClip(type){// 편집기에 모든 노트 제거\n  if(type == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    removeAllElementsByClassName(\"resize-drag\");\n  }\n  else{\n    removeAllElementsByClassName(\"draggable\");\n  }\n}\n\nfunction loadClip(MusicClip, duration){//입력 클립을 편집기에 반영\n  if(MusicClip.getClipType() == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    const [NoteSet, TimeSet] = MusicClip.getMusicClip()\n    for(let i=0; i<NoteSet.length; i++){\n      console.log(NoteSet[i], time_to_px(TimeSet[i][0], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody)\n      let NoteItem = createResizeDragElement(NoteSet[i], time_to_px(TimeSet[i][0], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody);\n      noteResizeChanger(NoteItem, time_to_px(TimeSet[i][1], duration));\n    }\n  }\n  else{\n    const [padSet, TimeSet] = MusicClip.getMusicClip()\n    for(let i=0; i<padSet.length; i++){\n      console.log(padSet[i], time_to_px(TimeSet[i][0], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat)\n      let NoteItem = createResizeDragElement(padSet[i], time_to_px(TimeSet[i], duration), i, _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Beat);\n    }\n  }\n}\nfunction changeMusicClip(noteIndex, deltaTimeset){//노트 위치, 크기 편집을 클립 시간에 반영\n  if(current_clip_type = _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    melody_clip.editNote(noteIndex, deltaTimeset)\n  }\n  else{\n    beat_clip.editNote(noteIndex, deltaTimeset)\n  }\n}\n\n\n\n//track 용 코드\nfunction createClipBox(musicClip) { //Melody, Beat 노트 생성\n  let currenctCliptType = musicClip.getClipType();\n  let clip_id = musicClip.getClipId();\n  //let clip_id = 0\n  const dragdrop = document.createElement(\"div\");\n  dragdrop.classList.add(\"drag-drop\");  // resize-drag로 생성\n  dragdrop.setAttribute(\"clip_id\", clip_id); // note_id 속성 추가\n  dragdrop.setAttribute(\"clip_type\", currenctCliptType); // note_id 속성 추가\n  if(currenctCliptType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    dragdrop.textContent = \"Melody_\" + clip_id; //내용이 있어야 나와서 -로 일단 임시로 추가\n    dragdrop.setAttribute(\"id\", \"melody-drop\");\n    let boxItem = document.getElementById(\"MelodydropContainer\");\n    boxItem.appendChild(dragdrop);\n  }\n  else{\n    dragdrop.textContent = \"Beat_\" + clip_id; //내용이 있어야 나와서 -로 일단 임시로 추가\n    dragdrop.setAttribute(\"id\", \"beat-drop\");\n    let boxItem = document.getElementById(\"BeatdropContainer\");\n    boxItem.appendChild(dragdrop);\n  }\n}\nfunction createTrackClipObject(dropzoneName, musicClip){\n  let currenctCliptType = musicClip.getClipType();\n  let clip_id = musicClip.getClipId();\n  let duration = musicClip.getDuration();\n  const trackClip = document.createElement(\"div\");\n  trackClip.classList.add(\"draggable_clip\");\n  trackClip.style.width = duration * 10 + \"px\"\n  if(currenctCliptType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    trackClip.textContent = \"Melody_\" + clip_id; //내용이 있어야 나와서 -로 일단 임시로 추가\n    //dragdrop.setAttribute(\"id\", \"melody-drop\");\n  }\n  else{\n    trackClip.textContent = \"Beat_\" + clip_id; //내용이 있어야 나와서 -로 일단 임시로 추가\n    //dragdrop.setAttribute(\"id\", \"beat-drop\");\n  }\n\n  let boxItem = document.getElementById(dropzoneName);\n  boxItem.appendChild(trackClip);\n}\nfunction get_clip(clipType, clip_id){\n  if(clipType == _Share_js__WEBPACK_IMPORTED_MODULE_0__.MusicClipType.Melody){\n    return Melody_clip_array[clip_id]\n    //dragdrop.setAttribute(\"id\", \"melody-drop\");\n  }\n  else{\n    return Beat_clip_array[clip_id]\n    //dragdrop.setAttribute(\"id\", \"beat-drop\");\n  }\n}\n\n$(\"#slider_track\").slider({ //Timer 슬라이더\n  value: 0,\n  min: 0,\n  max: 600,\n  step: 0.1,\n  slide: function( event, ui ) {\n\n  }\n});\n\n\n\n\n\n\n\n\n//Note Interaction용\ninteract('.resize-drag')\n  .resizable({\n    edges: { top: false, left: true, bottom: false, right: true },\n    listeners: {\n      move: function (event) {\n        let { x, y } = event.target.dataset\n        x = (parseFloat(x) || 0) + event.deltaRect.left\n        y = (parseFloat(y) || 0) + event.deltaRect.top\n        Object.assign(event.target.style, {\n          width: `${event.rect.width}px`,\n          height: `${event.rect.height}px`,\n          transform: `translate(${x}px, ${y}px)`\n        })\n        console.log( \"id:\", event.target.getAttribute(\"note_id\"), \"Add timeset:\", [px_to_time_Scale(event.deltaRect.left, duration), px_to_time_Scale(event.deltaRect.left + event.deltaRect.width, duration)]);\n        changeMusicClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.deltaRect.left, duration), px_to_time_Scale(event.deltaRect.left + event.deltaRect.width, duration)])\n        \n        Object.assign(event.target.dataset, { x, y })\n      }\n    }\n  })\n  .draggable({\n    listeners: { move: window.dragMoveListener_note },\n    inertia: true,\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ]\n  })\n  .draggable({\n    // enable inertial throwing\n    inertia: true,\n    // keep the element within the area of it's parent\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ],\n    // enable autoScroll\n    autoScroll: true,\n\n    listeners: {\n      // call this function on every dragmove event\n      move: dragMoveListener_note,\n\n      // call this function on every dragend event\n      end (event) {\n        var textEl = event.target.querySelector('p')\n        textEl && (textEl.textContent =\n          'moved a distance of ' +\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\n                     Math.pow(event.pageY - event.y0, 2) | 0))\n            .toFixed(2) + 'px')\n      }\n    }\n  })\n\n//note 위치 이동용 코드\ninteract('.draggable')\n  .draggable({\n    listeners: { move: window.dragMoveListener_note },\n    inertia: true,\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ]\n  })\n  .draggable({\n    // enable inertial throwing\n    inertia: true,\n    // keep the element within the area of it's parent\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ],\n    // enable autoScroll\n    autoScroll: true,\n    listeners: {\n      // call this function on every dragmove event\n      move: dragMoveListener_note,\n\n      // call this function on every dragend event\n      end (event) {\n        var textEl = event.target.querySelector('p')\n\n        textEl && (textEl.textContent =\n          'moved a distance of ' +\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\n                    Math.pow(event.pageY - event.y0, 2) | 0))\n            .toFixed(2) + 'px')\n      }\n    }\n  })\n\n  interact('.draggable_clip')\n  .draggable({\n    listeners: { move: window.dragMoveListener_clip },\n    inertia: true,\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ]\n  })\n  .draggable({\n    // enable inertial throwing\n    inertia: true,\n    // keep the element within the area of it's parent\n    modifiers: [\n      interact.modifiers.restrictRect({\n        restriction: 'parent',\n        endOnly: true\n      })\n    ],\n    // enable autoScroll\n    autoScroll: true,\n    listeners: {\n      // call this function on every dragmove event\n      move: dragMoveListener_clip,\n\n      // call this function on every dragend event\n      end (event) {\n        var textEl = event.target.querySelector('p')\n\n        textEl && (textEl.textContent =\n          'moved a distance of ' +\n          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\n                    Math.pow(event.pageY - event.y0, 2) | 0))\n            .toFixed(2) + 'px')\n      }\n    }\n  })\n\n\n  function dragMoveListener_note (event) {\n    var target = event.target\n    // keep the dragged position in the data-x/data-y attributes\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\n    var y = 0\n    // translate the element\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\n    console.log( \"id:\", event.target.getAttribute(\"note_id\"), \"Add timeset:\", [px_to_time_Scale(event.dx, duration), px_to_time_Scale(event.dx, duration)]);\n    changeMusicClip(event.target.getAttribute(\"note_id\"), [px_to_time_Scale(event.dx, duration), px_to_time_Scale(event.dx, duration)])\n    // console.log(\"Add Plus :\", px_to_time(x, duration), \"id:\", target.getAttribute(\"note_id\"));\n    // update the posiion attributes\n    target.setAttribute('data-x', x)\n  }\n  \n  function dragMoveListener_clip (event) {\n    var target = event.target\n    // keep the dragged position in the data-x/data-y attributes\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\n    var y = 0\n    // translate the element\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\n    // console.log(\"Add Plus :\", px_to_time(x, duration), \"id:\", target.getAttribute(\"note_id\"));\n    // update the posiion attributes\n    target.setAttribute('data-x', x)\n  }\n\n  //clip alc track 설정용 코드\n  \n  interact('.template-dropzone').dropzone({\n    // only accept elements matching this CSS selector\n    accept: '#template-drop',\n    // Require a 75% element overlap for a drop to be possible\n    overlap: 0.75,\n  \n    // listen for drop related events:\n  \n    ondropactivate: function (event) {\n      // add active dropzone feedback\n      event.target.classList.add('drop-active')\n    },\n    ondragenter: function (event) {\n      var draggableElement = event.relatedTarget\n      var dropzoneElement = event.target\n  \n      // feedback the possibility of a drop\n      dropzoneElement.classList.add('drop-target')\n      draggableElement.classList.add('can-drop')\n      //draggableElement.textContent = 'Dragged in'\n    },\n    ondragleave: function (event) {\n      // remove the drop feedback style\n      event.target.classList.remove('drop-target')\n      event.relatedTarget.classList.remove('can-drop')\n      //event.relatedTarget.textContent = 'Dragged out'\n    },\n    ondrop: function (event) {\n      //event.relatedTarget.textContent = 'Dropped'\n    },\n    ondropdeactivate: function (event) {\n      // remove active dropzone feedback\n      event.target.classList.remove('drop-active')\n      event.target.classList.remove('drop-target')\n    }\n  })\n\n  interact('.melody-dropzone').dropzone({\n    // only accept elements matching this CSS selector\n    accept: '#melody-drop',\n    // Require a 75% element overlap for a drop to be possible\n    overlap: 0.75,\n  \n    // listen for drop related events:\n  \n    ondropactivate: function (event) {\n      // add active dropzone feedback\n      event.target.classList.add('drop-active')\n    },\n    ondragenter: function (event) {\n      var draggableElement = event.relatedTarget\n      var dropzoneElement = event.target\n  \n      // feedback the possibility of a drop\n      dropzoneElement.classList.add('drop-target')\n      draggableElement.classList.add('can-drop')\n      //draggableElement.textContent = 'Dragged in'\n    },\n    ondragleave: function (event) {\n      // remove the drop feedback style\n      event.target.classList.remove('drop-target')\n      event.relatedTarget.classList.remove('can-drop')\n      //event.relatedTarget.textContent = 'Dragged out'\n    },\n    ondrop: function (event) {\n      //event.relatedTarget.textContent = 'Dropped'\n      //createTrackClipObject('melody-dropzone',get_clip(event.target.getAttribute(\"clip_id\"), event.target.getAttribute(\"clip_type\")))\n\n    },\n    ondropdeactivate: function (event) {\n      // remove active dropzone feedback\n      event.target.classList.remove('drop-active')\n      event.target.classList.remove('drop-target')\n      console.log(\"Check clip\", get_clip(event.relatedTarget.getAttribute(\"clip_type\"), event.relatedTarget.getAttribute(\"clip_id\")))\n      createTrackClipObject('melody-dropzone', get_clip(event.relatedTarget.getAttribute(\"clip_type\"), event.relatedTarget.getAttribute(\"clip_id\")))\n      //console.log(event.target)\n    }\n  })\n\n    interact('.beat-dropzone').dropzone({\n    // only accept elements matching this CSS selector\n    accept: '#beat-drop',\n    // Require a 75% element overlap for a drop to be possible\n    overlap: 0.75,\n  \n    // listen for drop related events:\n  \n    ondropactivate: function (event) {\n      // add active dropzone feedback\n      event.target.classList.add('drop-active')\n    },\n    ondragenter: function (event) {\n      var draggableElement = event.relatedTarget\n      var dropzoneElement = event.target\n  \n      // feedback the possibility of a drop\n      dropzoneElement.classList.add('drop-target')\n      draggableElement.classList.add('can-drop')\n      //draggableElement.textContent = 'Dragged in'\n    },\n    ondragleave: function (event) {\n      // remove the drop feedback style\n      event.target.classList.remove('drop-target')\n      event.relatedTarget.classList.remove('can-drop')\n      //event.relatedTarget.textContent = 'Dragged out'\n    },\n    ondrop: function (event) {\n      //event.relatedTarget.textContent = 'Dropped'\n      //createTrackClipObject('beat-dropzone',get_clip(event.target.getAttribute(\"clip_id\"), event.target.getAttribute(\"clip_type\")))\n      \n    },\n    ondropdeactivate: function (event) {\n      // remove active dropzone feedback\n      event.target.classList.remove('drop-active')\n      event.target.classList.remove('drop-target')\n      console.log(\"Check clip\", event.relatedTarget.getAttribute(\"clip_id\"), event.relatedTarget.getAttribute(\"clip_type\"))\n      //createTrackClipObject('beat-dropzone', get_clip(event.relatedTarget.getAttribute(\"clip_type\"), event.relatedTarget.getAttribute(\"clip_id\")))\n      //console.log(\"Check clip\", (event.target.getAttribute(\"clip_id\"), event.target.getAttribute(\"clip_type\")))\n      //console.log(event.target)\n    }\n  })\n  \n  interact('.drag-drop')\n    .draggable({\n      inertia: true,\n      modifiers: [\n        interact.modifiers.restrictRect({\n          restriction: 'parent',\n          endOnly: true\n        })\n      ],\n      autoScroll: true,\n      // dragMoveListener from the dragging demo above\n      listeners: { move: dragMoveListenerxy }\n    })\n  \n  function dragMoveListenerxy (event) {\n    var target = event.target\n    // keep the dragged position in the data-x/data-y attributes\n    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\n    var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy\n    // translate the element\n    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'\n    // update the posiion attributes\n    target.setAttribute('data-x', x)\n    target.setAttribute('data-y', y)\n  }\n\n//# sourceURL=webpack://Synthesizer/./src/js/SheetMusic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/SheetMusic.js");
/******/ 	
/******/ })()
;