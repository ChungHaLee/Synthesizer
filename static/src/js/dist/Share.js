/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Share.js":
/*!*************************!*\
  !*** ./src/js/Share.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MusicClip\": () => (/* binding */ MusicClip),\n/* harmony export */   \"MusicClipType\": () => (/* binding */ MusicClipType),\n/* harmony export */   \"MusicTrack\": () => (/* binding */ MusicTrack),\n/* harmony export */   \"SyntheysizerEvents\": () => (/* binding */ SyntheysizerEvents),\n/* harmony export */   \"TemplateClip\": () => (/* binding */ TemplateClip),\n/* harmony export */   \"VideoClip\": () => (/* binding */ VideoClip),\n/* harmony export */   \"dial_set\": () => (/* binding */ dial_set),\n/* harmony export */   \"joystick_set\": () => (/* binding */ joystick_set),\n/* harmony export */   \"note_set\": () => (/* binding */ note_set),\n/* harmony export */   \"pad_set\": () => (/* binding */ pad_set),\n/* harmony export */   \"poly_note_set\": () => (/* binding */ poly_note_set)\n/* harmony export */ });\nconst SyntheysizerEvents = window;\r\n\r\nconst note_set = {\r\n  pitch: 0,\r\n  note: 0,\r\n  value: 0\r\n};\r\nconst poly_note_set = {\r\n  pitch: [],\r\n  note : [],\r\n  value : []\r\n}\r\n\r\nconst pad_set = {\r\n  id: 0,\r\n  value: 0\r\n};\r\n\r\nconst dial_set = {\r\n  value: [[0.0, 0.0, 0.0, 0.0], \r\n          [0.0, 0.0, 0.0, 0.0]]  //순서대로  [21, 22, 23, 24]]\r\n}; \r\n\r\nconst joystick_set = {\r\n  value:[0, 0]\r\n};  \r\n\r\nconst MusicClipType = {\r\n  Mood: \"Mood\",\r\n  Melody: \"Melody\",\r\n  Beat: \"Beat\",\r\n  Lyrics:\"Lyrics\",\r\n  Template: \"Template\"\r\n}\r\n\r\nconst MusicNote = {\r\n  note:\"C0\",\r\n  intensity : 0.0,\r\n  start: 0.0,\r\n  end: -1.0\r\n}\r\nclass TemplateClip{\r\n  constructor(Clip_id, duration = 30, instrument = 0){\r\n    this.Clip_id = Clip_id;\r\n    this.duration = duration;\r\n    this.instrument = instrument;\r\n    this.dial_set = [[0.0, 0.0, 0.0, 0.0], \r\n                     [0.0, 0.0, 0.0, 0.0]]\r\n  }\r\n  set_dial(dial_set){\r\n    this.dial_set = dial_set\r\n  }\r\n  set_duration(duration){\r\n    this.duration = duration;\r\n  }\r\n  get_Clip_id(){\r\n    return this.Clip_id;\r\n  }\r\n  get_duration(){\r\n    return this.duration;\r\n  }\r\n  get_instrument(){\r\n    return this.instrument;\r\n  }\r\n  get_dial(){\r\n    return this.dial_set;\r\n  }\r\n}\r\n\r\nclass VideoObject{\r\n  constructor(videoId, videoData, videoDuration){{\r\n    this.videoId = videoId;\r\n    this.videoData = videoData;\r\n    this.videoDuration = videoDuration;\r\n  }}\r\n}\r\n\r\n\r\nclass VideoClip{\r\n  constructor (videoId = [], videoData = [], videoDuration = []){ \r\n    this.videoId = videoId;\r\n    this.videoData = videoData;\r\n    this.videoDuration = videoDuration;\r\n  }\r\n  setVideo(videoId, videoData, videoDuration){\r\n    this.videoId.push(videoId);\r\n    this.videoData.push(videoData);\r\n    this.videoDuration.push(videoDuration);\r\n  }\r\n  getVideoData(videoId){\r\n    if (videoId >= 0 && videoId < this.videoId.length){\r\n      // console.log(this.videoId)\r\n      // console.log(videoId)\r\n      // let index = this.videoId.indexOf(videoId);\r\n      // console.log(\"get id :\", videoId, \"index :\", index)\r\n      return this.videoData[videoId]\r\n    }\r\n    else{\r\n      console.error(\"Data index out of bounds\");\r\n      return null\r\n    }\r\n  }\r\n  getVideoDuration(videoId){\r\n    if (videoId >= 0 && videoId < this.videoId.length){\r\n      // console.log(this.videoId)\r\n      // console.log(videoId)\r\n      // let index = this.videoId.indexOf(videoId);\r\n      // console.log(\"get id :\", videoId, \"index :\", index)\r\n      return this.videoDuration[videoId]\r\n    }\r\n    else{\r\n      console.error(\"Data index out of bounds\");\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nclass MusicClip {\r\n  constructor (Type, Clip_id, duration = 30, arraySet = [], timeSet = [], lyricSet = [], lyrictimeSet = [], lyricsVideoId = []) {\r\n      console.log(\"music Type : \", Type, \"Clip_id\", Clip_id,  \"duration\", duration);\r\n      this.Type = Type;\r\n      this.Clip_id = Clip_id;\r\n      this.duration = duration;\r\n      if(Type==MusicClipType.Melody){\r\n        this.melodyNoteSet = arraySet;\r\n        this.melodyTimeset = timeSet;\r\n        this.melodyNoteId = arraySet.length;\r\n\r\n        this.lyricSet = lyricSet;\r\n        this.lyrictimeSet = lyrictimeSet;\r\n        this.lyricId = lyricSet.length;\r\n        this.lyricsVideoId = lyricsVideoId\r\n      }\r\n      if(Type==MusicClipType.Beat){\r\n        this.beatSet = arraySet;\r\n        this.beatTime = timeSet;\r\n        this.beatSetId = arraySet.length;\r\n      }\r\n  }\r\n  setType(type){\r\n    this.Type = type;\r\n  }\r\n  setNoteInput(note, time) {\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyNoteSet.push(note);\r\n      this.melodyTimeset.push([time, -1]);\r\n      this.melodyNoteId +=1;\r\n    }\r\n    else{\r\n      alert(\"This Cilp type is Melody\");\r\n    }\r\n  }\r\n  setNoteRelease(note, time) {\r\n    if(this.Type==MusicClipType.Melody){\r\n      for (let i = this.melodyNoteSet.length - 1; i >= 0; i--) {\r\n        if (this.melodyNoteSet[i] === note) {\r\n          if(this.melodyTimeset[i][1] == -1){\r\n            this.melodyTimeset[i][1] = time;\r\n            break;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      alert(\"This Cilp type is Melody\");\r\n    }\r\n  }\r\n  setBeatInput(pad_id, time) {\r\n    if(this.Type==MusicClipType.Beat){\r\n      this.beatSet.push(pad_id);\r\n      this.beatTime.push(time);\r\n      this.beatSetId+=1;\r\n    }\r\n    else{\r\n      alert(\"This Clip type is Beat\");\r\n    }\r\n  }\r\n  setDuration(duration){\r\n    this.duration = duration;\r\n  }\r\n  setInstrument(instrument_id){\r\n    this.instrument_id = instrument_id;\r\n  }\r\n  setLyrics(lyric, timeset){\r\n    this.lyricSet.push(lyric);\r\n    this.lyrictimeSet.push(timeset);\r\n    this.lyricId += 1;\r\n    this.lyricsVideoId.push(-1);\r\n  }\r\n  setLyricsVideo(lyricsId, vidoeId){\r\n    this.lyricsVideoId[lyricsId] = vidoeId;\r\n  }\r\n  editNote(noteIndex, deltaTimeset){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyTimeset[noteIndex][0] += deltaTimeset[0];\r\n      this.melodyTimeset[noteIndex][1] += deltaTimeset[1];\r\n    }\r\n    else{\r\n      this.beatTime[noteIndex] += deltaTimeset[0];\r\n    }\r\n  }\r\n  editLyrics(lyricid, deltaTimeset){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyrictimeSet[lyricid][0] += deltaTimeset[0];\r\n      this.lyrictimeSet[lyricid][1] += deltaTimeset[1];\r\n    }\r\n  }\r\n  deleteNote(noteIndex){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.melodyNoteSet.splice(noteIndex,1);\r\n      this.melodyTimeset.splice(noteIndex,1);\r\n    }\r\n    else{\r\n      this.beatSet.splice(noteIndex,1);\r\n      this.beatTime.splice(noteIndex,1);\r\n    }\r\n  }\r\n  deletelyric(lyricId){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyricSet.splice(lyricId,1);\r\n      this.lyrictimeSet.splice(lyricId,1);\r\n      this.lyricsVideoId.push(lyricId,1);\r\n    }\r\n  }\r\n  dleteAlllyric(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      this.lyricSet =[];\r\n      this.lyrictimeSet=[];\r\n      this.lyricId = 0;\r\n      this.lyricsVideoId = [];\r\n    }\r\n  }\r\n  getClipLastTime(){\r\n    let lastTime = 1;\r\n    if(this.Type == MusicClipType.Melody){\r\n      for(let i=0; i<this.melodyTimeset.length; i++){\r\n        if(lastTime < this.melodyTimeset[i][1]){\r\n          lastTime = this.melodyTimeset[i][1]\r\n        }\r\n      }\r\n      for(let i=0; i<this.lyrictimeSet.length; i++){\r\n        if(lastTime < this.lyrictimeSet[i][1]){\r\n          lastTime = this.lyrictimeSet[i][1]\r\n        }\r\n      }\r\n      return lastTime\r\n    }\r\n    else{\r\n      for(let i=0; i<this.beatTime.length; i++){\r\n        if(lastTime < this.beatTime[i]){\r\n          lastTime = this.beatTime[i]\r\n        }\r\n      }\r\n      return lastTime\r\n    }\r\n  }\r\n  getLyricsVideoId(lyricsId){\r\n    return this.lyricsVideoId[lyricsId];\r\n  }\r\n  getClipId(){\r\n    return this.Clip_id;\r\n  }\r\n  getClipType(){\r\n    return this.Type;\r\n  }\r\n  getDuration(){\r\n    return parseFloat(this.duration);\r\n  }\r\n  getNoteIndex(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      return this.melodyNoteId;\r\n    }\r\n    else{\r\n      return this.beatSetId;\r\n    }\r\n  }\r\n  getLyricsIndex(){\r\n    return this.lyricId;\r\n  }\r\n  getMusicClip(){\r\n    if(this.Type==MusicClipType.Melody){\r\n      return [this.melodyNoteSet, this.melodyTimeset]\r\n    }\r\n    else{\r\n      return [this.beatSet, this.beatTime]\r\n    }\r\n  }\r\n\r\n  getcurrentNoteSet(currentTime){\r\n    const noteSet = []\r\n    if(this.Type==MusicClipType.Melody){\r\n      //return [this.melodyNoteSet, this.melodyTimeset]\r\n      for (let i = 0; i < this.melodyTimeset.length; i++) {\r\n        if (this.melodyTimeset[i][0] <= currentTime && currentTime < this.melodyTimeset[i][1]) {\r\n          noteSet.push(this.melodyNoteSet[i]);\r\n        }\r\n      }\r\n      return noteSet;\r\n    }\r\n    else{\r\n      //return [this.beatSet, this.beatTime]\r\n      for (let i = 0; i < this.beatTime.length; i++) {\r\n        if (this.beatTime[i] - 1/60 <= currentTime && currentTime < this.beatTime[i] + 1/60) {\r\n          noteSet.push(this.beatSet[i]);\r\n        }\r\n      }\r\n      return noteSet;\r\n    }\r\n  }\r\n\r\n  getLyrics(currentTime){\r\n    //console.log(this.lyricSet, this.lyrictimeSet)\r\n    for (let i = 0; i < this.lyrictimeSet.length; i++) {\r\n      if (this.lyrictimeSet[i][0] <= currentTime && currentTime < this.lyrictimeSet[i][1]) {\r\n        return [this.lyricSet[i], i];\r\n      }\r\n    }\r\n    return [\"\", -1];\r\n  }\r\n  getLyricsTimeset(lyricsId){\r\n    if (lyricsId < this.lyrictimeSet.length && lyricsId >= 0 ){ \r\n      return [this.lyrictimeSet[lyricsId][0], this.lyrictimeSet[lyricsId][1]];\r\n    }\r\n    else{\r\n      return [null, null]\r\n    }\r\n  }\r\n  getLyricsLastTime(){\r\n    let lastTime = 0;\r\n    if(this.Type == MusicClipType.Melody){\r\n      for(let i=0; i<this.lyrictimeSet.length; i++){\r\n        if(lastTime < this.lyrictimeSet[i][1]){\r\n          lastTime = this.lyrictimeSet[i][1]\r\n        }\r\n      }\r\n    }\r\n    return lastTime\r\n  }\r\n  getAllLyrics(){\r\n    return [this.lyricSet, this.lyrictimeSet, this.lyricsVideoId];\r\n  }\r\n}\r\n\r\nclass MusicTrack{\r\n  constructor (userId = 0, id_set = [[],[],[]], time_set = [[], [], []]){\r\n    this.userId = userId;\r\n\r\n    this.TemplateIdClip = id_set[0];\r\n    this.MelodyClipIdList = id_set[1];\r\n    this.BeatClipIdList = id_set[2];\r\n\r\n    this.TemplateTimeset = time_set[0];\r\n    this.MelodyTimeset = time_set[1];\r\n    this.BeatTimeset = time_set[2];\r\n  }\r\n  setMusicClip(musicClip, clipTime){\r\n    if(musicClip.getClipType() == MusicClipType.Melody){\r\n      this.MelodyClipIdList.push(musicClip.getClipId());\r\n      let duration = parseFloat(musicClip.getDuration());\r\n      this.MelodyTimeset.push([clipTime, clipTime + duration]);\r\n      console.log(\"Add Melody box\", this.MelodyClipIdList);\r\n    }\r\n    else{\r\n      this.BeatClipIdList.push(musicClip.getClipId());\r\n      let duration = parseFloat(musicClip.getDuration());\r\n      this.BeatTimeset.push([clipTime, clipTime + duration]);\r\n      console.log(\"Add Beat box\", this.BeatClipIdList);\r\n    }\r\n  }\r\n  setTemplateClip(templateId, clipTime){  //지금 코드가 조금 꼬여서 임의로 Template은 30초 길이로 고정\r\n    this.TemplateIdClip.push(templateId);\r\n    this.TemplateTimeset.push([clipTime, clipTime + 30]);\r\n    console.log(\"Add Template box\", this.TemplateIdClip);\r\n  }\r\n  editMusicClip(type, clip_id, deltaTime){\r\n    if(type == MusicClipType.Melody){\r\n      this.MelodyTimeset[clip_id][0] += deltaTime;\r\n      this.MelodyTimeset[clip_id][1] += deltaTime;\r\n    }\r\n    else{\r\n      this.BeatTimeset[clip_id][0] += deltaTime;\r\n      this.BeatTimeset[clip_id][1] += deltaTime;\r\n    }\r\n  }\r\n  getTempalateId(){\r\n    return this.TemplateIdClip.length;\r\n  }\r\n  getMelodyId(){\r\n    return this.MelodyClipIdList.length;\r\n  }\r\n  getBeatId(){\r\n    return this.BeatClipIdList.length;\r\n  }\r\n  getcurrentClipSet(currentTime){\r\n    const Meldoy_set = []\r\n    const Beat_set = []\r\n    const Template_set = []\r\n    //console.log(this.BeatTimeset);\r\n    for (let i = 0; i < this.TemplateTimeset.length; i++) {\r\n      if (this.TemplateTimeset[i][0] <= currentTime && currentTime < this.TemplateTimeset[i][1]) {\r\n        Template_set.push(this.TemplateTimeset[i][0]);  // 시간이 먼저\r\n        Template_set.push(this.TemplateIdClip[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.MelodyTimeset.length; i++) {\r\n      if (this.MelodyTimeset[i][0] <= currentTime && currentTime < this.MelodyTimeset[i][1]) {\r\n        Meldoy_set.push(this.MelodyTimeset[i][0]);\r\n        Meldoy_set.push(this.MelodyClipIdList[i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < this.BeatTimeset.length; i++) {\r\n      if (this.BeatTimeset[i][0] <= currentTime && currentTime < this.BeatTimeset[i][1]) {\r\n        Beat_set.push(this.BeatTimeset[i][0]);\r\n        Beat_set.push(this.BeatClipIdList[i]);\r\n      }\r\n    }\r\n    return [Template_set, Meldoy_set, Beat_set];  //순서는 항상 Template, Melody, Beat로 고정\r\n  }\r\n  getUserId(){\r\n    return this.userId;\r\n  }\r\n  getIdData(){\r\n    return [this.TemplateIdClip, this.MelodyClipIdList, this.BeatClipIdList]\r\n  }\r\n  getTimeData(){\r\n    return [this.TemplateTimeset, this.MelodyTimeset, this.BeatTimeset]\r\n  }\r\n  getTemplateSet(){\r\n    return [this.TemplateIdClip, this.TemplateTimeset]\r\n  }\r\n  getMelodySet(){\r\n    return [this.MelodyClipIdList, this.MelodyTimeset]\r\n  }\r\n  getBeatSet(){\r\n    return [this.BeatClipIdList, this.BeatTimeset]\r\n  }\r\n  deleteClip(clipType, clipIndex){\r\n    console.log(\"delete Track\", clipType, clipIndex);\r\n    if(clipType != null){\r\n      if(clipType == MusicClipType.Template){\r\n        this.TemplateIdClip.splice(clipIndex,1)\r\n        this.TemplateTimeset.splice(clipIndex,1)\r\n      }\r\n      else if(clipType == MusicClipType.Melody){\r\n        this.MelodyClipIdList.splice(clipIndex,1)\r\n        this.MelodyTimeset.splice(clipIndex,1)\r\n      }\r\n      else{\r\n        this.BeatClipIdList.splice(clipIndex,1)\r\n        this.BeatTimeset.splice(clipIndex,1)\r\n      }\r\n    }\r\n  }\r\n  // setMusicClip(Melody_clip_array){  //Track의 Clip 정리 코드\r\n  //   const MaxId = Math.max.apply(null, this.MelodyClipIdList);\r\n  // }\r\n  // setBeatClip(Beat_clip_array){  //Track의 Clip 정리 코드\r\n  //   const MaxId = Math.max.apply(null, this.BeatClipIdList);\r\n  // }\r\n  // saveTrack(){\r\n  //   console.log(\"save the Music Track\");\r\n  // }\r\n}\n\n//# sourceURL=webpack://Synthesizer/./src/js/Share.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/Share.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;