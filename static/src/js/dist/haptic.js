/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/haptic.js":
/*!**************************!*\
  !*** ./src/js/haptic.js ***!
  \**************************/
/***/ (() => {

eval("\r\n//import {audio, wavesurfer} from './modules.js';\r\n// export {haptic_change};\r\n\r\n// Create an instance\r\nlet audio_buffer;\r\nlet AudioIsReady = '';\r\n\r\nlet sending_delay = 0.20\r\nlet ch0_data;\r\nlet ch1_data;\r\nlet freq = 11;\r\nlet amp = 50;\r\nlet last_time = 0;\r\n// let freqPanner = document.querySelector('[data-action=\"frequency\"]');\r\n// freqPanner.addEventListener('input', event => {\r\n//     freq = Number(freqPanner.value);\r\n// });\r\n\r\nlet ampPanner = document.querySelector('[data-action=\"amplitude\"]');\r\nampPanner.addEventListener('input', event => {\r\n    amp = Number(ampPanner.value);\r\n});\r\n\r\nfunction init(){\r\n    console.log('Haptic_code is Initiated');\r\n\r\n}\r\ninit();\r\n\r\nclass HapticArray{\r\n    constructor() {\r\n        this.devices = []\r\n      }\r\n    \r\n    add(hapticdevice){\r\n        this.devices.push(hapticdevice);\r\n    }\r\n    del(id){\r\n        let index = this.find_index(id)\r\n        if (index != -1){\r\n            this.devices[index].disconnect(haptic_listener)\r\n            // console.log('haptic listener', haptic_listener)\r\n            this.devices.splice(index, 1);\r\n            console.log(\"device successfully disconneted\" );\r\n        }\r\n    }\r\n    send(data){\r\n        this.devices.forEach(device => {\r\n            device.write(data);\r\n        });\r\n    }\r\n    find_index(id){\r\n        let fin = -1;\r\n        let index = 0;\r\n        this.devices.forEach(device => {\r\n            if (device.device.id == id){\r\n                console.log(\"found the device\", index);\r\n                fin = index\r\n            }\r\n            index = index + 1;\r\n        });\r\n        if (fin == -1){\r\n            console.log(\"there is no device in the list\");\r\n        }\r\n        return fin;\r\n    }\r\n}\r\nlet haptic_devices = new HapticArray();\r\n\r\nclass HapticDevice {\r\n\r\n    constructor() {\r\n      this.device = null;\r\n      this.onDisconnected = this.onDisconnected.bind(this);\r\n    }\r\n    \r\n    async request() {\r\n      let options = {\r\n        \"filters\": [\r\n        {\r\n          \"namePrefix\": \"Haptic\"\r\n        //   \"\": 'My3n5xtL7oMT8ChSVKs1gQ=='\r\n        }\r\n        // {\r\n        //     \"namePrefix\": \"Haptic\",\r\n        //     \"deviceAddress\": \"XX:XX:XX:XX:XX:XX\" // Replace with the first Bluetooth address\r\n        // },\r\n        // {\r\n        //     \"namePrefix\": \"Haptic\",\r\n        //     \"deviceAddress\": \"YY:YY:YY:YY:YY:YY\" // Replace with the second Bluetooth address\r\n        // }\r\n        ],\r\n        \"optionalServices\": [\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\"],\r\n        \"acceptAllDevices\": false\r\n      };\r\n      this.device = await navigator.bluetooth.requestDevice(options);\r\n\r\n    alert(this.device.id);\r\n\r\n\r\n      if (!this.device) {write\r\n        throw \"No device selected\";\r\n      }\r\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected);\r\n    }\r\n    \r\n    async connect() {\r\n      if (!this.device) {\r\n          Promise.reject('Device is not connected.');\r\n        return 0\r\n      }\r\n      await this.device.gatt.connect();\r\n      return 1\r\n    }\r\n    \r\n    write(data) {\r\n      // RX Characteristic (6E400002-B5A3-F393-E0A9-E50E24DCCA9E)\r\n      // Write or Write Without Response\r\n      // Write data to the RX Characteristic to send it on to the UART interface.\r\n      return this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\")\r\n      .then(service => service.getCharacteristic(\"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"))\r\n      .then(characteristic => characteristic.writeValue(data))\r\n      .catch(error => {\r\n        console.log('Argh! ' + error);\r\n        sending_delay = 1.2;\r\n      });\r\n    }\r\n  \r\n    async startNotifications(listener) {\r\n      // TX Characteristic (6E400003-B5A3-F393-E0A9-E50E24DCCA9E)\r\n      // Notify\r\n      // Enable notifications for the TX Characteristic to receive data from the application. The application transmits all data that is received over UART as notifications.\r\n      const service = await this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\");\r\n      const characteristic = await service.getCharacteristic(\"6e400003-b5a3-f393-e0a9-e50e24dcca9e\");\r\n      await characteristic.startNotifications();\r\n      characteristic.addEventListener('characteristicvaluechanged', listener);\r\n    }\r\n  \r\n    async stopNotifications(listener) {\r\n        const service = await this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\");\r\n        const characteristic = await service.getCharacteristic(\"6e400003-b5a3-f393-e0a9-e50e24dcca9e\");\r\n        await characteristic.stopNotifications();\r\n        characteristic.removeEventListener('characteristicvaluechanged', listener);\r\n    }\r\n  \r\n    async disconnect(listener) {\r\n      if (!this.device) {\r\n        return Promise.reject('Device is not connected.');\r\n      }\r\n      await this.stopNotifications(listener);\r\n      this.device.gatt.disconnect();\r\n\r\n    }\r\n  \r\n    onDisconnected() {\r\n      console.log('Device is disconnected.');\r\n      console.log('> Name:             ' + this.device.name);\r\n      console.log('> Id:               ' + this.device.id);\r\n      console.log('> Connected:        ' + this.device.gatt.connected);\r\n    }\r\n}\r\n\r\nfunction onebyte_to_twobyte_int(high, low){\r\n    let tmp = (((high & 0xff) << 8) | (low & 0xff));\r\n    return tmp;\r\n}\r\n\r\nfunction twobyte_int_to_onebyte(origin){\r\n    let high = ((origin >> 8) & 0xff);\r\n    let low = origin & 0xff;\r\n    return [high, low];\r\n}\r\n\r\nfunction onebyte_to_fourbyte_float(origin){\r\n    let buf = new ArrayBuffer(4);\r\n    let view = new DataView(buf);\r\n    origin.forEach(function (b, i) {\r\n        view.setInt8(i, b);\r\n    });\r\n    return view.getFloat32(0);\r\n}\r\n\r\nfunction fourbyte_float_to_onebyte(origin){\r\n    let high = ((origin >> 8) & 0xff);\r\n    let low = origin & 0xff;\r\n    return [high, low];\r\n}\r\n\r\nfunction haptic_pattern_gen(){\r\n    let fftsize = wavesurfer.backend.analyser.frequencyBinCount;\r\n    let _freq = 1;\r\n    let _index = 0;\r\n    let ampArray = new Float32Array(fftsize);\r\n    let dataArray = [0, 0];\r\n    const _HzIndex =  new Int16Array([10, 23, 46, 70, 93, 117, 140, 164, 187, 210, 234, 257, 281,\r\n                                        304, 328, 351, 375, 398, 421, 445, 468, 492, 500]);\r\n    wavesurfer.backend.analyser.getFloatTimeDomainData(ampArray);\r\n\r\n    for (let i = 0;i < fftsize; i++){\r\n        if (ampArray[i] > 0.01) {\r\n            dataArray.push(ampArray[i]);\r\n        }\r\n    }\r\n    dataArray = new Float32Array(dataArray);\r\n    \r\n    _index = dataArray.findIndex(function (item) {return item == Math.max(...dataArray)});\r\n    _freq = parseInt(dataArray.length/freq);\r\n    _freq = parseInt(_index/_freq);\r\n\r\n    let _amp = parseInt(Math.max(...dataArray)* 2 * amp);\r\n    \r\n    if (_amp >= 100){\r\n        _amp = 100;\r\n    }\r\n    if (_freq == NaN){\r\n        _freq = 0\r\n    }\r\n    // console.log(_freq,_HzIndex[_freq], _amp, _index)\r\n    return [_HzIndex[_freq], _amp]\r\n}\r\n\r\nfunction SendHapticData(frequency, amplitude){\r\n    let data_buffer = new ArrayBuffer(19);\r\n    let view = new Int8Array(data_buffer);\r\n    view[0] = 36; // STX 0x24\r\n    view[1] = 2; // TYPE 0x02\r\n    \r\n    let tmp = twobyte_int_to_onebyte(frequency);\r\n    view[2] = tmp[0];\r\n    view[3] = tmp[1];\r\n    tmp = twobyte_int_to_onebyte(amplitude);\r\n    view[4] = tmp[0];\r\n    view[5] = tmp[1];\r\n    \r\n    view[17] = 13; // ETX 0x0D\r\n    view[18] = 10; // ETX 0x0A\r\n    //console.log(view);\r\n    haptic_devices.send(view);\r\n}\r\n\r\nfunction haptic_listener(event){\r\n    let data_buffer = new ArrayBuffer(19);\r\n    let view = new Uint8Array(data_buffer);\r\n\r\n    for (let i = 0; i<19;i++){\r\n        view[i] = event.currentTarget.value.getInt8(i);\r\n    }\r\n    console.log(view);\r\n    console.log(data_buffer);\r\n    // 0xF1 : battery info\r\n    // 4byte float\r\n    if (view[1]==-15){\r\n        console.log(\"current battery\" + onebyte_to_fourbyte_float([view[2],view[3],view[4],view[5]])/4.2);\r\n    }\r\n    // 0xF2 : echo [freq] [amp]\r\n    // 2byte, 2byte\r\n    if (view[1]==-14){\r\n        console.log(\"WOW\");\r\n    }\r\n    // 0xF3 : Device info [BLE Connection Interval MIN] [BLE Connection Interval MAX] [Freq MIN] [Freq MAX]\r\n    // 2byte, 2byte, 2byte, 2byte\r\n    if (view[1]==-13){\r\n        console.log(\"WOW\");\r\n        console.log(\"BLE Connection Interval MIN from\" + onebyte_to_twobyte_int(view[2],view[3]));\r\n        console.log(\"BLE Connection Interval MAX from\" + onebyte_to_twobyte_int(0,view[4],view[5]));\r\n        console.log(\"Freq MIN\" + onebyte_to_twobyte_int(view[6],view[7]));\r\n        console.log(\"Freq MAX\" + onebyte_to_twobyte_int(view[8],view[9]));\r\n    }\r\n    // 0xF4 : Device info2 [firmware version] [hardmware version] [MAC Address]\r\n    // 2byte, 2byte, 6byte\r\n    if (view[1]==-12){\r\n        console.log(\"WOW\");\r\n    }\r\n}\r\nlet isVibrating = false;\r\nlet timer;\r\ndocument\r\n    .querySelector('[data-action=\"HapticPatternPlayButton1\"]')\r\n    .addEventListener('click', function(event) {\r\n        console.log(\"Haptic Play1\");\r\n        //SendHapticData(100, 100);\r\n        if (isVibrating) {\r\n            clearTimeout(timer);\r\n        }\r\n        SendHapticData(150, amp*2);\r\n        isVibrating = true;\r\n        timer = setTimeout(function() {\r\n            SendHapticData(0, 0);    \r\n            isVibrating = false;\r\n        }, 200);\r\n    });\r\ndocument\r\n    .querySelector('[data-action=\"HapticPatternPlayButton2\"]')\r\n    .addEventListener('click', function(event) {\r\n        console.log(\"Haptic Play2\");\r\n        //SendHapticData(100, 100);\r\n        if (isVibrating) {\r\n            clearTimeout(timer);\r\n        }\r\n        SendHapticData(195, amp*2);\r\n        isVibrating = true;\r\n        timer = setTimeout(function() {\r\n            SendHapticData(0, 0);    \r\n            isVibrating = false;\r\n        }, 200);\r\n    });\r\ndocument\r\n    .querySelector('[data-action=\"HapticPatternPlayButton3\"]')\r\n    .addEventListener('click', function(event) {\r\n        console.log(\"Haptic Play3\");\r\n        //SendHapticData(100, 100);\r\n        if (isVibrating) {\r\n            clearTimeout(timer);\r\n        }\r\n        SendHapticData(254, amp*2);\r\n        isVibrating = true;\r\n        timer = setTimeout(function() {\r\n            SendHapticData(0, 0);    \r\n            isVibrating = false;\r\n        }, 200);\r\n    });\r\ndocument\r\n    .querySelector('[data-action=\"HapticPatternPlayButton4\"]')\r\n    .addEventListener('click', function(event) {\r\n        console.log(\"Haptic Play4\");\r\n        //SendHapticData(100, 100);\r\n        if (isVibrating) {\r\n            clearTimeout(timer);\r\n        }\r\n        SendHapticData(330, amp*2);\r\n        isVibrating = true;\r\n        timer = setTimeout(function() {\r\n            SendHapticData(0, 0);    \r\n            isVibrating = false;\r\n        }, 200);\r\n    });\r\n\r\ndocument\r\n    .querySelector('[data-action=\"DisconnectHapticDevice\"]')\r\n    .addEventListener('click', async event => {\r\n        SendHapticData(0, 0);\r\n        let device = new HapticDevice();\r\n        await device.request();\r\n        haptic_devices.del(device.device.id);\r\n    });\r\n\r\ndocument\r\n    .querySelector('[data-action=\"SearchHapticDevice\"]')\r\n    .addEventListener('click', async event => {\r\n        let device = new HapticDevice();\r\n        await device.request();\r\n        let flag = await device.connect();\r\n        if (flag){\r\n            await device.startNotifications(haptic_listener);\r\n            let tmp = haptic_devices.find_index(device.device.id)\r\n            if (tmp==-1){\r\n                haptic_devices.add(device);\r\n            }else{\r\n                console.log('the device is already connected')\r\n            }\r\n        }\r\n        console.log('> Name:             ' + device.device.name);\r\n        console.log('> Id:               ' + device.device.id);\r\n        console.log('> Connected:        ' + device.device.gatt.connected);\r\n    });\r\n\r\n    // document\r\n    // .querySelector('[data-action=\"toHaptic\"]')\r\n    // .addEventListener('click', function() {\r\n    //     console.log(wavesurfer.getDuration());\r\n    //     console.log(wavesurfer.backend.buffer.sampleRate);\r\n    //     console.log(wavesurfer.backend.buffer.length);\r\n    //     console.log(wavesurfer.backend.buffer.numberOfChannels);\r\n\r\n    //     ch0_data = wavesurfer.backend.buffer.getChannelData(0);\r\n    //     ch1_data = wavesurfer.backend.buffer.getChannelData(1);\r\n\r\n    //     const hz = 100;\r\n    //     const volume = 1.0;\r\n    //     let sineWaveArray = new Float32Array(wavesurfer.backend.buffer.length);\r\n    //     let i;\r\n    //     let sampleTime;\r\n\r\n    //     for (i = 0; i < sineWaveArray.length; i++) {\r\n    //         sampleTime = i / wavesurfer.backend.buffer.sampleRate;\r\n    //         // sineWaveArray[i] = Math.sin(Math.asin(ch0_data[i])* hz) * volume;\r\n    //         // sineWaveArray[i] = Math.sin(Math.asin(ch0_data[i])* Math.PI * 2) * volume;\r\n    //         sineWaveArray[i] = Math.sin(sampleTime * Math.PI * 2 * hz) * volume;\r\n    //     }\r\n        \r\n    //     let ch0_haptic = new Float32Array(wavesurfer.backend.buffer.length);\r\n    //     let ch1_haptic = new Float32Array(wavesurfer.backend.buffer.length);\r\n\r\n    //     for (i = 0; i < sineWaveArray.length; i++) {\r\n    //         ch0_haptic[i] = sineWaveArray[i]*Math.abs(ch0_data[i]);\r\n    //         ch1_haptic[i] = sineWaveArray[i]*Math.abs(ch1_data[i]);\r\n    //         // ch0_haptic[i] = sineWaveArray[i];\r\n    //         // ch1_haptic[i] = sineWaveArray[i];\r\n    //     }\r\n    //     console.log(ch1_haptic)\r\n    //     wavesurfer.backend.buffer.copyToChannel(ch0_haptic, 0);\r\n    //     wavesurfer.backend.buffer.copyToChannel(ch1_haptic, 1);\r\n        \r\n    //     wavesurfer.loadDecodedBuffer(wavesurfer.backend.buffer);\r\n\r\n        // console.log(wavesurfer.backend.data);\r\n        // wavesurfer.load(osc)\r\n    //});\n\n//# sourceURL=webpack://Synthesizer/./src/js/haptic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/haptic.js"]();
/******/ 	
/******/ })()
;