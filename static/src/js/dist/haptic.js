/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/haptic.js":
/*!**************************!*\
  !*** ./src/js/haptic.js ***!
  \**************************/
/***/ (() => {

eval("\n//import {audio, wavesurfer} from './modules.js';\n// export {haptic_change};\n\n// Create an instance\nlet audio_buffer;\nlet AudioIsReady = '';\n\nlet sending_delay = 0.20\nlet ch0_data;\nlet ch1_data;\nlet freq = 11;\nlet amp = 50;\nlet last_time = 0;\n// let freqPanner = document.querySelector('[data-action=\"frequency\"]');\n// freqPanner.addEventListener('input', event => {\n//     freq = Number(freqPanner.value);\n// });\n\nlet ampPanner = document.querySelector('[data-action=\"amplitude\"]');\nampPanner.addEventListener('input', event => {\n    amp = Number(ampPanner.value);\n});\n\nfunction init(){\n    console.log('Haptic_code is Initiated');\n\n}\ninit();\n\nclass HapticArray{\n    constructor() {\n        this.devices = []\n      }\n    \n    add(hapticdevice){\n        this.devices.push(hapticdevice);\n    }\n    del(id){\n        let index = this.find_index(id)\n        if (index != -1){\n            this.devices[index].disconnect(haptic_listener)\n            // console.log('haptic listener', haptic_listener)\n            this.devices.splice(index, 1);\n            console.log(\"device successfully disconneted\" );\n        }\n    }\n    send(data){\n        this.devices.forEach(device => {\n            device.write(data);\n        });\n    }\n    find_index(id){\n        let fin = -1;\n        let index = 0;\n        this.devices.forEach(device => {\n            if (device.device.id == id){\n                console.log(\"found the device\", index);\n                fin = index\n            }\n            index = index + 1;\n        });\n        if (fin == -1){\n            console.log(\"there is no device in the list\");\n        }\n        return fin;\n    }\n}\nlet haptic_devices = new HapticArray();\n\nclass HapticDevice {\n\n    constructor() {\n      this.device = null;\n      this.onDisconnected = this.onDisconnected.bind(this);\n    }\n    \n    async request() {\n      let options = {\n        \"filters\": [\n        {\n          \"namePrefix\": \"Haptic\"\n        //   \"\": 'My3n5xtL7oMT8ChSVKs1gQ=='\n        }\n        // {\n        //     \"namePrefix\": \"Haptic\",\n        //     \"deviceAddress\": \"XX:XX:XX:XX:XX:XX\" // Replace with the first Bluetooth address\n        // },\n        // {\n        //     \"namePrefix\": \"Haptic\",\n        //     \"deviceAddress\": \"YY:YY:YY:YY:YY:YY\" // Replace with the second Bluetooth address\n        // }\n        ],\n        \"optionalServices\": [\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\"],\n        \"acceptAllDevices\": false\n      };\n      this.device = await navigator.bluetooth.requestDevice(options);\n\n    alert(this.device.id);\n\n\n      if (!this.device) {write\n        throw \"No device selected\";\n      }\n      this.device.addEventListener('gattserverdisconnected', this.onDisconnected);\n    }\n    \n    async connect() {\n      if (!this.device) {\n          Promise.reject('Device is not connected.');\n        return 0\n      }\n      await this.device.gatt.connect();\n      return 1\n    }\n    \n    write(data) {\n      // RX Characteristic (6E400002-B5A3-F393-E0A9-E50E24DCCA9E)\n      // Write or Write Without Response\n      // Write data to the RX Characteristic to send it on to the UART interface.\n      return this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\")\n      .then(service => service.getCharacteristic(\"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"))\n      .then(characteristic => characteristic.writeValue(data))\n      .catch(error => {\n        console.log('Argh! ' + error);\n        sending_delay = 1.2;\n      });\n    }\n  \n    async startNotifications(listener) {\n      // TX Characteristic (6E400003-B5A3-F393-E0A9-E50E24DCCA9E)\n      // Notify\n      // Enable notifications for the TX Characteristic to receive data from the application. The application transmits all data that is received over UART as notifications.\n      const service = await this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\");\n      const characteristic = await service.getCharacteristic(\"6e400003-b5a3-f393-e0a9-e50e24dcca9e\");\n      await characteristic.startNotifications();\n      characteristic.addEventListener('characteristicvaluechanged', listener);\n    }\n  \n    async stopNotifications(listener) {\n        const service = await this.device.gatt.getPrimaryService(\"6e400001-b5a3-f393-e0a9-e50e24dcca9e\");\n        const characteristic = await service.getCharacteristic(\"6e400003-b5a3-f393-e0a9-e50e24dcca9e\");\n        await characteristic.stopNotifications();\n        characteristic.removeEventListener('characteristicvaluechanged', listener);\n    }\n  \n    async disconnect(listener) {\n      if (!this.device) {\n        return Promise.reject('Device is not connected.');\n      }\n      await this.stopNotifications(listener);\n      this.device.gatt.disconnect();\n\n    }\n  \n    onDisconnected() {\n      console.log('Device is disconnected.');\n      console.log('> Name:             ' + this.device.name);\n      console.log('> Id:               ' + this.device.id);\n      console.log('> Connected:        ' + this.device.gatt.connected);\n    }\n}\n\nfunction onebyte_to_twobyte_int(high, low){\n    let tmp = (((high & 0xff) << 8) | (low & 0xff));\n    return tmp;\n}\n\nfunction twobyte_int_to_onebyte(origin){\n    let high = ((origin >> 8) & 0xff);\n    let low = origin & 0xff;\n    return [high, low];\n}\n\nfunction onebyte_to_fourbyte_float(origin){\n    let buf = new ArrayBuffer(4);\n    let view = new DataView(buf);\n    origin.forEach(function (b, i) {\n        view.setInt8(i, b);\n    });\n    return view.getFloat32(0);\n}\n\nfunction fourbyte_float_to_onebyte(origin){\n    let high = ((origin >> 8) & 0xff);\n    let low = origin & 0xff;\n    return [high, low];\n}\n\nfunction haptic_pattern_gen(){\n    let fftsize = wavesurfer.backend.analyser.frequencyBinCount;\n    let _freq = 1;\n    let _index = 0;\n    let ampArray = new Float32Array(fftsize);\n    let dataArray = [0, 0];\n    const _HzIndex =  new Int16Array([10, 23, 46, 70, 93, 117, 140, 164, 187, 210, 234, 257, 281,\n                                        304, 328, 351, 375, 398, 421, 445, 468, 492, 500]);\n    wavesurfer.backend.analyser.getFloatTimeDomainData(ampArray);\n\n    for (let i = 0;i < fftsize; i++){\n        if (ampArray[i] > 0.01) {\n            dataArray.push(ampArray[i]);\n        }\n    }\n    dataArray = new Float32Array(dataArray);\n    \n    _index = dataArray.findIndex(function (item) {return item == Math.max(...dataArray)});\n    _freq = parseInt(dataArray.length/freq);\n    _freq = parseInt(_index/_freq);\n\n    let _amp = parseInt(Math.max(...dataArray)* 2 * amp);\n    \n    if (_amp >= 100){\n        _amp = 100;\n    }\n    if (_freq == NaN){\n        _freq = 0\n    }\n    // console.log(_freq,_HzIndex[_freq], _amp, _index)\n    return [_HzIndex[_freq], _amp]\n}\n\nfunction SendHapticData(frequency, amplitude){\n    let data_buffer = new ArrayBuffer(19);\n    let view = new Int8Array(data_buffer);\n    view[0] = 36; // STX 0x24\n    view[1] = 2; // TYPE 0x02\n    \n    let tmp = twobyte_int_to_onebyte(frequency);\n    view[2] = tmp[0];\n    view[3] = tmp[1];\n    tmp = twobyte_int_to_onebyte(amplitude);\n    view[4] = tmp[0];\n    view[5] = tmp[1];\n    \n    view[17] = 13; // ETX 0x0D\n    view[18] = 10; // ETX 0x0A\n    //console.log(view);\n    haptic_devices.send(view);\n}\n\nfunction haptic_listener(event){\n    let data_buffer = new ArrayBuffer(19);\n    let view = new Uint8Array(data_buffer);\n\n    for (let i = 0; i<19;i++){\n        view[i] = event.currentTarget.value.getInt8(i);\n    }\n    console.log(view);\n    console.log(data_buffer);\n    // 0xF1 : battery info\n    // 4byte float\n    if (view[1]==-15){\n        console.log(\"current battery\" + onebyte_to_fourbyte_float([view[2],view[3],view[4],view[5]])/4.2);\n    }\n    // 0xF2 : echo [freq] [amp]\n    // 2byte, 2byte\n    if (view[1]==-14){\n        console.log(\"WOW\");\n    }\n    // 0xF3 : Device info [BLE Connection Interval MIN] [BLE Connection Interval MAX] [Freq MIN] [Freq MAX]\n    // 2byte, 2byte, 2byte, 2byte\n    if (view[1]==-13){\n        console.log(\"WOW\");\n        console.log(\"BLE Connection Interval MIN from\" + onebyte_to_twobyte_int(view[2],view[3]));\n        console.log(\"BLE Connection Interval MAX from\" + onebyte_to_twobyte_int(0,view[4],view[5]));\n        console.log(\"Freq MIN\" + onebyte_to_twobyte_int(view[6],view[7]));\n        console.log(\"Freq MAX\" + onebyte_to_twobyte_int(view[8],view[9]));\n    }\n    // 0xF4 : Device info2 [firmware version] [hardmware version] [MAC Address]\n    // 2byte, 2byte, 6byte\n    if (view[1]==-12){\n        console.log(\"WOW\");\n    }\n}\nlet isVibrating = false;\nlet timer;\ndocument\n    .querySelector('[data-action=\"HapticPatternPlayButton1\"]')\n    .addEventListener('click', function(event) {\n        console.log(\"Haptic Play1\");\n        //SendHapticData(100, 100);\n        if (isVibrating) {\n            clearTimeout(timer);\n        }\n        SendHapticData(150, amp*2);\n        isVibrating = true;\n        timer = setTimeout(function() {\n            SendHapticData(0, 0);    \n            isVibrating = false;\n        }, 200);\n    });\ndocument\n    .querySelector('[data-action=\"HapticPatternPlayButton2\"]')\n    .addEventListener('click', function(event) {\n        console.log(\"Haptic Play2\");\n        //SendHapticData(100, 100);\n        if (isVibrating) {\n            clearTimeout(timer);\n        }\n        SendHapticData(200, amp*2);\n        isVibrating = true;\n        timer = setTimeout(function() {\n            SendHapticData(0, 0);    \n            isVibrating = false;\n        }, 200);\n    });\ndocument\n    .querySelector('[data-action=\"HapticPatternPlayButton3\"]')\n    .addEventListener('click', function(event) {\n        console.log(\"Haptic Play3\");\n        //SendHapticData(100, 100);\n        if (isVibrating) {\n            clearTimeout(timer);\n        }\n        SendHapticData(250, amp*2);\n        isVibrating = true;\n        timer = setTimeout(function() {\n            SendHapticData(0, 0);    \n            isVibrating = false;\n        }, 200);\n    });\ndocument\n    .querySelector('[data-action=\"HapticPatternPlayButton4\"]')\n    .addEventListener('click', function(event) {\n        console.log(\"Haptic Play4\");\n        //SendHapticData(100, 100);\n        if (isVibrating) {\n            clearTimeout(timer);\n        }\n        SendHapticData(300, amp*2);\n        isVibrating = true;\n        timer = setTimeout(function() {\n            SendHapticData(0, 0);    \n            isVibrating = false;\n        }, 200);\n    });\n\ndocument\n    .querySelector('[data-action=\"DisconnectHapticDevice\"]')\n    .addEventListener('click', async event => {\n        SendHapticData(0, 0);\n        let device = new HapticDevice();\n        await device.request();\n        haptic_devices.del(device.device.id);\n    });\n\ndocument\n    .querySelector('[data-action=\"SearchHapticDevice\"]')\n    .addEventListener('click', async event => {\n        let device = new HapticDevice();\n        await device.request();\n        let flag = await device.connect();\n        if (flag){\n            await device.startNotifications(haptic_listener);\n            let tmp = haptic_devices.find_index(device.device.id)\n            if (tmp==-1){\n                haptic_devices.add(device);\n            }else{\n                console.log('the device is already connected')\n            }\n        }\n        console.log('> Name:             ' + device.device.name);\n        console.log('> Id:               ' + device.device.id);\n        console.log('> Connected:        ' + device.device.gatt.connected);\n    });\n\n    // document\n    // .querySelector('[data-action=\"toHaptic\"]')\n    // .addEventListener('click', function() {\n    //     console.log(wavesurfer.getDuration());\n    //     console.log(wavesurfer.backend.buffer.sampleRate);\n    //     console.log(wavesurfer.backend.buffer.length);\n    //     console.log(wavesurfer.backend.buffer.numberOfChannels);\n\n    //     ch0_data = wavesurfer.backend.buffer.getChannelData(0);\n    //     ch1_data = wavesurfer.backend.buffer.getChannelData(1);\n\n    //     const hz = 100;\n    //     const volume = 1.0;\n    //     let sineWaveArray = new Float32Array(wavesurfer.backend.buffer.length);\n    //     let i;\n    //     let sampleTime;\n\n    //     for (i = 0; i < sineWaveArray.length; i++) {\n    //         sampleTime = i / wavesurfer.backend.buffer.sampleRate;\n    //         // sineWaveArray[i] = Math.sin(Math.asin(ch0_data[i])* hz) * volume;\n    //         // sineWaveArray[i] = Math.sin(Math.asin(ch0_data[i])* Math.PI * 2) * volume;\n    //         sineWaveArray[i] = Math.sin(sampleTime * Math.PI * 2 * hz) * volume;\n    //     }\n        \n    //     let ch0_haptic = new Float32Array(wavesurfer.backend.buffer.length);\n    //     let ch1_haptic = new Float32Array(wavesurfer.backend.buffer.length);\n\n    //     for (i = 0; i < sineWaveArray.length; i++) {\n    //         ch0_haptic[i] = sineWaveArray[i]*Math.abs(ch0_data[i]);\n    //         ch1_haptic[i] = sineWaveArray[i]*Math.abs(ch1_data[i]);\n    //         // ch0_haptic[i] = sineWaveArray[i];\n    //         // ch1_haptic[i] = sineWaveArray[i];\n    //     }\n    //     console.log(ch1_haptic)\n    //     wavesurfer.backend.buffer.copyToChannel(ch0_haptic, 0);\n    //     wavesurfer.backend.buffer.copyToChannel(ch1_haptic, 1);\n        \n    //     wavesurfer.loadDecodedBuffer(wavesurfer.backend.buffer);\n\n        // console.log(wavesurfer.backend.data);\n        // wavesurfer.load(osc)\n    //});\n\n//# sourceURL=webpack://Synthesizer/./src/js/haptic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/haptic.js"]();
/******/ 	
/******/ })()
;